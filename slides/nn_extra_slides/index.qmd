---
title: "Extra stuff"
title-slide-attributes: 
  data-background-image: ../img/bg.jpg
  data-background-size: full
author: "Andrew MacDonald -- Guillaume Blanchet -- Vincent Tolon"
date: "2023-02-10"
execute:
  echo: true
format: 
  revealjs:
    theme: [default]
    logo: ../img/UdeS_logo_h_rgbHR.png
    transition: slide
    background-transition: fade
---

## Square matrix

The square matrix has as many rows at it has columns 
$$
\mathbf{B} = \begin{bmatrix}
				B_{11} & B_{12} & \dots & B_{1j} & \dots & B_{1n}\\
				B_{21} & B_{22} & \dots & B_{2j} & \dots & B_{2n}\\
				\vdots & \vdots & \ddots & \vdots & & \vdots\\
			  B_{i1} & B_{i2} & \dots & B_{ij} & \dots & B_{in}\\
		    \vdots & \vdots & & \vdots & \ddots & \vdots\\
		    B_{n1} & B_{n2} & \dots & B_{nj} & \dots & B_{nn}\\
		\end{bmatrix}
$$

## Determinant of a matrix

Not sure if it should be included or not

## Eigenvectors and eigenvalues
	
::: {style="font-size: 0.9em"}
Right eigenvector is :
	
$$\mathbf{A}\mathbf{w} = \lambda\mathbf{w}$$
Left eigenvector is :
	
$$\mathbf{v}\mathbf{A} = \lambda\mathbf{v}$$
	
**Rules**

- $\mathbf{A}$ has to be a square matrix
- If $\mathbf{w}$ is an eigenvector of $\mathbf{A}$, so is $c\mathbf{w}$ for any value of $c \neq0$
- The right eigenvector of $\mathbf{A}^T$ is the left eigenvector of $\mathbf{A}$
- Eigenvectors are linearly independent
:::

## Positive definite matrix

It is reasonably common when you build a hierarchical model to get an error message that state :

:::{style="font-size: 0.8em"}
`Error: Matrix X is not positive definite`
:::

or similarly

:::{style="font-size: 0.8em"}
`Error: Matrix X is not positive semi-definite`
:::

What does this mean ? Any idea ?

## Positive (semi-)definite matrix
### Nerdy mathematical definition

**Positive definite matrix**

$\mathbf{M}$ is a positive definite matrix if, for any real vector $\mathbf{z}$, $\mathbf{z}^t\mathbf{M}\mathbf{z} > 0$

**Positive semi-definite matrix**

$\mathbf{M}$ is a positive semi-definite matrix if, for any real vector $\mathbf{z}$, $\mathbf{z}^t\mathbf{M}\mathbf{z} \ge 0$

## Positive (semi-)definite matrix
### Checking if a matrix is positive (semi-)definite

The properties of eigenvalues can be used to detect if a matrix is positive (semi-) definite.

All we have to do is look at the eigenvalue of a square matrix. 

If all eigenvalues of a matrix $\mathbf{M}$ larger than 0, matrix $\mathbf{M}$ is positive definite.

If all eigenvalues of a matrix $\mathbf{M}$ larger than or equal ro 0, matrix $\mathbf{M}$ is positive semi-definite.

## Dot product
$$\mathbf{v} \cdot \mathbf{x}= v_1x_1+v_2x_2+\dots + v_nx_n$$

:::{style="color: blue;"}
$$
			\begin{bmatrix}
				3 & 1\\
			\end{bmatrix}
			\cdot
			\begin{bmatrix}
				2\\ 5\\
			\end{bmatrix} = 
				3 \times  2 + 1 \times 5 = 11
$$
:::

In R

```{r}
v <- c(3, 1)
x <- c(2,5)
sum(v * x)
```


## Solving systems of linear equation

$$
\begin{align*}
		1 &= 3\beta_1 + 5\beta_2 - 4\beta_3 \\
		0 &= \beta_1 - 2\beta_2 + 3\beta_3\\
		1 &= 4\beta_1 + 6\beta_2 + 5\beta_3\\
	\end{align*}
$$
$$
\mathbf{y} \,\,\,\,\,\,\,\,\,\,\qquad \mathbf{X} \,\,\,\,\,\,\,\,\,\,\,\qquad \boldsymbol{\beta} 
$$
$$
		\begin{bmatrix}
			1\\ 0\\ 1\\
		\end{bmatrix}=
		\begin{bmatrix}
			3 & 5 & -4\\
			1 & -2 & 3\\
			4 & 6 & 5 \\
		\end{bmatrix}
		\begin{bmatrix}
			\beta_1\\ \beta_2\\ \beta_3\\
		\end{bmatrix}
$$

## Solving systems of linear equation

::: {style="font-size: 0.9em"}
$$
\mathbf{y} \,\,\,\,\,\,\,\,\,\,\qquad \mathbf{X} \,\,\,\,\,\,\,\,\,\,\,\qquad \boldsymbol{\beta} 
$$
$$
		\begin{bmatrix}
			1\\ 0\\ 1\\
		\end{bmatrix}=
		\begin{bmatrix}
			3 & 5 & -4\\
			1 & -2 & 3\\
			4 & 6 & 5 \\
		\end{bmatrix}
		\begin{bmatrix}
			\beta_1\\ \beta_2\\ \beta_3\\
		\end{bmatrix}
$$

How do we mathematically solve for $\boldsymbol{\beta}$?

$$
	\begin{align*}
		\mathbf{y} &= \mathbf{X}\boldsymbol{\beta}\\
		\mathbf{X}^{-1}\mathbf{y} &= \mathbf{X}^{-1}\mathbf{X}\boldsymbol{\beta}\\
		\mathbf{X}^{-1}\mathbf{y} &= \mathbf{I}\boldsymbol{\beta}\\
		\mathbf{X}^{-1}\mathbf{y} &= \boldsymbol{\beta}\\
	\end{align*}
$$
:::

## Solving systems of linear equation

::: {style="font-size: 0.9em"}
$$
\mathbf{y} \,\,\,\,\,\,\,\,\,\,\qquad \mathbf{X} \,\,\,\,\,\,\,\,\,\,\,\qquad \boldsymbol{\beta} 
$$
$$
		\begin{bmatrix}
			1\\ 0\\ 1\\
		\end{bmatrix}=
		\begin{bmatrix}
			3 & 5 & -4\\
			1 & -2 & 3\\
			4 & 6 & 5 \\
		\end{bmatrix}
		\begin{bmatrix}
			\beta_1\\ \beta_2\\ \beta_3\\
		\end{bmatrix}
$$

How do we solve for $\boldsymbol{\beta}$ in R?

```{r}
X <- matrix(c(3, 1, 4, 5, -2, 6, -4, 3, 5), nrow = 3, ncol = 3)
y <- c(1, 0, 1)

(beta <- solve(X, y))
```
:::



## A few words about the prior

### Conjugate priors

These types of priors are convenient to use because 

- They are computationally faster to use
- They can be interepreted as additional data

#### Why are they useful?

There is no need to write the likelihood down when using them. All that needs to be done is to sample them to obtain a parameter estimation.

## A few words about the prior

### Conjugate priors

#### What does it mean to be of the same *functional form*?

It means that both distribution have th same mathematical structure. 

:::: {.columns}
::: {.column width="50%"}
**Binomial distribution**
$$\theta^a(1-\theta)^b$$
:::
::: {.column width="50%"}
**Beta distribution**
$$\theta^{\alpha-1}(1-\theta)^{\beta-1}$$
:::
::::

<https://en.wikipedia.org/wiki/Conjugate_prior>





## Move this in another place 
Technically, we can sample all $\boldsymbol{\beta}_{f[l]}$ independently, however, using multivariate Gaussian distribution, we can sample the $\boldsymbol{\beta}_{f}$ for all levels of the factor in one go as

$$\boldsymbol{\beta}_{f} \sim \mathcal{MVN}(\boldsymbol{\mu}_{f}, \mathbf{D}_f)$$
where 

- $\boldsymbol{\mu}_{f}$ is a vector of $k$ means, one for each level of the factor
- $\mathbf{D}_f$ is a $k\times k$ diagonal matrix with variance term on the diagonal

## Hierarchy on the intercept's mean

::: {style="font-size: 0.7em"}
The structure of matrix $\mathbf{D}_f$ can be considered in two different ways in 

$$\boldsymbol{\beta}_{f} \sim \mathcal{MVN}(\boldsymbol{\mu}_{f}, \mathbf{D}_f)$$

Written in the general form as we did in the equation above, we assume that all variance on the diagonal are potentially different. Or in other words, the variance in each group is assumed to be different
::: 
::: {style="font-size: 0.6em"}
$$\mathbf{D}_f = \begin{bmatrix}
				\sigma^2_{f[1]} & 0 & \dots & 0 & \dots & 0\\
				0 & \sigma^2_{f[2]} & \dots & 0 & \dots & 0\\
				\vdots & \vdots & \ddots & \vdots & & \vdots\\
			  0 & 0 & \dots & \sigma^2_{f[l]} & \dots & 0\\
		    \vdots & \vdots & & \vdots & \ddots & \vdots\\
		    0 & 0 & \dots & 0 & \dots & \sigma^2_{f[k]}\\
		\end{bmatrix}$$
:::

## Hierarchy on the intercept's mean

::: {style="font-size: 0.7em"}
However, it can be assumed to be all the same variance regardless of the group considered 

::: {style="font-size: 0.68em"}
$$\mathbf{D}_f = \begin{bmatrix}
				\sigma^2_{f} & 0 & \dots & 0 & \dots & 0\\
				0 & \sigma^2_{f} & \dots & 0 & \dots & 0\\
				\vdots & \vdots & \ddots & \vdots & & \vdots\\
			  0 & 0 & \dots & \sigma^2_{f} & \dots & 0\\
		    \vdots & \vdots & & \vdots & \ddots & \vdots\\
		    0 & 0 & \dots & 0 & \dots & \sigma^2_{f}\\
		\end{bmatrix}$$
:::

In this case, $\boldsymbol{\beta}_{f} \sim \mathcal{MVN}(\boldsymbol{\mu}_{f}, \mathbf{D}_f)$
can be rewritten as 
$$\boldsymbol{\beta}_{f} \sim \mathcal{MVN}(\boldsymbol{\mu}_{f}, \sigma^2_{f}\mathbf{I})$$
**Note**: This is essentially the same thing as a one-way analysis of variance.

:::



## A (very !) general formulation

::: {style="font-size: 0.68em"}
As discuss yesterday, a linear model can be writen as

$$(\mathbf{y}|\mathbf{X}, \boldsymbol{\beta}, \sigma_\mathbf{y}^2)\sim \mathcal{MVN}(\mathbf{X} \boldsymbol{\beta}, \sigma\mathbf{y}^2\mathbf{I})$$

where

- $\mathbf{y}$ is a vector quantifying a response variable of length $n$
- $\mathbf{X}$ is a matrix of explanatory variables with $n$ rows (samples) and $p$ columns (explanatory varaibles) 
- $\boldsymbol{\beta}$ is a vector $p$ pararameters weighting the importance of each explanatory variables in $\mathbf{X}$
- $\sigma_\mathbf{y}^2$ is a measure of variance of the error in the regression model
- $\mathbf{I}$ is an $n \times n$ identity matrix 
:::

## A (very !) general formulation

::: {style="font-size: 0.8em"}
A hierarchical model is a generalization of the linear model such that 

$$(\mathbf{y}|\mathbf{X},\mathbf{Z}, \boldsymbol{\beta}, \mathbf{b}, \sigma_\mathbf{y}^2)\sim \mathcal{MVN}(\mathbf{X} \boldsymbol{\beta} + \mathbf{Z}\mathbf{b}, \sigma_\mathbf{y}^2\mathbf{I})$$
:::
::: {style="font-size: 0.68em"}

where

- $\mathbf{y}$ is a vector quantifying a response variable of length $n$
- $\mathbf{X}$ is a matrix of explanatory variables with $n$ rows (samples) and $p$ columns (explanatory variables) 
- $\boldsymbol{\beta}$ is a vector $p$ pararameters weighting the importance of each explanatory variables in $\mathbf{X}$
- $\sigma_\mathbf{y}^2$ is a measure of variance of the error in the regression model
- $\mathbf{I}$ is an $n \times n$ identity matrix 

:::: {style="color: blue"}
- $\mathbf{Z}$ is another matrix of explanatory variables with $n$ rows (samples) and $q$ columns (explanatory variables) 
- $\mathbf{b}$ is a vector $q$ pararameters weighting the importance of each explanatory variables in $\mathbf{Z}$
::::
:::

## A (very !) general formulation

::: {style="font-size: 0.8em"}
A hierarchical model is a generalization of the linear model such that 

$$(\mathbf{y}|\mathbf{b} )\sim \mathcal{MVN}(\mathbf{X} \boldsymbol{\beta} + \mathbf{Z}\mathbf{b}, \sigma^2\mathbf{I})$$
What is also noticeable in this model is the conditional relationship between $\mathbf{y}$ and $\mathbf{b}$.

Specifically, in this formulation, 

$$\mathbf{b}\sim \mathcal{MVN}(\mathbf{0}, \mathbf{\Sigma})$$
where $\mathbf{\Sigma}$ is a covariance matrix.

Based on this  general formulation, we can now define all unconstrained hierarchical models.
:::



## Markov Chain Monte Carlo (MCMC)

:::{style="font-size: 0.75em;"}
For simplicity, let's assume that we are monitoring the behaviour of the mallard every minutes and that we are recording whether it is

#### On land 

![](https://ichef.bbci.co.uk/news/976/cpsprodpb/33B5/production/_127273231_comedy5.jpg){fig-align="center" width=30%}

#### In the water

![](https://img.bbg.org/large/41847802500.jpg){fig-align="center" width=20%}
:::



## Markov Chain Monte Carlo (MCMC)

Using this information, we can draw diagram defining how the behaviour of the mallard changes at every time steps

. . .

![](../img/DAG.png){fig-align="center" width=70%}

## *Markov Chain* Monte Carlo (MCMC)

:::{style="font-size: 0.75em;"}
In a markov chain, we assume that we know how probable it is to go from one behaviour (land) to another (water)
:::

. . .

![](../img/DAG_Markov_chain.png){fig-align="center" width=70%}

## Markov Chain *Monte Carlo* (MCMC)

:::{style="font-size: 0.75em;"}
In an MCMC, we assume that the likeliness of passing from one behaviour (land) to another (water) depends on a statistical distribution. 
:::

. . .

![](../img/DAG_Markov_chain_monte_Carlo.png){fig-align="center" width=70%}


## Addition and Substraction

$$\mathbf{C} = \mathbf{A}\pm \mathbf{B}$$
$$C_{ij} = A_{ij} \pm B_{ij}$$

::: {style="color: blue;"}
$$\begin{bmatrix}
				3 & 5\\
				1 & -2\\
			\end{bmatrix} + 
			\begin{bmatrix}
				2 & 1\\
				4 & -2\\
			\end{bmatrix} = 
			\begin{bmatrix}
				3+2 & 5+1\\
				1+4 & -2-2\\
			\end{bmatrix} = 
			\begin{bmatrix}
				5 & 6\\
				5 & -4\\
			\end{bmatrix}$$
:::

In R

```{r}
A <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)
B <- matrix(c(2, 4, 1, -2), nrow = 2, ncol = 2)
A + B
```



## Triangular matrix

:::: {.columns}
::: {.column width="50%"}
#### Lower triangular matrix
$$\begin{bmatrix}
        -10 & 0 & 0 & 0\\
        3 & 0 & 0 & 0\\
        0 & 4 & 3 & 0\\
        9 & -5 & 4 & 3\\
\end{bmatrix}$$
:::
::: {.column width="50%"}
#### Upper triangular matrix
$$\begin{bmatrix}
        -10 & 0 & -5 & 0\\
        0 & 0 & 5 & 6\\
        0 & 0 & 3 & 3\\
        0 & 0 & 0 & 3\\
      \end{bmatrix}$$
:::
::::

## Symmetric matrix

The values on the  above and below the diagonal are match so that $A = A^t$

::: {style="color: blue;"}
$$
\begin{bmatrix}
				3 & 4 & -10\\
				4 & 5 & 7\\
				-10 & 7 & -6\\
		\end{bmatrix}
$$
:::

## Matrix inversion

::: { style="font-size: 0.8em"}
In matrix algebra, we cannot divide a matrix by another matrix, but we can multiple it by its inverse, which gets us to the same place. Classically, the inverse of matrix $\mathbf{A}$ is defined as $\mathbf{A}^{-1}$

As such,
$$\mathbf{A}\cdot \mathbf{A}^{-1} = \mathbf{I}$$ 
:::

. . .

::: { style="font-size: 0.8em"}
In R
:::


```{r}
A <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)
(Ainv <- solve(A))
A %*% Ainv
```

## Matrix inversion
### Inverting a diagonal matrix

$$D^{-1}=
      \begin{bmatrix}
        1/d_1 & 0 & \dots & 0\\
        0 &  1/d_2 & \dots & 0\\
        \vdots & \vdots & \ddots & \vdots\\
        0 & 0 & \dots &  1/d_n\\
\end{bmatrix}$$


## Estimating regression parameters

. . . 

Many techniques have been proposed to estimate the parameters of a regression model.

. . . 

The goal of this course is not to study these techniques but we will learn how to play with the estimated parameters because it will be very useful as we move along.

. . . 

The most common way to build a regression model is 

```{r, echo = FALSE}
b.exemplaris <- y_obs
humidity <- x
```

```{r}
reg <- lm(b.exemplaris ~ humidity)
```

. . . 

Say we now want to build a model's confidence interval from a linear regression

. . . 

**How would you do it ?**

. . . 

Let's look at the model's results, maybe it will help us

## Estimating regression parameters

### Model's results

::: {style="font-size: 0.75em"}

```{r}
(summaryReg <- summary(reg))
```
::: 

. . .

::: {style="font-size: 0.75em"}
Let's say we want to construst the model's confidence intervals by sampling multiple times (say 100 times!) the regression parameters, which we will assume follow Gaussian distribution. **How would you do this?**
::: 

## Estimating regression parameters

### Sampling model parameters

We could sample the model parameters but how can we do this properly?

. . .

**Any suggestions?**

![](https://www.i2symbol.com/pictures/emojis/c/6/0/e/c60e666a9af7bcd1a7b887437b3520c3_384.png){fig-align="center" width=40%}

## Estimating regression parameters

### Sampling model parameters

If we look at the estimated regression model coefficient, we can learn a few things

. . .

```{r}
summaryReg$coefficients
```

. . .

Notably, there are uncertainty around the parameters.

. . .

Maybe we can use this information to sample model parameters and reconstruct models across different iterations of parameters.

. . . 

Let's give it a shot !

## Estimating regression parameters

### Sampling model parameters

If we assume that the parameters of our particular model follow a Gaussian distribution, we can state that  

. . .

$$\beta_0 \sim \mathcal{N}(2.574, 0.047^2)$$
$$\beta_1 \sim \mathcal{N}(1.101, 0.080^2)$$

## Estimating regression parameters

### Sampling model parameters

In R, we can do this as follow

```{r}
# Object that include regression coefficients
regCoef <- summaryReg$coefficients

# Sample regression parameters
beta_0 <- rnorm(100, mean = regCoef[1,1], sd = regCoef[1,2])
beta_1 <- rnorm(100, mean = regCoef[2,1], sd = regCoef[2,2])
```

## Estimating regression parameters

### Sampling model parameters

```{r, echo = FALSE, fig.width=8,  fig.height=8, fig.align='center'}
par(mar = c(6,7,0.1,0.1))
plot(x, y_obs,
     pch = 19,
     col="blue", 
     las=1,
     cex.axis=2.3,
     bty="L",
     xaxs="i",
     xlab = "",
     ylab = "",
     cex = 2)

mtext("Humidity", side = 1, line = 4.5, cex = 3.5)
mtext("Biomass", side = 2, line = 4.5, cex = 3.5)

orange <- col2rgb("orange")

for(i in 1:length(beta_0)){
abline(a = beta_0[i],
       b = beta_1[i],
       lwd = 2,
       col = rgb(orange[1,1]/256, orange[2,1]/256, orange[3,1]/256, alpha = 0.5))
}
```

## Estimating regression parameters

### Sampling model parameters

But is this the right way to do it ?

![](https://www.i2symbol.com/pictures/emojis/e/e/7/b/ee7b4fb9880ef3c8ee19626cdc14bf5c_384.png){fig-align="center" width=20%}


## Estimating regression parameters

### Sampling model parameters

Actually, even if the model's confidence interval look about right, they are wrong ! 

![](https://www.i2symbol.com/pictures/emojis/8/b/f/8/8bf88079d65d540a26a1f181cf6ba060_384.png){fig-align="center" width=20%}

## Estimating regression parameters

### Sampling model parameters

The approach presented in the previous slide works only if we assume that the parameters are completely independent from one another.

. . . 

A situation that happens only in very specific circumstances.

. . .

So... We need to find a way to account for the non-independencies between the parameters. 

. . .

How can we do this ? Any ideas ?


## Estimating regression parameters

### Sampling model parameters

::: {style="font-size: 0.75em"}
Assuming the regression parameters are normally distributed is not a bad assumption. 
:::

. . .

::: {style="font-size: 0.75em"}
However to consider a dependencies between the parameters we need to sample them from a **multivariate** normal distribution where the variance of each parameter and their dependency is defined by a covariance matrix estimated specifically for the data we model.
:::

. . .

::: {style="font-size: 0.75em"}
The good news is that this covariance matrix is given by `summary.lm` function
:::

. . .

::: {style="font-size: 1.2em"}
```{r}
(covReg <- summaryReg$cov.unscaled)
```
:::
## Estimating regression parameters

### Sampling model parameters

For our specific model, mathematically, we assume that  

. . .

$$\begin{bmatrix}
  \beta_0\\
  \beta_1\\
\end{bmatrix} \sim \mathcal{MVN} \left( \begin{bmatrix}
  2.574\\
  1.101\\
\end{bmatrix}, \begin{bmatrix}
  0.0100 & -0.0005 \\
  -0.0005 & 0.0286 \\
\end{bmatrix} \right)$$

. . .

**Note** To present the multivariate normal distribution, we rely on matrix notation. This is our first introduction into matrix algebra. We will talk about this more into this course. 


## Estimating regression parameters

### Sampling model parameters

In R, we can sample the parameters using a multivariate normal distribution using the following code

```{r}
# Object that include regression coefficients
regCoef <- summaryReg$coefficients

# Sample regression parameters
beta <- MASS::mvrnorm(100, regCoef[,1], Sigma = covReg)
```

## Estimating regression parameters

### Sampling model parameters

```{r, echo = FALSE, fig.width=8,  fig.height=8, fig.align='center'}
par(mar = c(6,7,0.1,0.1))
plot(x, y_obs,
     pch = 19,
     col="blue", 
     las=1,
     cex.axis=2.3,
     bty="L",
     xaxs="i",
     xlab = "",
     ylab = "",
     cex = 2)

mtext("Humidity", side = 1, line = 4.5, cex = 3.5)
mtext("Biomass", side = 2, line = 4.5, cex = 3.5)

orange <- col2rgb("orange")

for(i in 1:length(beta_0)){
  abline(a = beta[i,1],
       b = beta[i,2],
       lwd = 2,
       col = rgb(orange[1,1]/256, orange[2,1]/256, orange[3,1]/256, alpha = 0.5))
}
```

## Estimating regression parameters

### Sampling model parameters - Comparison

```{r, echo = FALSE, fig.width=16,  fig.height=8, fig.align='center'}
par(mfrow = c(1,2), mar = c(6,7,3,0.1))

plot(x, y_obs,
     pch = 19,
     col="red", 
     las=1,
     cex.axis=2.3,
     bty="L",
     xaxs="i",
     xlab = "",
     ylab = "",
     cex = 2, 
     main = "Wrong way",
     cex.main = 3.5)

mtext("Humidity", side = 1, line = 4.5, cex = 3.5)
mtext("Biomass", side = 2, line = 4.5, cex = 3.5)

for(i in 1:length(beta_0)){
abline(a = beta_0[i],
       b = beta_1[i],
       lwd = 2,
       col = rgb(1, 0, 0, alpha = 0.5))
}

plot(x, y_obs,
     pch = 19,
     col="blue", 
     las=1,
     cex.axis=2.3,
     bty="L",
     xaxs="i",
     xlab = "",
     ylab = "",
     cex = 2, 
     main = "Proper way",
     cex.main = 3.5)

mtext("Humidity", side = 1, line = 4.5, cex = 3.5)

orange <- col2rgb("orange")

for(i in 1:length(beta_0)){
  abline(a = beta[i,1],
       b = beta[i,2],
       lwd = 2,
       col = rgb(orange[1,1]/256, orange[2,1]/256, orange[3,1]/256, alpha = 0.5))
}
```

