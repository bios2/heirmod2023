---
title: "Complex hierarchical models"
title-slide-attributes: 
  data-background-image: ../img/bg.jpg
  data-background-size: full
author: "Guillaume Blanchet -- Andrew MacDonald -- Vincent Tolon"
date: "2023-05-10"
execute:
  echo: true
format: 
  revealjs:
    theme: [default]
    logo: ../img/UdeS_logo_h_rgbHR.png
    transition: slide
    background-transition: fade
---

## "Complex" hierarchical model

By "complex" we refer to hierarchical models for which more than one parameters are accounted for in a parameter hierarchy. 

As we will see, there are a number of ways this can complexify the structure of a model in ways that are not always obvious.

![](https://www.i2symbol.com/pictures/emojis/b/e/f/7/bef79dd05db0e97d4124fa885f2c0522_384.png){fig-align="center" width=20%}

# "Complex" hierarchy on the intercept

## Interacting hierarchies

::: {style="font-size: 0.7em"}
`lme4` notation : `y ~ (1 | f:g)`

This model assumes that factors `f` and `g` interact to make a hierarchy.

Mathematically, it can be translated to 

$$\mathbf{y} \sim \mathcal{MVN}(\mathbf{b}_{f[l_f]\times g[l_g] },\sigma^2\mathbf{I}) \quad\forall\quad l_f = 1\dots k_f\,\,\,\,\text{and}\,\,\,l_g = 1\dots k_g$$
or 

$$y_i = b_{f[l_f]\times g[l_g]} + \varepsilon \quad\forall\quad l_f = 1\dots k_f\,\,\,\,,\,\,\,l_g = 1\dots k_g\,\,\,\,\text{and}\,\,\,i = 1\dots n$$
In words, a multi-factor hierarchy can be constructed my multiplying the levels of individual factors to account for a more complexe hierarchy. Another way to think about this structure is to construct a complexe hierarchy using multiple simpler hierarchies. 

This is because in this model

$$\mathbf{b} \sim \mathcal{N}\left(0, \sigma^2_{f\times g}\right)$$
:::

## Interacting hierarchies

```{r, echo=FALSE, fig.width=8,  fig.height=8, fig.align='center'}
zones=matrix(c(1,2), ncol=2, byrow=TRUE)
layout(zones, widths=c(1/5,4/5), heights=c(1/5,4/5))

val <- seq(-1, 3, length = 200)
marginal <- dnorm(val, mean = 1, sd = 0.5)

par(mar = c(0.1, 0.1, 0.1, 0.1))
plot(-marginal,val,
     type = "n",
     ylim = c(-3,3),
     axes = FALSE,
     xlab = "",
     ylab = "") 

polygon(x = c(-marginal,-marginal[1]),
        y = c(val, val[1]),
        col = rgb(170/255, 103/255, 57/255, 0.5),
        border = NA)

lines(-marginal,val, lwd = 3)

plot(0,0,
     type = "n",
     xlim = c(0,5),
     ylim = c(-3,3),
     bty="L",
     xaxt = "n",
     yaxt = "n",
     xlab = "",
     ylab = "",) 

set.seed(40)
abline(h = rnorm(30, mean = 1, sd = 0.5),
       lwd = 3,
       col = rgb(170/255, 103/255, 57/255))

legend("topright",
       legend = c("f", "g"),
       fill = c("blue", "orange"),
       cex = 2.5)
```

## Multiple independent hierarchy

::: {style="font-size: 0.65em"}
`lme4` notation : `y ~ (1 | f) + (1 | g)` or `y ~ 1 + (1 | f) + (1 | g)`

This model assumes there is a hierarchy that varies among two factors that are independent from one another.

Mathematically, it can be translated to 

$$\mathbf{y} \sim \mathcal{MVN}(\mathbf{b}_{f[l_f]} + \mathbf{b}_{g[l_g]},\sigma^2\mathbf{I}) \quad\forall\quad l_f = 1\dots k_f\,\,\,\,\text{and}\,\,\,l_g = 1\dots k_g$$
or 

$$y_i = b_{f_i[l_f]} + b_{g_i[l_g]} + \varepsilon \quad\forall\quad l_f = 1\dots k_f\,\,\,\,,\,\,\,l_g = 1\dots k_g\,\,\,\,\text{and}\,\,\,i = 1\dots n$$
In words, this means that we are dealing with a model that has two intercepts, which are sampled independently so that the $b$s will change for a sample $i$ only when the interaction the level $l_f$ of the factor $f$ and the  level $l_g$ of the factor $g$ changes independently. 

This is because in this model

$$\mathbf{b} \sim \mathcal{N}\left(0, 
                                \begin{bmatrix}
                                  \sigma^2_f & 0\\
                                  0& \sigma^2_g\\
                                \end{bmatrix}
                                \right)$$
:::

## Multiple independent hierarchy

```{r, echo=FALSE, fig.width=8,  fig.height=8, fig.align='center'}
zones=matrix(c(1,2), ncol=2, byrow=TRUE)
layout(zones, widths=c(1/5,4/5), heights=c(1/5,4/5))

val1 <- seq(-1, 3, length = 200)
marginal1 <- dnorm(val1, mean = 1, sd = 0.5)

val2 <- seq(-2, 0, length = 200)
marginal2 <- dnorm(val2, mean = -1, sd = 0.2)

par(mar = c(0.1, 0.1, 0.1, 0.1))
plot(-marginal2,val2,
     type = "n",
     ylim = c(-3,3),
     axes = FALSE,
     xlab = "",
     ylab = "") 

polygon(x = c(-marginal1,-marginal1[1]),
        y = c(val1, val1[1]),
        col = rgb(0, 0, 1, 0.5),
        border = NA)

polygon(x = c(-marginal2,-marginal2[1]),
        y = c(val2, val2[1]),
        col = rgb(255/255, 165/255, 0, 0.5),
        border = NA)

lines(-marginal1,val1, lwd = 3)
lines(-marginal2,val2, lwd = 3)

plot(0,0,
     type = "n",
     xlim = c(0,5),
     ylim = c(-3,3),
     bty="L",
     xaxt = "n",
     yaxt = "n",
     xlab = "",
     ylab = "",) 

set.seed(42)
abline(h = rnorm(15, mean = 1, sd = 0.5),
       lwd = 3,
       col = "blue")

abline(h = rnorm(15, mean = -1, sd = 0.2),
       lwd = 3,
       col = "orange")

legend("topright",
       legend = c("f", "g"),
       fill = c("blue", "orange"),
       cex = 2.5)
```

## Hierarchies within hierarchies

::: {style="font-size: 0.65em"}
`lme4` notation : `y ~ (1 | f/g)` or `y ~ (1 | f) + (1 | f:g)`

This model assumes there is a hierarchy that varies among the levels of factor `f` and among the levels of factor `g` but only within the levels of factor `f`.

Mathematically, it can be translated to 

$$\mathbf{y} \sim \mathcal{MVN}(\mathbf{b}_{f[l_f]}+\mathbf{b}_{g[l_g]\in f[l_f]},\sigma^2\mathbf{I}) \quad\forall\quad l_f = 1\dots k_f\,\,\,\,\text{and}\,\,\,l_g = 1\dots k_g$$
or 

$$y_i = b_{f[l_f]}+b_{g[l_g]\in f[l_f]} + \varepsilon \quad\forall\quad l_f = 1\dots k_f\,\,\,\,,\,\,\,l_g = 1\dots k_g\,\,\,\,\text{and}\,\,\,i = 1\dots n$$
In words, the model has two independent hierarchy, one changes for a sample $i$ as a single intercept hierarchy and the other will change for a sample $i$ only when the level $l_g$ of factor $g$ is **within** the level $l_f$ of the factor $f$ changes. 

This is because in this model

$$\mathbf{b} \sim \mathcal{N}\left(0, 
                                \begin{bmatrix}
                                  \sigma^2_f & 0\\
                                  0& \sigma^2_{f\in g}\\
                                \end{bmatrix}
                                \right)$$
:::

## Hierarchies within hierarchies

```{r, echo=FALSE, fig.width=8,  fig.height=8, fig.align='center'}
zones=matrix(c(1,2), ncol=2, byrow=TRUE)
layout(zones, widths=c(1/5,4/5), heights=c(1/5,4/5))

val <- seq(-1, 3, length = 200)
marginal <- dnorm(val, mean = 1, sd = 0.5)

valIn <- seq(0, 1.8, length = 200)
marginalIn <- dnorm(val, mean = 0.8, sd = 0.4)

par(mar = c(0.1, 0.1, 0.1, 0.1))
plot(-marginalIn,valIn,
     type = "n",
     ylim = c(-3,3),
     axes = FALSE,
     xlab = "",
     ylab = "") 

polygon(x = c(-marginal,-marginal[1]),
        y = c(val, val[1]),
        col = rgb(0, 0, 1, 0.5),
        border = NA)

polygon(x = c(-marginalIn,-marginalIn[1]),
        y = c(valIn, valIn[1]),
        col = rgb(255/255, 165/255, 0, 0.5),
        border = NA)

lines(-marginal,val, lwd = 3)
lines(-marginalIn,valIn, lwd = 3)

plot(0,0,
     type = "n",
     xlim = c(0,5),
     ylim = c(-3,3),
     bty="L",
     xaxt = "n",
     yaxt = "n",
     xlab = "",
     ylab = "",) 

set.seed(41)
abline(h = rnorm(15, mean = 1, sd = 0.5),
       lwd = 3,
       col = "blue")

abline(h = rnorm(15, mean = 0.8, sd = 0.3),
       lwd = 3,
       col = rgb(170/255, 103/255, 57/255))

legend("topright",
       legend = c("f", "g"),
       fill = c("blue", "orange"),
       cex = 2.5)
```

## Variations on multiple independent hierarchy {style="font-size: 0.8em"}

::: {style="font-size: 1.1em"}
The two models discussed previously have a few interesting properties: 

- They are mathematically equivalent. They present a similar mathematical structure but can be used to answer slightly different biological questions.
- If a particular levels is associated to the same samples for the two factors, usually this create technical problems and the model cannot be estimated properly (this is true regardless of how you estimate these parameter).
- They can be generalized to as many factors as we want. 
- Models with a hierarchy within a hierarchy, the second level needs to be inbeded within the first hierarchy. 
:::

## Correlated intercept and slope hierarchy  {style="font-size: 0.9em"}

::: {style="font-size: 0.9em"}
`lme4` notation : `y ~ x + (x | g)` or `y ~ 1 + x + (1 + x | g)`

This model assumes the hierarchy between the intercept and the slope is correlated.

Mathematically, it can be translated to 

$$\mathbf{y} \sim \mathcal{MVN}(\mathbf{b}_{0f[l_f]} +\mathbf{Z}\mathbf{b}_{1f[l_f]},\sigma^2\mathbf{I}) \quad\forall\quad l_f = 1\dots k_f$$
or 

$$y_i = b_{0f_i[l_f]} + zb_{1f_i[l_f]} + \varepsilon \quad\forall\quad l_f = 1\dots k_f\,\,\,\,\text{and}\,\,\,i = 1\dots n$$
In this model

$$\begin{bmatrix}
    b_0\\
    b_1\\
\end{bmatrix}
\sim \mathcal{N}\left(0, 
                      \begin{bmatrix}
                        \sigma^2_{b_0} & \rho_{b_0,b_1}\sigma_{b_0}\sigma_{b_1} \\ 
                        \rho_{b_0,b_1}\sigma_{b_0}\sigma_{b_1} & \sigma^2_{b_1}
                      \end{bmatrix}
                \right)$$
:::


## Correlated intercept and slope hierarchy  {style="font-size: 0.9em"}

::: {style="font-size: 2.5em; color: red;"}
ICI
:::


## second

::: r-fit-text
Test your model
:::

## 

img:

![](img/bg.jpg)

it is a landscape

##  {auto-animate="true"}


$$\mathbf{b} \sim \mathcal{N}\left(0, 
                                \begin{bmatrix}
                                  \sigma^2_f & \sigma_f\sigma_g\\
                                  \sigma_f\sigma_g& \sigma^2_g\\
                                \end{bmatrix}
                                \right)$$


::: {style="margin-top: 100px;"}
check with simulations
:::

##  {auto-animate="true"}

::: {style="margin-top: 200px; font-size: 2.5em; color: red;"}
check with simulations
:::

## choose parameters {auto-animate="TRUE"}

``` r
yintercept <- 4
slope <- 1.3
obs_error <- .5
```

## make up an X variable {auto-animate="TRUE"}

``` r
yintercept <- 4
slope <- 1.3
obs_error <- .5
x <- runif(200, min = -1, max = 1)
```

## calculate the average {auto-animate="TRUE"}

``` r
yintercept <- 4
slope <- 1.3
obs_error <- .5
x <- runif(200, min = -1, max = 1)
y_mean <- yintercept + slope * x
```

## simulate some observations {auto-animate="TRUE"}

```{r}
yintercept <- 4
slope <- 1.3
obs_error <- .5
x <- runif(200, min = -1, max = 1)
y_mean <- yintercept + slope * x
y_obs <- rnorm(200, mean = y_mean, sd = obs_error)
```

## finally, visualize

```{r}
plot(y_obs ~ x)
```

## here it is all on one slide

```{r}
#| output-location: column
yintercept <- 4
slope <- 1.3
obs_error <- .5
x <- runif(200, min = -1, max = 1)
y_mean <- yintercept + slope * x
y_obs <- rnorm(200, mean = y_mean, sd = obs_error)
plot(y_obs, x)
```

## Or we can present the code and results separately

::: panel-tabset
### The code

```{r}
yintercept <- 4
slope <- 1.3
obs_error <- .5
x <- runif(200, min = -1, max = 1)
y_mean <- yintercept + slope * x
y_obs <- rnorm(200, mean = y_mean, sd = obs_error)
```

### The figure

```{r}
plot(y_obs ~ x)
```
:::

## another equation

$$
2 + 4 = 6
$$

## The equation

$$
\begin{align}
y  &\sim \text{N}(\mu, \sigma_{obs}) \\
\mu &= a + bx \\
\end{align}
$$

## The model {auto-animate="TRUE"}

``` stan
data {
  int<lower=0> N;
  vector[N] y;
}
parameters {
  real mu;
  real<lower=0> sigma;
}
model {
  y ~ normal(mu, sigma);
  mu ~ normal(0, 1);
  sigma ~ exponential(1);
}
```

## Declare the data {auto-animate="TRUE"}

``` {.stan code-line-numbers="1-4"}
data {
  int<lower=0> N;
  vector[N] y;
}
parameters {
  real mu;
  real<lower=0> sigma;
}
model {
  y ~ normal(mu, sigma);
  mu ~ normal(0, 1);
  sigma ~ exponential(1);
}
```

## State parameters {auto-animate="TRUE"}

``` {.stan code-line-numbers="5-8"}
data {
  int<lower=0> N;
  vector[N] y;
}
parameters {
  real mu;
  real<lower=0> sigma;
}
model {
  y ~ normal(mu, sigma);
  mu ~ normal(0, 1);
  sigma ~ exponential(1);
}
```

## Write the likelihood and priors {auto-animate="TRUE"}

``` {.stan code-line-numbers="9-13"}
data {
  int<lower=0> N;
  vector[N] y;
}
parameters {
  real mu;
  real<lower=0> sigma;
}
model {
  y ~ normal(mu, sigma);
  mu ~ normal(0, 1);
  sigma ~ exponential(1);
}
```
