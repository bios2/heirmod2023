{
  "hash": "36da06212877055ce3aa077beba5dfd7",
  "result": {
    "markdown": "---\ntitle: \"Complex hierarchical models\"\ntitle-slide-attributes: \n  data-background-image: ../img/bg.jpg\n  data-background-size: full\nauthor: \"Guillaume Blanchet -- Andrew MacDonald -- Vincent Tolon\"\ndate: \"2023-05-10\"\nexecute:\n  echo: true\nformat: \n  revealjs:\n    theme: [default]\n    logo: ../img/UdeS_logo_h_rgbHR.png\n    transition: slide\n    background-transition: fade\n---\n\n\n## \"Complex\" hierarchical model\n\nBy \"complex\" we refer to hierarchical models for which more than one parameters are accounted for in a parameter hierarchy. \n\n. . .\n\nAs we will see, there are a number of ways this can complexify the structure of a model in ways that are not always obvious.\n\n![](https://www.i2symbol.com/pictures/emojis/b/e/f/7/bef79dd05db0e97d4124fa885f2c0522_384.png){fig-align=\"center\" width=20%}\n\n# \"Complex\" hierarchy on the intercept\n\n## Interacting hierarchies\n\n::: {style=\"font-size: 0.7em\"}\n`lme4` notation : `y ~ (1 | f:g)`\n\nThis model assumes that factors `f` and `g` interact to make a hierarchy.\n\nMathematically, it can be translated to \n\n$$\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f\\times g },\\sigma^2\\mathbf{I})$$\nor \n\n$$y_i = b_{f[i]\\times g[i]} + \\varepsilon \\quad\\forall\\quad i = 1\\dots n$$\n\nwhere\n$$\\mathbf{b} \\sim \\mathcal{N}\\left(0, \\sigma^2_{f\\times g}\\right)$$\n\nNote that a multi-factor hierarchy can be constructed my multiplying the levels of each factor to account for a more complexe hierarchy. \n:::\n\n## Interacting hierarchies\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n## Multiple independent hierarchy\n\n::: {style=\"font-size: 0.65em\"}\n`lme4` notation : `y ~ (1 | f) + (1 | g)` or `y ~ 1 + (1 | f) + (1 | g)`\n\nThis model assumes there is a hierarchy that varies among two factors that are independent from one another.\n\nMathematically, it can be translated to \n\n$$\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f} + \\mathbf{b}_{g},\\sigma^2\\mathbf{I})$$\nor \n\n$$y_i = b_{f[i]} + b_{g[i]} + \\varepsilon \\quad\\forall\\quad i = 1\\dots n$$\nwhere\n\n$$\\mathbf{b} \\sim \\mathcal{N}\\left(0, \n                                \\begin{bmatrix}\n                                  \\sigma^2_f & 0\\\\\n                                  0& \\sigma^2_g\\\\\n                                \\end{bmatrix}\n                                \\right)$$\n\nHere, we are dealing with a model that has two intercepts, which are sampled independently so that the $b$s will change for a sample $i$ only when the the level of factor $f$ and the level of factor $g$ changes independently. \n\n:::\n\n## Multiple independent hierarchy\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n## Hierarchies within hierarchies\n\n::: {style=\"font-size: 0.65em\"}\n`lme4` notation : `y ~ (1 | f/g)` or `y ~ (1 | f) + (1 | f:g)`\n\nThis model assumes there is a hierarchy that varies among the levels of factor `f` and among the levels of factor `g` but only within the levels of factor `f`.\n\nMathematically, it can be translated to \n\n$$\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f}+\\mathbf{b}_{g\\in f},\\sigma^2\\mathbf{I})$$\nor \n\n$$y_i = b_{f[i]}+b_{g[i]\\in f[i]} + \\varepsilon \\quad i = 1\\dots n$$\nwhere\n\n$$\\mathbf{b} \\sim \\mathcal{N}\\left(0, \n                                \\begin{bmatrix}\n                                  \\sigma^2_f & 0\\\\\n                                  0& \\sigma^2_{f\\in g}\\\\\n                                \\end{bmatrix}\n                                \\right)$$\n\nHere, the model has two independent hierarchy, one changes for a sample $i$ as a single intercept hierarchy and the other will change for a sample $i$ only when the level of factor $g$ is **within** the level of factor $f$. \n\n:::\n\n## Hierarchies within hierarchies\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n## Variations on multiple independent hierarchy {style=\"font-size: 0.8em\"}\n\n::: {style=\"font-size: 1.1em\"}\nThe two models discussed previously have a few interesting properties: \n\n- They are very similar mathematically. \n- Although they present a similar mathematical structure, they answer different biological questions.\n- If a particular level is associated to the same samples for the two factors, usually this create technical problems and the model cannot be estimated properly (this is true regardless of how you estimate these parameter).\n- They can be generalized to as many factors as we want. \n- In models with a hierarchy within a hierarchy, the second level needs to be inbeded within the first hierarchy. \n:::\n\n## Uncorrelated intercept and slope hierarchy  {style=\"font-size: 0.9em\"}\n\n::: {style=\"font-size: 0.65em\"}\n`lme4` notation : `y ~ x + (x || f)` or `y ~ 1 + x + (1 | f) + (0 + x | g)`\n\nThis model assumes there is a hierarchy that varies independently among the levels of factor `f` for the intercept and the slope.\n\nMathematically, it can be translated to \n\n$$\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{0f}+\\mathbf{Z}\\mathbf{b}_{0f},\\sigma^2\\mathbf{I})$$\nor \n\n$$y_i = b_{0f[i]}+zb_{1f[i]} + \\varepsilon \\quad\\forall\\quad i = 1\\dots n$$\nThis is because in this model\n\n$$\\begin{bmatrix}\n    b_0\\\\\n    b_1\\\\\n\\end{bmatrix} \\sim \\mathcal{N}\\left(0, \n                                \\begin{bmatrix}\n                                  \\sigma^2_{b_0f} & 0\\\\\n                                  0& \\sigma^2_{b_1f}\\\\\n                                \\end{bmatrix}\n                                \\right)$$\n:::\n\n## Uncorrelated intercept and slope hierarchy  {style=\"font-size: 0.9em\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## A small step back\n\n::: {style=\"font-size: 0.7em\"}\nThe structure of the hierarchy discussed so far were \"simple\" in the sense that they either required to estimate\n\n- A single variance parameter \n\n$$\\sigma^2_{f}$$\n\n- Multiple independent variance parameters\n\n$$\n\\begin{bmatrix}\n  \\sigma^2_f & 0\\\\\n  0& \\sigma^2_{g}\\\\\n\\end{bmatrix}\n$$\n\nIn Bayesian, having uncorrelated variance allows us to sample variance parameter independently even with mutiple factors, which is computationally more efficient.\n\nFrom this point on, we will look at more complex covariance structures where the hierarchical levels are **not** independent from each other.\n:::\n\n## Correlated intercept and slope hierarchy  {style=\"font-size: 0.9em\"}\n\n::: {style=\"font-size: 0.9em\"}\n`lme4` notation : `y ~ x + (x | g)` or `y ~ 1 + x + (1 + x | g)`\n\nThis model assumes the hierarchy between the intercept and the slope is correlated.\n\nMathematically, it can be translated to \n\n$$\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{0f} +\\mathbf{Z}\\mathbf{b}_{1f},\\sigma^2\\mathbf{I})$$\nor \n\n$$y_i = b_{0f[i]} + zb_{1f[i]} + \\varepsilon \\quad\\forall\\quad i = 1\\dots n$$\nIn this model\n\n$$\\begin{bmatrix}\n    b_0\\\\\n    b_1\\\\\n\\end{bmatrix}\n\\sim \\mathcal{N}\\left(0, \n                      \\begin{bmatrix}\n                        \\sigma^2_{b_0} & \\rho_{b_0,b_1}\\sigma_{b_0}\\sigma_{b_1} \\\\ \n                        \\rho_{b_0,b_1}\\sigma_{b_0}\\sigma_{b_1} & \\sigma^2_{b_1}\n                      \\end{bmatrix}\n                \\right)$$\n:::\n\n\n## Correlated intercept and slope hierarchy  {style=\"font-size: 0.9em\"}\n\n::: {style=\"font-size: 0.82em\"}\nThe covariance structure \n$$\\begin{bmatrix}\n    b_0\\\\\n    b_1\\\\\n\\end{bmatrix}\n\\sim \\mathcal{N}\\left(0, \n                      \\begin{bmatrix}\n                        \\sigma^2_{b_0} & \\rho_{b_0,b_1}\\sigma_{b_0}\\sigma_{b_1} \\\\ \n                        \\rho_{b_0,b_1}\\sigma_{b_0}\\sigma_{b_1} & \\sigma^2_{b_1}\n                      \\end{bmatrix}\n                \\right)$$\n\nneeds to be discussed a bit more.\n\n### Notation\n\nIn the covariance matrix,\n\n- $\\rho_{b_0,b_1}$ is the correlation between $b_0$ and $b_1$\n- $\\rho_{b_0,b_1}\\sigma_{b_0}\\sigma_{b_1}$ is the covariance between $b_0$ and $b_1$\n\n### Interpretation\n\nA covariance matrix with non-zero covariance describes dependence between the $b$s, which can tell us both the strength of the relation between pairs of parameters and the variance structure.\n:::\n\n\n## Correlated intercept and slope hierarchy {style=\"font-size: 0.9em\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=1440}\n:::\n:::\n\n\n## So far what we have done\n\n. . . \n\n![](https://images2.minutemediacdn.com/image/upload/c_fill,w_2160,ar_16:9,f_auto,q_auto,g_auto/shape%2Fcover%2Fsport%2Flegos-hero-0eaaf09e995d184255040705b42f46f4.jpg){fig-align=\"center\" width=100%}\n\n## What we can do now !\n\n. . .\n\n![](https://www.boredpanda.com/blog/wp-content/uploads/2022/10/635f7c2fca5d5_lego-builds.jpg){fig-align=\"center\" width=50%}\n\n## Combining different types of hierarchy {style=\"font-size: 0.9em\"}\n\nWith what we learned so far, it is possible to build more complex model by combining different hierarchy we studied. \n\nTo show how we can combine different hierarchy, let's use *Bidonia examplaris* as an example.\n\n### Question\n\n### \"Data\"\n\n\n\n## second\n\n::: r-fit-text\nTest your model\n:::\n\n## \n\nimg:\n\n![](img/bg.jpg)\n\nit is a landscape\n\n##  {auto-animate=\"true\"}\n\n\n$$\\mathbf{b} \\sim \\mathcal{N}\\left(0, \n                                \\begin{bmatrix}\n                                  \\sigma^2_f & \\sigma_f\\sigma_g\\\\\n                                  \\sigma_f\\sigma_g& \\sigma^2_g\\\\\n                                \\end{bmatrix}\n                                \\right)$$\n\n\n::: {style=\"margin-top: 100px;\"}\ncheck with simulations\n:::\n\n##  {auto-animate=\"true\"}\n\n::: {style=\"margin-top: 200px; font-size: 2.5em; color: red;\"}\ncheck with simulations\n:::\n\n## choose parameters {auto-animate=\"TRUE\"}\n\n``` r\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\n```\n\n## make up an X variable {auto-animate=\"TRUE\"}\n\n``` r\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\n```\n\n## calculate the average {auto-animate=\"TRUE\"}\n\n``` r\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\n```\n\n## simulate some observations {auto-animate=\"TRUE\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\n```\n:::\n\n\n## finally, visualize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y_obs ~ x)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## here it is all on one slide\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\nplot(y_obs, x)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Or we can present the code and results separately\n\n::: panel-tabset\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\n```\n:::\n\n\n### The figure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y_obs ~ x)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n:::\n\n## another equation\n\n$$\n2 + 4 = 6\n$$\n\n## The equation\n\n$$\n\\begin{align}\ny  &\\sim \\text{N}(\\mu, \\sigma_{obs}) \\\\\n\\mu &= a + bx \\\\\n\\end{align}\n$$\n\n## The model {auto-animate=\"TRUE\"}\n\n``` stan\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}\n```\n\n## Declare the data {auto-animate=\"TRUE\"}\n\n``` {.stan code-line-numbers=\"1-4\"}\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}\n```\n\n## State parameters {auto-animate=\"TRUE\"}\n\n``` {.stan code-line-numbers=\"5-8\"}\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}\n```\n\n## Write the likelihood and priors {auto-animate=\"TRUE\"}\n\n``` {.stan code-line-numbers=\"9-13\"}\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}\n```\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}