{
  "hash": "6578002636f884e1962bb24025605e15",
  "result": {
    "markdown": "---\ntitle: \"Data simulation\"\ndescription: |\n  Expressing yourself through made-up numbers.\nexecute:\n  freeze: true\nformat:\n  html:\n    code-tools: true\n---\n\n\n## Why simulate data?\n\nWhy would you want to? there are a few good reasons:\n\n1. Understand your priors. By simulating data from a model we get an idea of what priors actually mean scientifically. With all but the simplest models, this is essential \n2. Demonstrate your understanding of the model. If you can't simulate data from a model, you probably don't understand it!\n3. Validate that the model works correctly. If you can recover parameters when you know the truth, then we have more confidence that it will work correctly on real data.\n\n## Watching for birds\n\nLet's start by simulating a simple dataset with one parameter: the number of birds each of us is going to see on a hike today. \n\nWhat kind of numbers do we expect to get? what is a reasonable limit to how many we would see? \n\n### Simulation in R \n\nlet's simulate from a poisson distribution. \nAs you probably know, the poisson in R is just `rpois`. \nEvery statistical distribution that is in R (which is a lot! almost all! ) has four functions. \nFor a distribution called `dist`, they are:\n\n* `rdist` = the distribution functions\n* `qdist` = the quantile functions\n* `pdist` = the probability density function\n* `ddist` the density function\n\n\n\nLet's begin by simulating data in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_people <- 23\nobservations <- rpois(n_people, lambda = 20)\n\nhist(observations)\n```\n\n::: {.cell-output-display}\n![](data_simulation_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWe can do the same process in the programming language Stan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.5.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n```\n:::\n\n```{.r .cell-code}\npoisson_simulation <- cmdstan_model(stan_file = \"topics/01_data_simulation/poisson_simulation.stan\")\n\npoisson_simulation\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int<lower=0> n_people;\n  real avg_observed;\n}\ngenerated quantities {\n  array[n_people] int<lower=0> observations;\n  \n  for (i in 1:n_people){\n    observations[i] = poisson_rng(avg_observed);\n  }\n}\n```\n:::\n:::\n\n\n\n* compare and contrast the R and Stan formulations\n* intro to Stan syntax\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoisson_simulation$sample(data = list(n_people = 23,\n                                      avg_observed = 19.5),\n                          fixed_param = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:   1 / 1000 [  0%]  (Sampling) \nChain 1 Iteration: 100 / 1000 [ 10%]  (Sampling) \nChain 1 Iteration: 200 / 1000 [ 20%]  (Sampling) \nChain 1 Iteration: 300 / 1000 [ 30%]  (Sampling) \nChain 1 Iteration: 400 / 1000 [ 40%]  (Sampling) \nChain 1 Iteration: 500 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 1 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 1 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 1 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 finished in 0.0 seconds.\nChain 2 Iteration:   1 / 1000 [  0%]  (Sampling) \nChain 2 Iteration: 100 / 1000 [ 10%]  (Sampling) \nChain 2 Iteration: 200 / 1000 [ 20%]  (Sampling) \nChain 2 Iteration: 300 / 1000 [ 30%]  (Sampling) \nChain 2 Iteration: 400 / 1000 [ 40%]  (Sampling) \nChain 2 Iteration: 500 / 1000 [ 50%]  (Sampling) \nChain 2 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 2 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 2 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 2 finished in 0.0 seconds.\nChain 3 Iteration:   1 / 1000 [  0%]  (Sampling) \nChain 3 Iteration: 100 / 1000 [ 10%]  (Sampling) \nChain 3 Iteration: 200 / 1000 [ 20%]  (Sampling) \nChain 3 Iteration: 300 / 1000 [ 30%]  (Sampling) \nChain 3 Iteration: 400 / 1000 [ 40%]  (Sampling) \nChain 3 Iteration: 500 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 3 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 3 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 3 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 3 finished in 0.0 seconds.\nChain 4 Iteration:   1 / 1000 [  0%]  (Sampling) \nChain 4 Iteration: 100 / 1000 [ 10%]  (Sampling) \nChain 4 Iteration: 200 / 1000 [ 20%]  (Sampling) \nChain 4 Iteration: 300 / 1000 [ 30%]  (Sampling) \nChain 4 Iteration: 400 / 1000 [ 40%]  (Sampling) \nChain 4 Iteration: 500 / 1000 [ 50%]  (Sampling) \nChain 4 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 4 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 4 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 4 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 4 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.6 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n         variable  mean median   sd  mad    q5   q95 rhat ess_bulk ess_tail\n observations[1]  19.50  19.00 4.44 4.45 13.00 27.00 1.00     3717     3780\n observations[2]  19.60  19.00 4.49 4.45 13.00 27.00 1.00     3866     3788\n observations[3]  19.47  19.00 4.42 4.45 12.00 27.00 1.00     3845     3669\n observations[4]  19.57  19.00 4.37 4.45 13.00 27.00 1.00     3968     3943\n observations[5]  19.43  19.00 4.42 4.45 13.00 27.00 1.00     4008     3950\n observations[6]  19.50  19.00 4.40 4.45 13.00 27.00 1.00     3991     3820\n observations[7]  19.50  19.00 4.43 4.45 13.00 27.00 1.00     3971     3947\n observations[8]  19.59  19.00 4.33 4.45 13.00 27.00 1.00     4057     3956\n observations[9]  19.55  19.00 4.40 4.45 13.00 27.00 1.00     3980     4031\n observations[10] 19.51  19.00 4.32 4.45 13.00 27.00 1.00     3932     4028\n\n # showing 10 of 23 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n```\n:::\n:::\n\n\n\n## Write down model \n\n\n::: {.cell}\n\n:::\n\n\n## Fit model to a simulation\n\n\n## learning how to plot a posterior\n\nNow we can move on to the second step outlined above: we can just fit the same data to our model, vice versa, and see if we can recover that parameter.\n\n\n## R based alternatives\n\nIn R, there are several ways to do it: first, we can use R do it in two ways: fitdistr, and  glm. \n\nThen we do the same thing in Stan. \n\nThen we look to see if we have recovered our parameter. \n\nThe next steop in visualization, which we also do with this simple model. \n\n\n\n",
    "supporting": [
      "data_simulation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}