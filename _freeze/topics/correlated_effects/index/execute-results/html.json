{
  "hash": "697e17d8bcced9be0b66d0bbaa233798",
  "result": {
    "markdown": "---\ntitle: \"Summarizing many univariate models\"\ndescription: |\n  A secret weapon for when you're building hierarchical models.\nexecute:\n  freeze: true\nformat:\n  html:\n    code-tools: true\n---\n\n\nWe've already looked at univariate models. When we fit the same model to multiple different groups, we don't expect the same values for all the coefficients. Each thing we are studying will respond to the same variable in different ways.\n\nHierarchial models represent a way to *model* this variation, in ways that range from simple to complex.\n\nBefore we dive in with hierarchical structure, let's build a bridge between these two approaches.\n\nThis is useful to help us understand what a hierarchical model does.\n\nHowever it is also useful from a strict model-building perspective -- so useful that [Andrew Gelman calls it a \"Secret Weapon\"](https://statmodeling.stat.columbia.edu/2005/03/07/the_secret_weap/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mite, package = \"vegan\")\ndata(\"mite.env\", package = \"vegan\")\n\n# combine data and environment\nlibrary(tidyverse)\nmite_data_long <- bind_cols(mite.env, mite) |> \n  pivot_longer(Brachy:Trimalc2, names_to = \"spp\", values_to = \"abd\")\n```\n:::\n\n\nTo keep things simple and univariate, let's consider only water:\n\nFirst, a quick word about centering and scaling a predictor variable:\n\n1.  I center the predictor by subtracting the mean. This changes the *intercept* of my linear predictor. it becomes the mean log-odds of occurrance when the water content is average\n2.  I divide water content by 100. The dataset has units of **grams per Litre** of water (see `?vegan::mite.env` for more details). This is fine, but I don't think mites are able to sense differences as precise as a millimeter of water either way. by dividing by 10 I transform this into centilitres, which is more informative.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_data_long_transformed <- mite_data_long |> \n  mutate(presabs = as.numeric(abd>0),\n         # center predictors\n         water = (WatrCont - mean(WatrCont)) / 100\n         )\n\nmite_data_long_transformed |> \n  ggplot(aes(x = water, y = presabs)) + \n  geom_point() + \n  stat_smooth(method = \"glm\", method.args = list(family = \"binomial\")) + \n  facet_wrap(~spp)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nsome things to notice about this figure:\n\n-   the x-axis scale has been transformed from \"grams per litre\" to \"centilitres away from average\n-   there is a ton of variation in how different species respond to water!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_many_glms <- mite_data_long_transformed |> \n  nest_by(spp) |> \n  mutate(logistic_regressions = list(\n    glm(presabs ~ water,\n        family = \"binomial\",\n        data = data))) |> \n  mutate(coefs = list(broom::tidy(logistic_regressions)))\n```\n:::\n\n\n:::{.callout-note}\n## Split-Apply-Combine\n\nTo explore this kind of thinking, we are going to use an approach sometimes called [\"split-apply-combine\"](https://vita.had.co.nz/papers/plyr.pdf)\n\nThere are many possible ways to do this in practice. We are using a technique here from the tidyverse, which you can [read more about](https://dplyr.tidyverse.org/articles/rowwise.html).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_many_glm_coefs <- mite_many_glms |> \n  select(-data, -logistic_regressions) |> \n  unnest(coefs)\n\nmite_many_glm_coefs |> \n  ggplot(aes(x = estimate, y = spp,\n             xmin = estimate - std.error,\n             xmax = estimate + std.error)) + \n  geom_pointrange() + \n  facet_wrap(~term, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAs you can see, some of these estimates are high, others low. We could also plot these as histograms to see this distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_many_glm_coefs |> \n  ggplot(aes(x = estimate)) + \n  geom_histogram(binwidth = .5) + \n  facet_wrap(~term, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nOnce again, the two parameters of this model represent:\n\n-   *Intercept* The probability (in log-odds) of a species being present at the average water concentration. some species are common, others are rare.\n-   *water* this is the change in probability (in log-odds) as water increases by one centilitre per litre of substrate.\n\n## Say it in Stan\n\nThe above tidyverse approach is very appealing and intuitive, but we can also do the same procedure in Stan.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.5.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n```\n:::\n\n```{.r .cell-code}\nall_species_unpooled <- cmdstan_model(\n  stan_file = \"topics/correlated_effects/all_species_unpooled.stan\", \n  pedantic = TRUE)\n\nmite_bin <- mite\nmite_bin[mite_bin>0] <- 1\n\nall_species_unpooled_posterior <- \n  all_species_unpooled$sample(\n    data = list(\n      n = nrow(mite_bin),\n      S = ncol(mite_bin),\n      x = with(mite.env, (WatrCont - mean(WatrCont))/100),\n      y = as.matrix(mite_bin)\n    ), \n    refresh = 0, parallel_chains = 4\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 5.9 seconds.\nChain 2 finished in 7.4 seconds.\nChain 3 finished in 7.4 seconds.\nChain 4 finished in 7.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 7.1 seconds.\nTotal execution time: 7.7 seconds.\n```\n:::\n:::\n\n\nnow let's try to plot this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# start by looking at the names of variables\n# get_variables(all_species_unpooled_posterior)\n\npost_pred <- tidybayes::spread_rvars(all_species_unpooled_posterior, \n             intercept[spp_id], slope[spp_id]) |> \n  expand_grid(water = seq(from = -4, to = 4, length.out = 10)) |> \n  mutate(prob = posterior::rfun(plogis)(intercept + slope*water),\n         spp = colnames(mite_bin)[spp_id]) |> \n  ggplot(aes(x = water, dist = prob)) + \n  tidybayes::stat_lineribbon() + \n  facet_wrap(~spp) + \n  scale_fill_brewer(palette = \"Greens\")\n\npost_pred\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npost_pred + \n  geom_point(aes(x = water, y = presabs), \n             inherit.aes = FALSE, \n             data = mite_data_long_transformed,\n             pch = 21, \n             fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nPlot and compare to frequentist point estimates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_rvars <- tidybayes::gather_rvars(\n  all_species_unpooled_posterior, \n             intercept[spp_id], slope[spp_id]) \n\n\nmite_many_glm_coefs |> \n  select(spp, term, estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 70 × 3\n# Groups:   spp [35]\n   spp      term        estimate\n   <chr>    <chr>          <dbl>\n 1 Brachy   (Intercept)   2.43  \n 2 Brachy   water        -0.547 \n 3 Ceratoz1 (Intercept)   0.466 \n 4 Ceratoz1 water         0.0273\n 5 Ceratoz3 (Intercept)  -0.237 \n 6 Ceratoz3 water         0.280 \n 7 Eupelops (Intercept)  -0.464 \n 8 Eupelops water        -0.535 \n 9 FSET     (Intercept)  -0.644 \n10 FSET     water        -1.82  \n# ℹ 60 more rows\n```\n:::\n:::\n\n\n\n## Modelling variation in slopes\n\nClearly there is variation among species in the values of these parameters. Like all variation, we can develop a scientific model to describe it. The simplest model we'll consider is a simple univariate distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(cmdstanr))\n\nall_species_partpooled_diag <- cmdstan_model(\n  stan_file = \"topics/correlated_effects/all_species_partpooled_diag.stan\", \n  pedantic = TRUE)\n\nmite_bin <- mite\nmite_bin[mite_bin>0] <- 1\n\nmite_data_list <- list(\n  Nsites = nrow(mite_bin),\n  K = 2,\n  S = ncol(mite_bin),\n  x = cbind(1, with(mite.env, (WatrCont - mean(WatrCont))/100)),\n  y = as.matrix(mite_bin))\n\nall_species_partpooled_diag_posterior <- all_species_partpooled_diag$sample(\n  data = mite_data_list,\n  refresh = 0, parallel_chains = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\nRunning MCMC with 4 parallel chains...\n\nChain 4 finished in 11.5 seconds.\nChain 1 finished in 11.9 seconds.\nChain 2 finished in 13.2 seconds.\nChain 3 finished in 13.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 12.6 seconds.\nTotal execution time: 14.1 seconds.\n```\n:::\n:::\n\n\n\nplot these, reproducing the figure from earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the unpooled numbers\nunpooled_slopes <- all_species_unpooled_posterior |> \n  tidybayes::gather_rvars(slope[spp])\n\ntidybayes::get_variables(all_species_partpooled_diag_posterior)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"lp__\"          \"z[1,1]\"        \"z[2,1]\"        \"z[1,2]\"       \n  [5] \"z[2,2]\"        \"z[1,3]\"        \"z[2,3]\"        \"z[1,4]\"       \n  [9] \"z[2,4]\"        \"z[1,5]\"        \"z[2,5]\"        \"z[1,6]\"       \n [13] \"z[2,6]\"        \"z[1,7]\"        \"z[2,7]\"        \"z[1,8]\"       \n [17] \"z[2,8]\"        \"z[1,9]\"        \"z[2,9]\"        \"z[1,10]\"      \n [21] \"z[2,10]\"       \"z[1,11]\"       \"z[2,11]\"       \"z[1,12]\"      \n [25] \"z[2,12]\"       \"z[1,13]\"       \"z[2,13]\"       \"z[1,14]\"      \n [29] \"z[2,14]\"       \"z[1,15]\"       \"z[2,15]\"       \"z[1,16]\"      \n [33] \"z[2,16]\"       \"z[1,17]\"       \"z[2,17]\"       \"z[1,18]\"      \n [37] \"z[2,18]\"       \"z[1,19]\"       \"z[2,19]\"       \"z[1,20]\"      \n [41] \"z[2,20]\"       \"z[1,21]\"       \"z[2,21]\"       \"z[1,22]\"      \n [45] \"z[2,22]\"       \"z[1,23]\"       \"z[2,23]\"       \"z[1,24]\"      \n [49] \"z[2,24]\"       \"z[1,25]\"       \"z[2,25]\"       \"z[1,26]\"      \n [53] \"z[2,26]\"       \"z[1,27]\"       \"z[2,27]\"       \"z[1,28]\"      \n [57] \"z[2,28]\"       \"z[1,29]\"       \"z[2,29]\"       \"z[1,30]\"      \n [61] \"z[2,30]\"       \"z[1,31]\"       \"z[2,31]\"       \"z[1,32]\"      \n [65] \"z[2,32]\"       \"z[1,33]\"       \"z[2,33]\"       \"z[1,34]\"      \n [69] \"z[2,34]\"       \"z[1,35]\"       \"z[2,35]\"       \"gamma[1]\"     \n [73] \"gamma[2]\"      \"sd_params[1]\"  \"sd_params[2]\"  \"beta[1,1]\"    \n [77] \"beta[2,1]\"     \"beta[1,2]\"     \"beta[2,2]\"     \"beta[1,3]\"    \n [81] \"beta[2,3]\"     \"beta[1,4]\"     \"beta[2,4]\"     \"beta[1,5]\"    \n [85] \"beta[2,5]\"     \"beta[1,6]\"     \"beta[2,6]\"     \"beta[1,7]\"    \n [89] \"beta[2,7]\"     \"beta[1,8]\"     \"beta[2,8]\"     \"beta[1,9]\"    \n [93] \"beta[2,9]\"     \"beta[1,10]\"    \"beta[2,10]\"    \"beta[1,11]\"   \n [97] \"beta[2,11]\"    \"beta[1,12]\"    \"beta[2,12]\"    \"beta[1,13]\"   \n[101] \"beta[2,13]\"    \"beta[1,14]\"    \"beta[2,14]\"    \"beta[1,15]\"   \n[105] \"beta[2,15]\"    \"beta[1,16]\"    \"beta[2,16]\"    \"beta[1,17]\"   \n[109] \"beta[2,17]\"    \"beta[1,18]\"    \"beta[2,18]\"    \"beta[1,19]\"   \n[113] \"beta[2,19]\"    \"beta[1,20]\"    \"beta[2,20]\"    \"beta[1,21]\"   \n[117] \"beta[2,21]\"    \"beta[1,22]\"    \"beta[2,22]\"    \"beta[1,23]\"   \n[121] \"beta[2,23]\"    \"beta[1,24]\"    \"beta[2,24]\"    \"beta[1,25]\"   \n[125] \"beta[2,25]\"    \"beta[1,26]\"    \"beta[2,26]\"    \"beta[1,27]\"   \n[129] \"beta[2,27]\"    \"beta[1,28]\"    \"beta[2,28]\"    \"beta[1,29]\"   \n[133] \"beta[2,29]\"    \"beta[1,30]\"    \"beta[2,30]\"    \"beta[1,31]\"   \n[137] \"beta[2,31]\"    \"beta[1,32]\"    \"beta[2,32]\"    \"beta[1,33]\"   \n[141] \"beta[2,33]\"    \"beta[1,34]\"    \"beta[2,34]\"    \"beta[1,35]\"   \n[145] \"beta[2,35]\"    \"treedepth__\"   \"divergent__\"   \"energy__\"     \n[149] \"accept_stat__\" \"stepsize__\"    \"n_leapfrog__\" \n```\n:::\n\n```{.r .cell-code}\npartpooled_slopes <- all_species_partpooled_diag_posterior |> \n  tidybayes::gather_rvars(beta[param, spp]) |> \n  filter(param == 2)\n\nleft_join(unpooled_slopes, partpooled_slopes, by = \"spp\") |> \n  ggplot(aes(x = mean(.value.x), y = mean(.value.y))) + \n  geom_point() + \n  geom_abline(intercept = 0, slope = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n<!-- Roadmap: -->\n\n<!-- ### Simple model -->\n\n<!-- * formula -->\n<!-- * validation with bayesplot -->\n<!-- * extraction and visualization with tidybayes -->\n\n<!-- ### The secret weapon -->\n\n<!-- * fit one model to each group -->\n<!-- * plot their estimates -->\n<!-- * extend the simple one-species model to use a vector of coefficients -->\n<!-- * BONUS: tidy, nest by way -->\n\n<!-- ### single species, no pooling regressions -->\n\n<!-- * formula -->\n<!-- * posterior predicitons with bayesplot -->\n<!-- * extraction and visualization -->\n\n<!-- ## single species, partial pooling but no correlation -->\n\n<!-- * formula -->\n<!-- * posterior predictions -->\n<!-- * extract and visualize -->\n<!-- * compare -->\n\n\n<!-- * validation with bayesplot -->\n\n\n<!-- * model comparison with LOO-ic, adding LogLik to the generated quantities -->\n\n\n\n\n<!-- let's take a look at these values: -->\n\n<!-- ```{r} -->\n<!-- data(\"mite.xy\", package = \"vegan\") -->\n<!-- mite.xy -->\n<!-- nrow(mite) -->\n<!-- ``` -->\n\n<!-- ## Ongoing discussions to have: -->\n\n<!-- * how much \"tooling\" would we like to try and do?  for me, there is a difference between a \"minimal\" approach that is base R + cmdstanr, vs a bigger approach such as: -->\n\n<!-- tidyverse -->\n<!-- tidybayes (compose_data) -->\n<!-- the posterior package (possibly interacting with tidybayes) -->\n<!-- bayesplot -->\n\n<!-- Then the bigger, more \"meta\" packages: -->\n<!-- brms -->\n<!-- rstanarm -->\n\n<!-- correlated: -->\n\n\n<!-- ```{r} -->\n<!-- #| class.output: stan -->\n\n<!-- # logistic_bern_glm_corr <- cmdstan_model( -->\n<!-- #   stan_file = \"topics/secret_weapon_correlated.stan\",  -->\n<!-- #   pedantic = TRUE) -->\n<!-- #  -->\n<!-- #  -->\n<!-- # partpooling_samples <- logistic_bern_glm_corr$sample(data = mite_data_list) -->\n\n\n<!-- ``` -->\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}