{
  "hash": "487a78d01c6310a32e962069d3456bcc",
  "result": {
    "markdown": "---\ntitle: \"Data simulation\"\ndescription: |\n  Expressing yourself through made-up numbers.\nexecute:\n  freeze: true\nformat:\n  html:\n    code-tools: true\n---\n\n\nBefore starting work on real data, we are going to begin by learning how to make up some of our own.\nThere are at least three reasons why this is a good idea:\n\n1.  **Understand your priors.**. For most interesting models in ecology, you will not be able to pick good numbers for your prior parameters just by thinking hard. Should this be $\\text{Normal}(2, 1)$ ?? or should the standard deviation be bigger? smaller? As we'll see, simulation will demystify the process \n1. **Validate your model.** Bayesian models are great because they can create datasets by simulation. The _very minimum_ requirement we might have for our models is that, if we use a model to make a dataset dataset, we should be able to fit that model to the simulated data to recover the true parameter values. This lets us know that the sample size and power of our analysis is correct.\n1. **Test your understanding.** Perhaps most importantly, simulation helps you to test your own intuition.\nIf you can write it in Stan, or if you can simulate data from your model, then you really understand it!\nIf you can't, then you don't know quite how it works yet.\n\n## Simple exercise in simulation\n\nLet's imagine we are taking a walk as a group today at the beautiful SBL. What is the number of birds each of us is going to see on our hike?\n\n:::{.callout-note}\nSimulating data really helps a scientist to ask an important question: \"Where do my numbers come from?\".\nWhat kind of numbers do we expect to get? Do they have an upper limit? a lower limit?\nWhat kind of observation would be a little suprising? VERY surprising?\n:::\n\n### What is the process\n\nWe might imagine that each one of us is likely to see about the same number of birds. \nWe know our data (number of birds) is going to be a positive integer: 0 or more birds \n\n$$\n\\begin{align}\n\\text{Number of Birds} &\\sim \\text{Poisson}(\\lambda) \\\\\n\\lambda &= 20 \n\\end{align}\n$$\n\n\n$$\n\\begin{align}\n\\text{Number of Birds} &\\sim \\text{Poisson}(\\lambda_i) \\\\\n\\lambda_i &= \\mu \\\\\n\n\\end{align}\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabd ~ 1 + (1 | person)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabd ~ 1 + (1 | person)\n```\n:::\n:::\n\n\n\n\n### Simulation in R\n\nlet's simulate from a poisson distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nn_people <- 21\nrpois(n_people, lambda = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 14 21 21 16 22 17 24 17 17 12 20 24 19 17 23 17 20 17 20 19 23\n```\n:::\n:::\n\n\n\nas you probably know, to draw random numbers in R we use the function `rpois`\n\nEvery statistical distribution that is in R (which is a lot! almost all! ) has a distirbution has four functions.\nof the distribution is called `dist`, then they are:\n\n`rdist` = the distribution functions \n`qdist` = the quantile functions \n`pdist` = the probability density function \n`ddist` the density function\n\n\n:::{.callout-note}\n\nIn these simulations we can see that we are expressing ourselves with a sort of great, big shrug: we have no idea what these numbers might be, and so we are working to just make up fake ones.\nwe start with very little -- with literally no information -- about what our data might be when we see it.\nfor a bayeisan, there is no practical difference between data and parameters in a model\n\nwhat makes a person and approach Bayesian is not the use of Bayes rule.\nBayes rule is just a fact about conditional probability, which everyone uses regardless of their framework for scientific inference.\nno, to be bayesian is to use probability to measure uncertainty.\n:::\n\n.. plot it..\n\n## Simulating data in Stan\n\n\nwrite model\nwalk through it\n\n\n## parameter recovery\n\nOk so now we can see our first simple stan model!\nwe are using this powerful tool to draw forty random numbers.\n\n\nin R : fitdistr, glm\n\nNow we can move on to the second step outlined above: we can just fit the same data to our model, vice versa, and see if we can recover that parameter.\n\nIn R, there are several ways to do it: first, we can use R do it in two ways: fitdistr, and glm.\n\nThen we do the same thing in Stan.\n\nThen we look to see if we have recovered our parameter.\n\nThe next steop in visualization, which we also do with this simple model.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}