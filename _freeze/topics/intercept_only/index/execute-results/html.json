{
  "hash": "f17e7ca6fdf007733f8455961ddba003",
  "result": {
    "markdown": "---\ntitle:  Fitting an intercept-only model\ndescription: |\n  Where is the variation\nexecute:\n  freeze: true\nformat:\n  html:\n    code-tools: true\n---\n\n\n## Resources\n\n* [tidybayes](http://mjskay.github.io/tidybayes/index.html) is an incredible tool, and the vignette is a great read for visualization approaches (even if you aren't using `rvars`)\n* the [posterior package](https://mc-stan.org/posterior/) is the best place to learn about how to manipulate Stan posterior distributions.\n\n\n\n$$\n\\begin{align}\n\\text{Abundance}_i &\\sim \\text{Poisson}(\\lambda_i) \\\\\n\\log{\\lambda_i} &\\sim \\mu + \\beta_{\\text{sample}[i]} + \\beta_{\\text{species[i]}} + \\beta_i\\\\\n\\mu &\\sim \\text{Normal}(3, 1)\\\\\n\\beta_{\\text{sample}} &\\sim \\text{Normal}(0,  \\sigma_{\\text{samp}})\\\\\n\\beta_{\\text{species}} &\\sim \\text{Normal}(0, \\sigma_{\\text{species}})\\\\\n\\beta_i &\\sim \\text{Normal}(0,                \\sigma_{\\text{obs}}) \\\\\n\\sigma_{\\text{samp}}    &\\sim \\text{Exponential}(3)\\\\\n\\sigma_{\\text{species}} &\\sim \\text{Exponential}(3)\\\\\n\\sigma_{\\text{obs}}     &\\sim \\text{Exponential}(3)\n\\end{align}\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.7.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /home/andrew/software/cmdstan\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.34.1\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidybayes)\n\ndata(\"mite\", package = \"vegan\")\n\nspp_names <- colnames(mite)\nspp_names <- setNames(1:ncol(mite), colnames(mite))\n\n\nmite_long <- mite |> \n  mutate(site_id = seq_len(nrow(mite))) |> \n  tidyr::pivot_longer(-site_id,\n                      names_to = \"spp\",\n                      values_to = \"abd\") |> \n  dplyr::mutate(spp_id = spp_names[spp])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n\nspp_site_obs_intercepts <- cmdstan_model(\"topics/intercept_only/spp_site_obs_intercepts.stan\", \n                                  pedantic = TRUE)\nspp_site_obs_intercepts\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata{\n  int N;\n  int N_spp;\n  array[N] int<lower=1,upper=N_spp> spp_id;\n  int N_sites;\n  array[N] int<lower=1,upper=N_sites> site_id;\n  array[N] int abd;\n}\nparameters{\n  vector[N_spp] spp_effects;\n  vector[N_sites] site_effects;\n  vector[N] obs_effects;\n  real mu;\n  real<lower=0> sigma_spp;\n  real<lower=0> sigma_sites;\n  real<lower=0> sigma_obs;\n}\nmodel {\n  abd ~ poisson_log(mu + spp_effects[spp_id] + site_effects[site_id] + obs_effects);\n  spp_effects ~ normal(0, sigma_spp);\n  site_effects ~ normal(0, sigma_sites);\n  obs_effects ~ normal(0, sigma_obs);\n  mu ~ normal(3, 1);\n  sigma_spp ~ exponential(3);\n  sigma_sites ~ exponential(3);\n  sigma_obs ~ exponential(3);\n}\n```\n:::\n:::\n\n\nNow we can sample this model. \n\n:::{.callout-warning}\n## Warning: irresponsible statistics\nI'm sampling only 2 chains below, for illustration purposes only! use more chains in your research.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_site_obs_intercepts_samp <- spp_site_obs_intercepts$sample(\n  data = list(\n    N = nrow(mite_long),\n    N_spp = max(mite_long$spp_id),\n    spp_id = mite_long$spp_id,\n    N_sites = max(mite_long$site_id),\n    site_id = mite_long$site_id,\n    abd = mite_long$abd\n  ),chains = 2, parallel_chains = 2)\n\nspp_site_obs_intercepts_samp$save_object(\"topics/intercept_only/spp_site_obs_intercepts.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_site_obs_intercepts_samp <- read_rds(\"topics/intercept_only/spp_site_obs_intercepts.rds\")\n```\n:::\n\n\n## Exploring the model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_site_obs_intercepts_samp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       variable     mean   median    sd   mad       q5      q95 rhat ess_bulk\n lp__           17755.93 17756.60 56.81 55.89 17661.36 17845.10 1.01      236\n spp_effects[1]     1.98     1.98  0.31  0.32     1.46     2.47 1.02      150\n spp_effects[2]    -0.45    -0.44  0.35  0.35    -1.04     0.09 1.01      228\n spp_effects[3]     2.16     2.15  0.32  0.32     1.63     2.68 1.01       99\n spp_effects[4]    -0.69    -0.69  0.35  0.36    -1.26    -0.11 1.01      162\n spp_effects[5]    -1.99    -2.00  0.41  0.41    -2.66    -1.32 1.00      410\n spp_effects[6]    -1.95    -1.94  0.42  0.42    -2.67    -1.26 1.01      247\n spp_effects[7]     0.25     0.24  0.32  0.31    -0.25     0.79 1.01      162\n spp_effects[8]    -2.36    -2.37  0.46  0.45    -3.10    -1.62 1.01      353\n spp_effects[9]    -0.66    -0.65  0.34  0.34    -1.25    -0.11 1.01      222\n ess_tail\n      516\n      342\n      469\n      217\n      506\n      702\n      786\n      383\n     1208\n      866\n\n # showing 10 of 2560 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n```\n:::\n:::\n\n\nThe sampler was just fine! Note that we have just estimated many more parameters than observations.\n\n## Plot the standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_post <- spp_site_obs_intercepts_samp$draws(\n  variables = c(\"sigma_spp\", \"sigma_sites\", \"sigma_obs\"))\n\nsigma_post\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A draws_array: 1000 iterations, 2 chains, and 3 variables\n, , variable = sigma_spp\n\n         chain\niteration   1   2\n        1 1.8 1.7\n        2 1.3 1.4\n        3 1.4 1.6\n        4 1.3 1.5\n        5 1.5 1.7\n\n, , variable = sigma_sites\n\n         chain\niteration    1    2\n        1 0.73 0.67\n        2 0.58 0.63\n        3 0.50 0.55\n        4 0.56 0.70\n        5 0.61 0.60\n\n, , variable = sigma_obs\n\n         chain\niteration   1   2\n        1 1.5 1.5\n        2 1.5 1.5\n        3 1.5 1.5\n        4 1.5 1.5\n        5 1.5 1.6\n\n# ... with 995 more iterations\n```\n:::\n:::\n\n\n\nThe default output is a draws array\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_post_df <- spp_site_obs_intercepts_samp$draws(\n  variables = c(\"sigma_spp\", \"sigma_sites\", \"sigma_obs\"),\n  format = \"data.frame\")\n\nsigma_post_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A draws_df: 1000 iterations, 2 chains, and 3 variables\n   sigma_spp sigma_sites sigma_obs\n1        1.8        0.73       1.5\n2        1.3        0.58       1.5\n3        1.4        0.50       1.5\n4        1.3        0.56       1.5\n5        1.5        0.61       1.5\n6        1.3        0.51       1.5\n7        1.6        0.48       1.5\n8        1.4        0.58       1.6\n9        1.5        0.61       1.6\n10       1.4        0.69       1.5\n# ... with 1990 more draws\n# ... hidden reserved variables {'.chain', '.iteration', '.draw'}\n```\n:::\n:::\n\n\nWe can also get a huge data frame. \nIf you are comfortable manipulating data frames, you can use all your regular techniques here. Here I use tidyverse tools to reshape and plot the posterior distribution of the three $\\sigma$ variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_post_df |> \n  pivot_longer(starts_with(\"sigma\"), \n               names_to = \"sigma\", \n               values_to = \"value\") |> \n  ggplot(aes(x = value)) + \n  geom_histogram() + \n  facet_wrap(~sigma)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Dropping 'draws_df' class as required metadata was removed.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-warning}\n## Caution\nParameters from a posterior are NOT independent. If you want to combine parameters in any way (to calculate an average for example) you have to do it WITHIN each posterior sample. Work on ROWS of the draws data frame above\n:::\n\n### Calculate the posterior distribution of average abundance for each species\n\nTo do this we need to extract the average $mu$ and add it to the species effects, $\\beta_{\\text{species}}$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_avg_effects_df <- spp_site_obs_intercepts_samp$draws(\n  variables = c(\"mu\", \"spp_effects\"),\n  format = \"data.frame\")\n\n\nspp_avg_effects_df |> \n  select(mu, starts_with(\"spp_effects\")) |> \n  mutate(row_id = seq_along(mu)) |> \n  pivot_longer(-c(\"mu\", \"row_id\"), \n               names_to = \"parname\", \n               values_to = \"spp_effect\") |> \n  mutate(spp_avg = mu + spp_effect) |> \n  ggplot(aes(x = spp_avg, group = parname)) + \n  geom_density()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Dropping 'draws_df' class as required metadata was removed.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## with rvars\n\nWe can do the same operation even more quickly by using some of the tools from tidybayes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_mu_rvars <- spp_site_obs_intercepts_samp |> \n  tidybayes::spread_rvars(mu, spp_effects[spp_id])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_mu_rvars |> \n  mutate(spp_avg = mu + spp_effects) |> \n  ggplot(aes(dist = spp_avg, group = spp_id)) + \n  tidybayes::stat_slab(col = \"black\") + \n  coord_flip() + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}