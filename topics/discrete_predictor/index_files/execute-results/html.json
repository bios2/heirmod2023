{
  "hash": "cbb771610856c31931d144fbcd8a5d1e",
  "result": {
    "markdown": "---\ntitle:  Palmer penguins and discrete predictors\ndescription: |\n  fitting a model with discrete predictors.\nexecute:\n  freeze: auto\nformat:\n  html:\n    code-tools: true\n---\n\n\nLet's start by taking a look at the Palmer Penguin dataset. Let's look at the distribution of observations of bill size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins |> \n  ggplot(aes(x=bill_depth_mm)) + \n  geom_histogram(binwidth = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![Histogram of bill depth for all the penguins in the Palmer Penguin dataset.](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThere's quite a lot of variation in these measurements, with a suggestion of perhaps more than one peak in this distribution.\n\n## A simple model\n\n$$\n\\begin{align}\n\\text{Bill depth} &\\sim \\text{Normal}(\\mu, \\sigma)\\\\\n\\mu &\\sim \\text{Normal}(17.5, 2) \\\\\n\\sigma &\\sim \\text{Exponential}(1) \\\\\n\\end{align}\n$$\n\nlet's express the same model in Stan:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.5.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n```\n:::\n\n```{.r .cell-code}\nnormal_dist <- cmdstan_model(\"topics/discrete_predictor/normal_dist.stan\")\nnormal_dist\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int N;\n  vector[N] measurements;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu, sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\n```\n:::\n:::\n\n\nThe model section looks very much like the approach shown above. \nI want you to notice especially how the bottom chunk has three lines, each describing a probability distribution. \nThese are for all the probability distribution of all the quantities in the model, both observed and unobserved. Above, we state which is which. \nModels are devices for putting together the probability of all the quantities we are looking for. Again, a Bayesian defines the world as umeasured or measured quantities -- and above we state which are observed (the data block) and which are unobserved (the parameters block).\n\nWe can fit this model to data and see the result: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first we drop all NA values\npenguins_nobillNA <- penguins |> \n  #drop NA values\n  filter(!is.na(bill_depth_mm))\n\n## then we assemble the data as a list.\n## I'm using the base function with()\n##  it lets me use the variable name directly \n## without writing penguins_nobillNA$bill_depth_mm\n\nlist_bill_dep <- with(penguins_nobillNA,\n     list(N = length(bill_depth_mm),\n          measurements = bill_depth_mm))\n     \n## sample 4 chains, suppress counting iterations\nsamp_bill_dep <- normal_dist$sample(data = list_bill_dep, \n                                    parallel_chains = 4,\n                                    refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.0 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.4 seconds.\n```\n:::\n\n```{.r .cell-code}\n## summarize the samples for each parameter into a nice table\nsamp_bill_dep |> \n  posterior::summarise_draws() |> \n  flextable::flextable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"tabwid\"><style>.cl-b3666d92{}.cl-b35cc9c2{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b360eb7e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-b360eb88{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-b3610398{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b36103a2{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b36103a3{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b36103ac{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b36103ad{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b36103ae{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-b3666d92'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-b3610398\"><p class=\"cl-b360eb7e\"><span class=\"cl-b35cc9c2\">variable</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">mean</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">median</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">sd</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">mad</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">q5</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">q95</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">rhat</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">ess_bulk</span></p></th><th class=\"cl-b36103a2\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">ess_tail</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-b36103a3\"><p class=\"cl-b360eb7e\"><span class=\"cl-b35cc9c2\">lp__</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">-405.502841</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">-405.20900</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">0.98696979</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">0.71461320</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">-407.497500</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">-404.560000</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1.001476</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1,848.425</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">2,256.381</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-b36103a3\"><p class=\"cl-b360eb7e\"><span class=\"cl-b35cc9c2\">mu</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">17.151231</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">17.15070</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">0.10696945</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">0.10793328</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">16.975890</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">17.327110</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1.001588</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">3,233.382</span></p></td><td class=\"cl-b36103ac\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">2,270.607</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-b36103ad\"><p class=\"cl-b360eb7e\"><span class=\"cl-b35cc9c2\">sigma</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1.976468</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1.97413</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">0.07465527</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">0.07381124</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1.858239</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">2.103305</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">1.001458</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">3,607.141</span></p></td><td class=\"cl-b36103ae\"><p class=\"cl-b360eb88\"><span class=\"cl-b35cc9c2\">2,702.302</span></p></td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n## Plotting parameters. \n\nWe don't have one distribution for each of our unknown numbers: we have thousands. \nWe need to get a sense of what these possible values mean scientifically. \nAn excellent way to do this is by making as many pictures as possible. \nWe will start with making plots of specific parameters. \n\nWe can look at the distributions easily using the `bayesplot` package.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ndraws <- samp_bill_dep$draws(variables = c(\"mu\", \"sigma\"))\n\nbayesplot::mcmc_hist(draws, pars = \"mu\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbayesplot::mcmc_hist(draws, pars = \"sigma\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\nNotice that the distributions do not have the same shape as the prior-- this is particularly true for $\\sigma$. \nThis shows an important point: the prior distribution does not determine what the posterior looks like. \n[should I sample from the prior and show them that?]{.aside}\n\n\n::: {.cell .column-margin}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggdist)\n\ndraws |>  \n  posterior::as_draws_df() |> \n  ggplot(aes(x = sigma)) + \n  stat_dotsinterval()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n:::\n\n::: {.cell-output-display}\n![the package `ggdist` has many fun & useful ways to draw pictures of posterior distributions. Here is one called `stats_dotsinterval()`](index_files/figure-html/fig-dotsint-1.png){#fig-dotsint width=672}\n:::\n:::\n\n\n## Posterior predictions: the easy way to check your model\n\nPeople care so much about model diagnostics. \nAnd with good reason: you need to know how much to trust a model before using it to make a scientific claim. \nOne way to find out who's model is best would be to use them to make a prediction, and see how right you are. \nNobody has the time for that. so instead the best choice is to see how well the data fit your sample. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just get some draws\ndraws <- samp_bill_dep$draws(variables = c(\"mu\", \"sigma\"))\ndraws_matrix <- posterior::as_draws_matrix(draws)\n\n## set up a matrix. for every posterior sample, \n## (that is, for a value of mu and a value of sigma) \n## draw a whole fake dataset from a normal distribution with that mean and sd. \nnsamples <- 50\nyrep <- matrix(0, ncol = list_bill_dep$N, nrow = nsamples)\n\n# pick some random rows\nset.seed(1234)\nchosen_samples <- sample(1:nrow(draws_matrix), replace = FALSE, size = nsamples)\nsubset_draws <- draws_matrix[chosen_samples,]\n\nfor (r in 1:nsamples){\n yrep[r,] <- rnorm(n = list_bill_dep$N, \n                   mean = subset_draws[r, \"mu\"], \n                   sd = subset_draws[r, \"sigma\"])\n}\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = yrep)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Posterior predictions in Stan\n\nWe can simulate our own data in R if we are comfortable translating between R and Stan. However, if you want, you can do the same process in Stan. Just combine the section we just looked at with the previous work on data simulation we started with: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_dist_rng <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng.stan\")\n\nnormal_dist_rng\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int N;\n  vector[N] measurements;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu, sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu, sigma);\n  }\n}\n```\n:::\n:::\n\n\nHere we have a handy random number generator _inside_ Stan.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp_bill_dep_rng <- normal_dist_rng$sample(\n  data = list_bill_dep,\n  refresh = 0,\n  parallel_chains = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpwFe8PQ/model-88a42f724ad0.stan', line 10, column 2 to column 35)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 2 finished in 0.3 seconds.\nChain 1 finished in 0.4 seconds.\nChain 3 finished in 0.4 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 0.5 seconds.\n```\n:::\n\n```{.r .cell-code}\ndraws <- samp_bill_dep_rng$draws(variables = c(\"yrep\"))\ndraws_matrix <- posterior::as_draws_matrix(draws)\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = head(draws_matrix, 50))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThe code is much shorter, because there is less to do in R. \nBoth of these gives the same outcome: the posterior predictive distribution. \nThis gives us a straightfoward way to test our model's performance: \n\n1. we use the model to generate fake observations. \n2. plot these on top of the real data\n3. if the data is a really poor match, we know our model has a distorted view of the world.\n\n## Different groups are different\n\nlet's add in differences among species\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_depth_mm, fill = species))+ \n  geom_histogram(binwidth = .5) + \n  scale_fill_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNow we can see that the distribution is in fact three different shapes, all placed together. \n\n:::{.callout-warning}\nSometimes scientists will plot histograms of data at the beginning of a research project, and use the histogram to decide if their data are \"normally distributed\" or not. This is not helpful! Instead, decide on a model first, and ask yourself what kind of data you expect.\n:::\n\n## Stan code for species differences\n\n\n$$\n\\begin{align}\n\\text{Bill depth}_{\\text{sp}[i]} &\\sim \\text{Normal}(\\mu_{\\text{sp}[i]}, \\sigma) \\\\\n\\mu &\\sim \\text{Normal}(17, 2) \\\\\n\\sigma &\\sim \\text{Exponential}(2) \\\\\n\\end{align}\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_dist_rng_spp_forloop <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng_spp_forloop.stan\")\n\nnormal_dist_rng_spp_forloop\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int N;\n  vector[N] measurements;\n  array[N] int<lower=1,upper=3> spp_id;\n}\nparameters {\n  vector[3] mu;\n  real<lower=0> sigma;\n}\nmodel {\n  for (i in 1:N){\n    measurements[i] ~ normal(mu[spp_id[i]], sigma);\n  }\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu[spp_id[i]], sigma);\n  }\n}\n```\n:::\n:::\n\n\nThere's a few differences to notice here:\n\n* in the `data` block: We have a new input! A declaration of the array of integers at the top, saying if this is \"species 1\", \"species 2\", or \"species 3\"\n* `mu` is a vector now. why?\n* notice the for-loop. \n\n[Do we maybe add an illustration here of how vector indexing works?]{.aside}\n\nWe can write this model a different way as well: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_dist_rng_spp <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng_spp.stan\")\n\nnormal_dist_rng_spp\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int N;\n  vector[N] measurements;\n  array[N] int<lower=1,upper=3> spp_id;\n}\nparameters {\n  vector[3] mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu[spp_id], sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu[spp_id[i]], sigma);\n  }\n}\n```\n:::\n:::\n\n\nThe only difference to the previous model is in the line with the for-loop, which is now replaced with a vectorized expression. This is faster to write and will run faster in Stan. However its not possible in every case. [add a link to the Stan forum]{.aside}\n\n### Sampling the species model\n\nWe have to make a new data list, since we've added a new input: a vector of numbers 1, 2, or 3 that tells us if we are working with the first, second, or third species.\n\n[which model to sample? here i'm doing the vectorized one just because]{.aside}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_bill_dep_spp <- with(penguins_nobillNA,\n     list(\n       N = length(bill_depth_mm),\n       measurements = bill_depth_mm,\n       spp_id = as.numeric(as.factor(species))\n     )\n)\n     \nsamp_normal_dist_rng_spp <- normal_dist_rng_spp$sample(\n  data = list_bill_dep_spp, \n  parallel_chains = 4,\n  refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.7 seconds.\nChain 2 finished in 0.7 seconds.\nChain 3 finished in 0.7 seconds.\nChain 4 finished in 0.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.7 seconds.\nTotal execution time: 0.8 seconds.\n```\n:::\n\n```{.r .cell-code}\nsamp_normal_dist_rng_spp$draws(variables = c(\"mu\", \"sigma\")) |> \n  posterior::summarise_draws() |> \n  flextable::flextable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"tabwid\"><style>.cl-ba19d03e{}.cl-ba0fc800{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ba145c62{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ba145c9e{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ba147242{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba14724c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba14724d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba147256{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba147257{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba1473be{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-ba19d03e'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-ba147242\"><p class=\"cl-ba145c62\"><span class=\"cl-ba0fc800\">variable</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">mean</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">median</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">sd</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">mad</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">q5</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">q95</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">rhat</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">ess_bulk</span></p></th><th class=\"cl-ba14724c\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">ess_tail</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-ba14724d\"><p class=\"cl-ba145c62\"><span class=\"cl-ba0fc800\">mu[1]</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.343763</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.34385</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.09148978</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.09451575</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.191670</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.494000</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.9997481</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">5,234.270</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">3,519.726</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-ba14724d\"><p class=\"cl-ba145c62\"><span class=\"cl-ba0fc800\">mu[2]</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.413884</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.41240</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.13626192</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.13610268</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.190590</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">18.641100</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.0001772</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">4,179.250</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">3,084.304</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-ba14724d\"><p class=\"cl-ba145c62\"><span class=\"cl-ba0fc800\">mu[3]</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">14.985880</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">14.98640</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.10361261</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.10526460</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">14.814095</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">15.154905</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.0001714</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">4,091.165</span></p></td><td class=\"cl-ba147256\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">2,887.654</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-ba147257\"><p class=\"cl-ba145c62\"><span class=\"cl-ba0fc800\">sigma</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.122874</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.12134</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.04409608</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">0.04419631</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.053276</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.194962</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">1.0009301</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">4,778.965</span></p></td><td class=\"cl-ba1473be\"><p class=\"cl-ba145c9e\"><span class=\"cl-ba0fc800\">3,315.725</span></p></td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nand we can repeat the posterior checking from before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_yrep_draws <- samp_normal_dist_rng_spp$draws(variables = c(\"yrep\"))\nspp_draws_matrix <- posterior::as_draws_matrix(spp_yrep_draws)\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = head(spp_draws_matrix, 50))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThe predicted distribution is now much more like the real data\n\nWe can also make figures for each individual species. \nHere we will move away from using `bayesplot` and try to visualize our posterior using the handy functions in the `tidybayes` package [add a link]{.aside}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidybayes)\nspp_draws_df <- posterior::as_draws_df(spp_yrep_draws)\n\nnormal_dist_post_samp <- tidybayes::gather_draws(samp_normal_dist_rng_spp,\n                        yrep[row_id], \n                        ndraws = 50)\n\nnormal_dist_post_samp |> \n  mutate(species = penguins_nobillNA$species[row_id]) |> \n  ggplot(aes(x = .value, colour = species)) + \n  geom_density(aes(group = .iteration), alpha = .1) + \n  facet_wrap(~species) + \n  geom_density(aes(x = bill_depth_mm),\n               data = penguins_nobillNA,\n               colour = \"black\") + \n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Exercises\n\n\n#### Level 1\n* repeat this experience for another variable in the dataset. Does the same code work on bill length? What about body size? What would you change about the model (if anything)\n* use bayesplot to examine the fit of body size to these data. \n\n#### Level 2\n* generate some random groups of your own, with known means. How well does the model fit these data\n* The present model is fixed for exactly 3 groups. how would you change it for any number of groups?\n\n#### Level 3\n* the function `tidybayes::compose_data` is a convenient way to set up your data for passing it into R. Try out this function. What does it produce for our dataset? How do you need to modify our Stan program so that it works for the output of `tidybayes::compose_data`?\n* As you can see, the model assumes the same sigma for all species. what if you relax this? \n\n### Optional! \nTry this on your own data! ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}