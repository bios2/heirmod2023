[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Course contents",
    "section": "",
    "text": "Course Syllabus\n\n\n\nIntroduction to the course and location\nData we’ll be using\nBayesian and MCMC\n\n\n\n\nStan and HMC Data simulation in Ecology\nlunch activity: COUNT BIRDS!\nDiscrete predictors"
  },
  {
    "objectID": "index.html#day-2-regression",
    "href": "index.html#day-2-regression",
    "title": "Course contents",
    "section": "DAY 2: Regression",
    "text": "DAY 2: Regression\n\nSlides\n\nLinear models\nSimple hierarchical models\n\n\n\nExercises\n\nlinear regression"
  },
  {
    "objectID": "index.html#day-3-hierarchical-models",
    "href": "index.html#day-3-hierarchical-models",
    "title": "Course contents",
    "section": "Day 3: Hierarchical models",
    "text": "Day 3: Hierarchical models\nMorning exercises:\nOne random effect models\nSlides\n\nLarger hierarchical models\n\nAfternoon exercise:"
  },
  {
    "objectID": "index.html#day-4-constrained-models-gaussian-processes",
    "href": "index.html#day-4-constrained-models-gaussian-processes",
    "title": "Course contents",
    "section": "Day 4: Constrained models: Gaussian processes",
    "text": "Day 4: Constrained models: Gaussian processes\n\nmodelling slopes and intercepts as correlated\nNC vs centered param\nintro to GPs"
  },
  {
    "objectID": "index.html#day-5-student-projects",
    "href": "index.html#day-5-student-projects",
    "title": "Course contents",
    "section": "Day 5: Student projects",
    "text": "Day 5: Student projects"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#square-matrix",
    "href": "slides/nn_extra_slides/index.html#square-matrix",
    "title": "Extra stuff",
    "section": "Square matrix",
    "text": "Square matrix\nThe square matrix has as many rows at it has columns \\[\n\\mathbf{B} = \\begin{bmatrix}\n                B_{11} & B_{12} & \\dots & B_{1j} & \\dots & B_{1n}\\\\\n                B_{21} & B_{22} & \\dots & B_{2j} & \\dots & B_{2n}\\\\\n                \\vdots & \\vdots & \\ddots & \\vdots & & \\vdots\\\\\n              B_{i1} & B_{i2} & \\dots & B_{ij} & \\dots & B_{in}\\\\\n            \\vdots & \\vdots & & \\vdots & \\ddots & \\vdots\\\\\n            B_{n1} & B_{n2} & \\dots & B_{nj} & \\dots & B_{nn}\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#determinant-of-a-matrix",
    "href": "slides/nn_extra_slides/index.html#determinant-of-a-matrix",
    "title": "Extra stuff",
    "section": "Determinant of a matrix",
    "text": "Determinant of a matrix\nNot sure if it should be included or not"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#eigenvectors-and-eigenvalues",
    "href": "slides/nn_extra_slides/index.html#eigenvectors-and-eigenvalues",
    "title": "Extra stuff",
    "section": "Eigenvectors and eigenvalues",
    "text": "Eigenvectors and eigenvalues\n\nRight eigenvector is :\n\\[\\mathbf{A}\\mathbf{w} = \\lambda\\mathbf{w}\\] Left eigenvector is :\n\\[\\mathbf{v}\\mathbf{A} = \\lambda\\mathbf{v}\\]\nRules\n\n\\(\\mathbf{A}\\) has to be a square matrix\nIf \\(\\mathbf{w}\\) is an eigenvector of \\(\\mathbf{A}\\), so is \\(c\\mathbf{w}\\) for any value of \\(c \\neq0\\)\nThe right eigenvector of \\(\\mathbf{A}^T\\) is the left eigenvector of \\(\\mathbf{A}\\)\nEigenvectors are linearly independent"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#positive-definite-matrix",
    "href": "slides/nn_extra_slides/index.html#positive-definite-matrix",
    "title": "Extra stuff",
    "section": "Positive definite matrix",
    "text": "Positive definite matrix\nIt is reasonably common when you build a hierarchical model to get an error message that state :\n\nError: Matrix X is not positive definite\n\nor similarly\n\nError: Matrix X is not positive semi-definite\n\nWhat does this mean ? Any idea ?"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#positive-semi-definite-matrix",
    "href": "slides/nn_extra_slides/index.html#positive-semi-definite-matrix",
    "title": "Extra stuff",
    "section": "Positive (semi-)definite matrix",
    "text": "Positive (semi-)definite matrix\nNerdy mathematical definition\nPositive definite matrix\n\\(\\mathbf{M}\\) is a positive definite matrix if, for any real vector \\(\\mathbf{z}\\), \\(\\mathbf{z}^t\\mathbf{M}\\mathbf{z} > 0\\)\nPositive semi-definite matrix\n\\(\\mathbf{M}\\) is a positive semi-definite matrix if, for any real vector \\(\\mathbf{z}\\), \\(\\mathbf{z}^t\\mathbf{M}\\mathbf{z} \\ge 0\\)"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#positive-semi-definite-matrix-1",
    "href": "slides/nn_extra_slides/index.html#positive-semi-definite-matrix-1",
    "title": "Extra stuff",
    "section": "Positive (semi-)definite matrix",
    "text": "Positive (semi-)definite matrix\nChecking if a matrix is positive (semi-)definite\nThe properties of eigenvalues can be used to detect if a matrix is positive (semi-) definite.\nAll we have to do is look at the eigenvalue of a square matrix.\nIf all eigenvalues of a matrix \\(\\mathbf{M}\\) larger than 0, matrix \\(\\mathbf{M}\\) is positive definite.\nIf all eigenvalues of a matrix \\(\\mathbf{M}\\) larger than or equal ro 0, matrix \\(\\mathbf{M}\\) is positive semi-definite."
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#dot-product",
    "href": "slides/nn_extra_slides/index.html#dot-product",
    "title": "Extra stuff",
    "section": "Dot product",
    "text": "Dot product\n\\[\\mathbf{v} \\cdot \\mathbf{x}= v_1x_1+v_2x_2+\\dots + v_nx_n\\]\n\n\\[\n            \\begin{bmatrix}\n                3 & 1\\\\\n            \\end{bmatrix}\n            \\cdot\n            \\begin{bmatrix}\n                2\\\\ 5\\\\\n            \\end{bmatrix} =\n                3 \\times  2 + 1 \\times 5 = 11\n\\]\n\nIn R\n\nv <- c(3, 1)\nx <- c(2,5)\nsum(v * x)\n\n[1] 11"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#solving-systems-of-linear-equation",
    "href": "slides/nn_extra_slides/index.html#solving-systems-of-linear-equation",
    "title": "Extra stuff",
    "section": "Solving systems of linear equation",
    "text": "Solving systems of linear equation\n\\[\n\\begin{align*}\n        1 &= 3\\beta_1 + 5\\beta_2 - 4\\beta_3 \\\\\n        0 &= \\beta_1 - 2\\beta_2 + 3\\beta_3\\\\\n        1 &= 4\\beta_1 + 6\\beta_2 + 5\\beta_3\\\\\n    \\end{align*}\n\\] \\[\n\\mathbf{y} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\mathbf{X} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\boldsymbol{\\beta}\n\\] \\[\n        \\begin{bmatrix}\n            1\\\\ 0\\\\ 1\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            3 & 5 & -4\\\\\n            1 & -2 & 3\\\\\n            4 & 6 & 5 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            \\beta_1\\\\ \\beta_2\\\\ \\beta_3\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#solving-systems-of-linear-equation-1",
    "href": "slides/nn_extra_slides/index.html#solving-systems-of-linear-equation-1",
    "title": "Extra stuff",
    "section": "Solving systems of linear equation",
    "text": "Solving systems of linear equation\n\n\\[\n\\mathbf{y} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\mathbf{X} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\boldsymbol{\\beta}\n\\] \\[\n        \\begin{bmatrix}\n            1\\\\ 0\\\\ 1\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            3 & 5 & -4\\\\\n            1 & -2 & 3\\\\\n            4 & 6 & 5 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            \\beta_1\\\\ \\beta_2\\\\ \\beta_3\\\\\n        \\end{bmatrix}\n\\]\nHow do we mathematically solve for \\(\\boldsymbol{\\beta}\\)?\n\\[\n    \\begin{align*}\n        \\mathbf{y} &= \\mathbf{X}\\boldsymbol{\\beta}\\\\\n        \\mathbf{X}^{-1}\\mathbf{y} &= \\mathbf{X}^{-1}\\mathbf{X}\\boldsymbol{\\beta}\\\\\n        \\mathbf{X}^{-1}\\mathbf{y} &= \\mathbf{I}\\boldsymbol{\\beta}\\\\\n        \\mathbf{X}^{-1}\\mathbf{y} &= \\boldsymbol{\\beta}\\\\\n    \\end{align*}\n\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#solving-systems-of-linear-equation-2",
    "href": "slides/nn_extra_slides/index.html#solving-systems-of-linear-equation-2",
    "title": "Extra stuff",
    "section": "Solving systems of linear equation",
    "text": "Solving systems of linear equation\n\n\\[\n\\mathbf{y} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\mathbf{X} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\boldsymbol{\\beta}\n\\] \\[\n        \\begin{bmatrix}\n            1\\\\ 0\\\\ 1\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            3 & 5 & -4\\\\\n            1 & -2 & 3\\\\\n            4 & 6 & 5 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            \\beta_1\\\\ \\beta_2\\\\ \\beta_3\\\\\n        \\end{bmatrix}\n\\]\nHow do we solve for \\(\\boldsymbol{\\beta}\\) in R?\n\nX <- matrix(c(3, 1, 4, 5, -2, 6, -4, 3, 5), nrow = 3, ncol = 3)\ny <- c(1, 0, 1)\n\n(beta <- solve(X, y))\n\n[1]  0.20000000  0.05714286 -0.02857143"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#a-few-words-about-the-prior",
    "href": "slides/nn_extra_slides/index.html#a-few-words-about-the-prior",
    "title": "Extra stuff",
    "section": "A few words about the prior",
    "text": "A few words about the prior\nConjugate priors\nThese types of priors are convenient to use because\n\nThey are computationally faster to use\nThey can be interepreted as additional data\n\nWhy are they useful?\nThere is no need to write the likelihood down when using them. All that needs to be done is to sample them to obtain a parameter estimation."
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#a-few-words-about-the-prior-1",
    "href": "slides/nn_extra_slides/index.html#a-few-words-about-the-prior-1",
    "title": "Extra stuff",
    "section": "A few words about the prior",
    "text": "A few words about the prior\nConjugate priors\nWhat does it mean to be of the same functional form?\nIt means that both distribution have th same mathematical structure.\n\n\nBinomial distribution \\[\\theta^a(1-\\theta)^b\\]\n\nBeta distribution \\[\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\\]\n\n\nhttps://en.wikipedia.org/wiki/Conjugate_prior"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#move-this-in-another-place",
    "href": "slides/nn_extra_slides/index.html#move-this-in-another-place",
    "title": "Extra stuff",
    "section": "Move this in another place",
    "text": "Move this in another place\nTechnically, we can sample all \\(\\boldsymbol{\\beta}_{f[l]}\\) independently, however, using multivariate Gaussian distribution, we can sample the \\(\\boldsymbol{\\beta}_{f}\\) for all levels of the factor in one go as\n\\[\\boldsymbol{\\beta}_{f} \\sim \\mathcal{MVN}(\\boldsymbol{\\mu}_{f}, \\mathbf{D}_f)\\] where\n\n\\(\\boldsymbol{\\mu}_{f}\\) is a vector of \\(k\\) means, one for each level of the factor\n\\(\\mathbf{D}_f\\) is a \\(k\\times k\\) diagonal matrix with variance term on the diagonal"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#hierarchy-on-the-intercepts-mean",
    "href": "slides/nn_extra_slides/index.html#hierarchy-on-the-intercepts-mean",
    "title": "Extra stuff",
    "section": "Hierarchy on the intercept’s mean",
    "text": "Hierarchy on the intercept’s mean\n\nThe structure of matrix \\(\\mathbf{D}_f\\) can be considered in two different ways in\n\\[\\boldsymbol{\\beta}_{f} \\sim \\mathcal{MVN}(\\boldsymbol{\\mu}_{f}, \\mathbf{D}_f)\\]\nWritten in the general form as we did in the equation above, we assume that all variance on the diagonal are potentially different. Or in other words, the variance in each group is assumed to be different\n\n\n\\[\\mathbf{D}_f = \\begin{bmatrix}\n                \\sigma^2_{f[1]} & 0 & \\dots & 0 & \\dots & 0\\\\\n                0 & \\sigma^2_{f[2]} & \\dots & 0 & \\dots & 0\\\\\n                \\vdots & \\vdots & \\ddots & \\vdots & & \\vdots\\\\\n              0 & 0 & \\dots & \\sigma^2_{f[l]} & \\dots & 0\\\\\n            \\vdots & \\vdots & & \\vdots & \\ddots & \\vdots\\\\\n            0 & 0 & \\dots & 0 & \\dots & \\sigma^2_{f[k]}\\\\\n        \\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#hierarchy-on-the-intercepts-mean-1",
    "href": "slides/nn_extra_slides/index.html#hierarchy-on-the-intercepts-mean-1",
    "title": "Extra stuff",
    "section": "Hierarchy on the intercept’s mean",
    "text": "Hierarchy on the intercept’s mean\n\nHowever, it can be assumed to be all the same variance regardless of the group considered\n\n\\[\\mathbf{D}_f = \\begin{bmatrix}\n                \\sigma^2_{f} & 0 & \\dots & 0 & \\dots & 0\\\\\n                0 & \\sigma^2_{f} & \\dots & 0 & \\dots & 0\\\\\n                \\vdots & \\vdots & \\ddots & \\vdots & & \\vdots\\\\\n              0 & 0 & \\dots & \\sigma^2_{f} & \\dots & 0\\\\\n            \\vdots & \\vdots & & \\vdots & \\ddots & \\vdots\\\\\n            0 & 0 & \\dots & 0 & \\dots & \\sigma^2_{f}\\\\\n        \\end{bmatrix}\\]\n\nIn this case, \\(\\boldsymbol{\\beta}_{f} \\sim \\mathcal{MVN}(\\boldsymbol{\\mu}_{f}, \\mathbf{D}_f)\\) can be rewritten as \\[\\boldsymbol{\\beta}_{f} \\sim \\mathcal{MVN}(\\boldsymbol{\\mu}_{f}, \\sigma^2_{f}\\mathbf{I})\\] Note: This is essentially the same thing as a one-way analysis of variance."
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#a-very-general-formulation",
    "href": "slides/nn_extra_slides/index.html#a-very-general-formulation",
    "title": "Extra stuff",
    "section": "A (very !) general formulation",
    "text": "A (very !) general formulation\n\nAs discuss yesterday, a linear model can be writen as\n\\[(\\mathbf{y}|\\mathbf{X}, \\boldsymbol{\\beta}, \\sigma_\\mathbf{y}^2)\\sim \\mathcal{MVN}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma\\mathbf{y}^2\\mathbf{I})\\]\nwhere\n\n\\(\\mathbf{y}\\) is a vector quantifying a response variable of length \\(n\\)\n\\(\\mathbf{X}\\) is a matrix of explanatory variables with \\(n\\) rows (samples) and \\(p\\) columns (explanatory varaibles)\n\\(\\boldsymbol{\\beta}\\) is a vector \\(p\\) pararameters weighting the importance of each explanatory variables in \\(\\mathbf{X}\\)\n\\(\\sigma_\\mathbf{y}^2\\) is a measure of variance of the error in the regression model\n\\(\\mathbf{I}\\) is an \\(n \\times n\\) identity matrix"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#a-very-general-formulation-1",
    "href": "slides/nn_extra_slides/index.html#a-very-general-formulation-1",
    "title": "Extra stuff",
    "section": "A (very !) general formulation",
    "text": "A (very !) general formulation\n\nA hierarchical model is a generalization of the linear model such that\n\\[(\\mathbf{y}|\\mathbf{X},\\mathbf{Z}, \\boldsymbol{\\beta}, \\mathbf{b}, \\sigma_\\mathbf{y}^2)\\sim \\mathcal{MVN}(\\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z}\\mathbf{b}, \\sigma_\\mathbf{y}^2\\mathbf{I})\\]\n\n\nwhere\n\n\\(\\mathbf{y}\\) is a vector quantifying a response variable of length \\(n\\)\n\\(\\mathbf{X}\\) is a matrix of explanatory variables with \\(n\\) rows (samples) and \\(p\\) columns (explanatory variables)\n\\(\\boldsymbol{\\beta}\\) is a vector \\(p\\) pararameters weighting the importance of each explanatory variables in \\(\\mathbf{X}\\)\n\\(\\sigma_\\mathbf{y}^2\\) is a measure of variance of the error in the regression model\n\\(\\mathbf{I}\\) is an \\(n \\times n\\) identity matrix\n\n\n\n\\(\\mathbf{Z}\\) is another matrix of explanatory variables with \\(n\\) rows (samples) and \\(q\\) columns (explanatory variables)\n\\(\\mathbf{b}\\) is a vector \\(q\\) pararameters weighting the importance of each explanatory variables in \\(\\mathbf{Z}\\)"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#a-very-general-formulation-2",
    "href": "slides/nn_extra_slides/index.html#a-very-general-formulation-2",
    "title": "Extra stuff",
    "section": "A (very !) general formulation",
    "text": "A (very !) general formulation\n\nA hierarchical model is a generalization of the linear model such that\n\\[(\\mathbf{y}|\\mathbf{b} )\\sim \\mathcal{MVN}(\\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z}\\mathbf{b}, \\sigma^2\\mathbf{I})\\] What is also noticeable in this model is the conditional relationship between \\(\\mathbf{y}\\) and \\(\\mathbf{b}\\).\nSpecifically, in this formulation,\n\\[\\mathbf{b}\\sim \\mathcal{MVN}(\\mathbf{0}, \\mathbf{\\Sigma})\\] where \\(\\mathbf{\\Sigma}\\) is a covariance matrix.\nBased on this general formulation, we can now define all unconstrained hierarchical models."
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc",
    "href": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc",
    "title": "Extra stuff",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\n\nFor simplicity, let’s assume that we are monitoring the behaviour of the mallard every minutes and that we are recording whether it is\nOn land\n\n\n\n\n\nIn the water"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc-1",
    "href": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc-1",
    "title": "Extra stuff",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\nUsing this information, we can draw diagram defining how the behaviour of the mallard changes at every time steps"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc-2",
    "href": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc-2",
    "title": "Extra stuff",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\n\nIn a markov chain, we assume that we know how probable it is to go from one behaviour (land) to another (water)"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc-3",
    "href": "slides/nn_extra_slides/index.html#markov-chain-monte-carlo-mcmc-3",
    "title": "Extra stuff",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\n\nIn an MCMC, we assume that the likeliness of passing from one behaviour (land) to another (water) depends on a statistical distribution."
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#addition-and-substraction",
    "href": "slides/nn_extra_slides/index.html#addition-and-substraction",
    "title": "Extra stuff",
    "section": "Addition and Substraction",
    "text": "Addition and Substraction\n\\[\\mathbf{C} = \\mathbf{A}\\pm \\mathbf{B}\\] \\[C_{ij} = A_{ij} \\pm B_{ij}\\]\n\n\\[\\begin{bmatrix}\n                3 & 5\\\\\n                1 & -2\\\\\n            \\end{bmatrix} +\n            \\begin{bmatrix}\n                2 & 1\\\\\n                4 & -2\\\\\n            \\end{bmatrix} =\n            \\begin{bmatrix}\n                3+2 & 5+1\\\\\n                1+4 & -2-2\\\\\n            \\end{bmatrix} =\n            \\begin{bmatrix}\n                5 & 6\\\\\n                5 & -4\\\\\n            \\end{bmatrix}\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nB <- matrix(c(2, 4, 1, -2), nrow = 2, ncol = 2)\nA + B\n\n     [,1] [,2]\n[1,]    5    6\n[2,]    5   -4"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#triangular-matrix",
    "href": "slides/nn_extra_slides/index.html#triangular-matrix",
    "title": "Extra stuff",
    "section": "Triangular matrix",
    "text": "Triangular matrix\n\n\nLower triangular matrix\n\\[\\begin{bmatrix}\n        -10 & 0 & 0 & 0\\\\\n        3 & 0 & 0 & 0\\\\\n        0 & 4 & 3 & 0\\\\\n        9 & -5 & 4 & 3\\\\\n\\end{bmatrix}\\]\n\nUpper triangular matrix\n\\[\\begin{bmatrix}\n        -10 & 0 & -5 & 0\\\\\n        0 & 0 & 5 & 6\\\\\n        0 & 0 & 3 & 3\\\\\n        0 & 0 & 0 & 3\\\\\n      \\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#symmetric-matrix",
    "href": "slides/nn_extra_slides/index.html#symmetric-matrix",
    "title": "Extra stuff",
    "section": "Symmetric matrix",
    "text": "Symmetric matrix\nThe values on the above and below the diagonal are match so that \\(A = A^t\\)\n\n\\[\n\\begin{bmatrix}\n                3 & 4 & -10\\\\\n                4 & 5 & 7\\\\\n                -10 & 7 & -6\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#matrix-inversion",
    "href": "slides/nn_extra_slides/index.html#matrix-inversion",
    "title": "Extra stuff",
    "section": "Matrix inversion",
    "text": "Matrix inversion\n\nIn matrix algebra, we cannot divide a matrix by another matrix, but we can multiple it by its inverse, which gets us to the same place. Classically, the inverse of matrix \\(\\mathbf{A}\\) is defined as \\(\\mathbf{A}^{-1}\\)\nAs such, \\[\\mathbf{A}\\cdot \\mathbf{A}^{-1} = \\mathbf{I}\\]\n\n\n\nIn R\n\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\n(Ainv <- solve(A))\n\n           [,1]       [,2]\n[1,] 0.18181818  0.4545455\n[2,] 0.09090909 -0.2727273\n\nA %*% Ainv\n\n              [,1] [,2]\n[1,]  1.000000e+00    0\n[2,] -2.775558e-17    1"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#matrix-inversion-1",
    "href": "slides/nn_extra_slides/index.html#matrix-inversion-1",
    "title": "Extra stuff",
    "section": "Matrix inversion",
    "text": "Matrix inversion\nInverting a diagonal matrix\n\\[D^{-1}=\n      \\begin{bmatrix}\n        1/d_1 & 0 & \\dots & 0\\\\\n        0 &  1/d_2 & \\dots & 0\\\\\n        \\vdots & \\vdots & \\ddots & \\vdots\\\\\n        0 & 0 & \\dots &  1/d_n\\\\\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\n\nMany techniques have been proposed to estimate the parameters of a regression model.\n\n\nThe goal of this course is not to study these techniques but we will learn how to play with the estimated parameters because it will be very useful as we move along.\n\n\nThe most common way to build a regression model is\n\n\n\n\nreg <- lm(b.exemplaris ~ humidity)\n\n\n\nSay we now want to build a model’s confidence interval from a linear regression\n\n\nHow would you do it ?\n\n\nLet’s look at the model’s results, maybe it will help us"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-1",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-1",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nModel’s results\n\n\n(summaryReg <- summary(reg))\n\n\nCall:\nlm(formula = b.exemplaris ~ humidity)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.47988 -0.26475  0.00611  0.32590  1.36077 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.57389    0.04720   54.53   <2e-16 ***\nhumidity     1.10086    0.07976   13.80   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4718 on 98 degrees of freedom\nMultiple R-squared:  0.6603,    Adjusted R-squared:  0.6569 \nF-statistic: 190.5 on 1 and 98 DF,  p-value: < 2.2e-16\n\n\n\n\n\nLet’s say we want to construst the model’s confidence intervals by sampling multiple times (say 100 times!) the regression parameters, which we will assume follow Gaussian distribution. How would you do this?"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-2",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-2",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nWe could sample the model parameters but how can we do this properly?\n\nAny suggestions?"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-3",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-3",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIf we look at the estimated regression model coefficient, we can learn a few things\n\n\nsummaryReg$coefficients\n\n            Estimate Std. Error  t value     Pr(>|t|)\n(Intercept) 2.573889 0.04720304 54.52804 4.011925e-75\nhumidity    1.100865 0.07975800 13.80256 1.035796e-24\n\n\n\n\nNotably, there are uncertainty around the parameters.\n\n\nMaybe we can use this information to sample model parameters and reconstruct models across different iterations of parameters.\n\n\nLet’s give it a shot !"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-4",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-4",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIf we assume that the parameters of our particular model follow a Gaussian distribution, we can state that\n\n\\[\\beta_0 \\sim \\mathcal{N}(2.574, 0.047^2)\\] \\[\\beta_1 \\sim \\mathcal{N}(1.101, 0.080^2)\\]"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-5",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-5",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIn R, we can do this as follow\n\n# Object that include regression coefficients\nregCoef <- summaryReg$coefficients\n\n# Sample regression parameters\nbeta_0 <- rnorm(100, mean = regCoef[1,1], sd = regCoef[1,2])\nbeta_1 <- rnorm(100, mean = regCoef[2,1], sd = regCoef[2,2])"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-6",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-6",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-7",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-7",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nBut is this the right way to do it ?"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-8",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-8",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nActually, even if the model’s confidence interval look about right, they are wrong !"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-9",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-9",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nThe approach presented in the previous slide works only if we assume that the parameters are completely independent from one another.\n\nA situation that happens only in very specific circumstances.\n\n\nSo… We need to find a way to account for the non-independencies between the parameters.\n\n\nHow can we do this ? Any ideas ?"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-10",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-10",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\n\nAssuming the regression parameters are normally distributed is not a bad assumption.\n\n\n\nHowever to consider a dependencies between the parameters we need to sample them from a multivariate normal distribution where the variance of each parameter and their dependency is defined by a covariance matrix estimated specifically for the data we model.\n\n\n\n\nThe good news is that this covariance matrix is given by summary.lm function\n\n\n\n\n\n(covReg <- summaryReg$cov.unscaled)\n\n              (Intercept)      humidity\n(Intercept)  0.0100098513 -0.0005305969\nhumidity    -0.0005305969  0.0285782940"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-11",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-11",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nFor our specific model, mathematically, we assume that\n\n\\[\\begin{bmatrix}\n  \\beta_0\\\\\n  \\beta_1\\\\\n\\end{bmatrix} \\sim \\mathcal{MVN} \\left( \\begin{bmatrix}\n  2.574\\\\\n  1.101\\\\\n\\end{bmatrix}, \\begin{bmatrix}\n  0.0100 & -0.0005 \\\\\n  -0.0005 & 0.0286 \\\\\n\\end{bmatrix} \\right)\\]\n\n\nNote To present the multivariate normal distribution, we rely on matrix notation. This is our first introduction into matrix algebra. We will talk about this more into this course."
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-12",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-12",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIn R, we can sample the parameters using a multivariate normal distribution using the following code\n\n# Object that include regression coefficients\nregCoef <- summaryReg$coefficients\n\n# Sample regression parameters\nbeta <- MASS::mvrnorm(100, regCoef[,1], Sigma = covReg)"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-13",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-13",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters"
  },
  {
    "objectID": "slides/nn_extra_slides/index.html#estimating-regression-parameters-14",
    "href": "slides/nn_extra_slides/index.html#estimating-regression-parameters-14",
    "title": "Extra stuff",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters - Comparison"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#a-general-way-to-write-matrices",
    "href": "slides/05_Matrix_algebra_advanced/index.html#a-general-way-to-write-matrices",
    "title": "Matrix algebra",
    "section": "A general way to write matrices",
    "text": "A general way to write matrices\n\\[\n\\mathbf{A} = \\begin{bmatrix}\n                A_{11} & A_{12} & \\dots & A_{1j} & \\dots & A_{1n}\\\\\n                A_{21} & A_{22} & \\dots & A_{2j} & \\dots & A_{2n}\\\\\n                \\vdots & \\vdots & \\ddots & \\vdots & & \\vdots\\\\\n              A_{i1} & A_{i2} & \\dots & A_{ij} & \\dots & A_{in}\\\\\n            \\vdots & \\vdots & & \\vdots & \\ddots & \\vdots\\\\\n            A_{m1} & A_{m2} & \\dots & A_{mj} & \\dots & A_{mn}\\\\\n        \\end{bmatrix}\n\\] \\[A = \\left[a_{ij}\\right]=\\left[a_{ij}\\right]_{m\\times n}\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#the-transpose-of-a-matrix",
    "href": "slides/05_Matrix_algebra_advanced/index.html#the-transpose-of-a-matrix",
    "title": "Matrix algebra",
    "section": "The transpose of a matrix",
    "text": "The transpose of a matrix\n\n\n\n\\[A = \\begin{bmatrix}\n          5 & -6 & 4 & -4\\\\\n        \\end{bmatrix}\n\\]\n\\[B = \\begin{bmatrix}\n          -8\\\\\n          9\\\\\n          -2\\\\\n        \\end{bmatrix}\n\\]\n\\[C = \\begin{bmatrix}\n          -4 & 1\\\\\n          2 & -5\\\\\n        \\end{bmatrix}\n\\]\n\n\\[A^t=\\begin{bmatrix}\n          5\\\\\n          -6\\\\\n          4\\\\\n          -4\\\\\n        \\end{bmatrix}\n\\]\n\\[B^t =\\begin{bmatrix}\n          -8 & 9 & -2\\\\\n        \\end{bmatrix}\n\\]\n\\[C^t =\\begin{bmatrix}\n          -4 & 2\\\\\n          1 & -5\\\\\n        \\end{bmatrix}\n\\]\n\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nA\n\n     [,1] [,2]\n[1,]    3    5\n[2,]    1   -2\n\nt(A)\n\n     [,1] [,2]\n[1,]    3    1\n[2,]    5   -2"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#addition-and-substraction",
    "href": "slides/05_Matrix_algebra_advanced/index.html#addition-and-substraction",
    "title": "Matrix algebra",
    "section": "Addition and Substraction",
    "text": "Addition and Substraction\n\\[\\mathbf{C} = \\mathbf{A}\\pm \\mathbf{B}\\] \\[C_{ij} = A_{ij} \\pm B_{ij}\\]\n\n\\[\\begin{bmatrix}\n                3 & 5\\\\\n                1 & -2\\\\\n            \\end{bmatrix} +\n            \\begin{bmatrix}\n                2 & 1\\\\\n                4 & -2\\\\\n            \\end{bmatrix} =\n            \\begin{bmatrix}\n                3+2 & 5+1\\\\\n                1+4 & -2-2\\\\\n            \\end{bmatrix} =\n            \\begin{bmatrix}\n                5 & 6\\\\\n                5 & -4\\\\\n            \\end{bmatrix}\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nB <- matrix(c(2, 4, 1, -2), nrow = 2, ncol = 2)\nA + B\n\n     [,1] [,2]\n[1,]    5    6\n[2,]    5   -4"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#multiplying-a-matrix-by-a-scalar",
    "href": "slides/05_Matrix_algebra_advanced/index.html#multiplying-a-matrix-by-a-scalar",
    "title": "Matrix algebra",
    "section": "Multiplying a matrix by a scalar",
    "text": "Multiplying a matrix by a scalar\n\\[\\mathbf{B} = c\\mathbf{A}\\] \\[B_{ij} = cA_{ij}\\]\n\n\\[\n            0.3 \\begin{bmatrix}\n                3 & 5\\\\\n                1 & -2\\\\\n            \\end{bmatrix} =  \n            \\begin{bmatrix}\n                0.9 & 1.5\\\\\n                0.3 & -0.6\\\\\n            \\end{bmatrix}\n\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nc <- 0.3\nc*A \n\n     [,1] [,2]\n[1,]  0.9  1.5\n[2,]  0.3 -0.6"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#matrix-multiplications-not-divisions",
    "href": "slides/05_Matrix_algebra_advanced/index.html#matrix-multiplications-not-divisions",
    "title": "Matrix algebra",
    "section": "Matrix multiplications (not divisions!)",
    "text": "Matrix multiplications (not divisions!)\n\\[\\mathbf{C} = \\mathbf{A} \\cdot \\mathbf{B}\\]\n\\[C_{ik} = \\sum^{n}_{j=1}A_{ij}B_{jk}\\]\nRules\nAssociative: \\(\\mathbf{A}(\\mathbf{B}\\mathbf{C}) = (\\mathbf{A}\\mathbf{B})\\mathbf{C}\\)\nDistributive: \\(\\mathbf{A}(\\mathbf{B} + \\mathbf{C}) = \\mathbf{A}\\mathbf{B}+\\mathbf{A}\\mathbf{C}\\)\nNot commutative: \\(\\mathbf{A}\\mathbf{B} \\neq \\mathbf{B}\\mathbf{A}\\)"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#inner-product",
    "href": "slides/05_Matrix_algebra_advanced/index.html#inner-product",
    "title": "Matrix algebra",
    "section": "Inner product",
    "text": "Inner product\n\\[(\\mathbf{Ax})_i=\\sum_{j=1}^{n}A_{ij}x_j\\]\n\n\\[\n  \\begin{bmatrix}\n    3 & 5\\\\\n    1 & -2\\\\\n  \\end{bmatrix}\n  \\begin{bmatrix}\n    2\\\\ 5\\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    (3, 5) \\cdot (2, 5)\\\\\n    (1, -2) \\cdot (2, 5) \\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    3 \\times 2 + 5 \\times 5\\\\\n    1 \\times 2 -2 \\times 5\\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    31\\\\\n    -8\\\\\n  \\end{bmatrix}\n\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nx <- matrix(c(2,5), nrow = 2, ncol = 1)\nA %*% x\n\n     [,1]\n[1,]   31\n[2,]   -8"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#identity-matrix",
    "href": "slides/05_Matrix_algebra_advanced/index.html#identity-matrix",
    "title": "Matrix algebra",
    "section": "Identity matrix",
    "text": "Identity matrix\nThe identity matrix is a square matrix where all values of its diagonal are 0 except the diagonal values which are all 1s.\n\n\n\\[\n\\mathbf{I}=\\begin{bmatrix}\n                1 & 0 & 0\\\\\n                0 & 1 & 0\\\\\n                0 & 0 & 1\\\\\n        \\end{bmatrix}\n\\]\n\nThe identity matrix is important because\n\\[\\mathbf{A} \\cdot \\mathbf{I}_n = \\mathbf{A}\\] or\n\\[\\mathbf{I}_m \\cdot \\mathbf{A} = \\mathbf{A}\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#diagonal-matrix",
    "href": "slides/05_Matrix_algebra_advanced/index.html#diagonal-matrix",
    "title": "Matrix algebra",
    "section": "Diagonal matrix",
    "text": "Diagonal matrix\nThe diagonal matrix is a square matrix where all values of its diagonal are 0 except the ones on the diagonal.\n\n\\[D=\n      \\begin{bmatrix}\n        d_1 & 0 & \\dots & 0\\\\\n        0 & d_2 & \\dots & 0\\\\\n        \\vdots & \\vdots & \\ddots & \\vdots\\\\\n        0 & 0 & \\dots & d_n\\\\\n\\end{bmatrix}\\]\nAn example\n\n\\[\n\\begin{bmatrix}\n                -1 & 0 & 0\\\\\n                0 & 0 & 0\\\\\n                0 & 0 & 6\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#triangular-matrix",
    "href": "slides/05_Matrix_algebra_advanced/index.html#triangular-matrix",
    "title": "Matrix algebra",
    "section": "Triangular matrix",
    "text": "Triangular matrix\n\n\nLower triangular matrix\n\\[\\begin{bmatrix}\n        -10 & 0 & 0 & 0\\\\\n        3 & 0 & 0 & 0\\\\\n        0 & 4 & 3 & 0\\\\\n        9 & -5 & 4 & 3\\\\\n\\end{bmatrix}\\]\n\nUpper triangular matrix\n\\[\\begin{bmatrix}\n        -10 & 0 & -5 & 0\\\\\n        0 & 0 & 5 & 6\\\\\n        0 & 0 & 3 & 3\\\\\n        0 & 0 & 0 & 3\\\\\n      \\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#symmetric-matrix",
    "href": "slides/05_Matrix_algebra_advanced/index.html#symmetric-matrix",
    "title": "Matrix algebra",
    "section": "Symmetric matrix",
    "text": "Symmetric matrix\nThe values on the above and below the diagonal are match so that \\(A = A^t\\)\n\n\\[\n\\begin{bmatrix}\n                3 & 4 & -10\\\\\n                4 & 5 & 7\\\\\n                -10 & 7 & -6\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#matrix-inversion",
    "href": "slides/05_Matrix_algebra_advanced/index.html#matrix-inversion",
    "title": "Matrix algebra",
    "section": "Matrix inversion",
    "text": "Matrix inversion\n\nIn matrix algebra, we cannot divide a matrix by another matrix, but we can multiple it by its inverse, which gets us to the same place. Classically, the inverse of matrix \\(\\mathbf{A}\\) is defined as \\(\\mathbf{A}^{-1}\\)\nAs such, \\[\\mathbf{A}\\cdot \\mathbf{A}^{-1} = \\mathbf{I}\\] In R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\n(Ainv <- solve(A))\n\n           [,1]       [,2]\n[1,] 0.18181818  0.4545455\n[2,] 0.09090909 -0.2727273\n\nA %*% Ainv\n\n              [,1] [,2]\n[1,]  1.000000e+00    0\n[2,] -2.775558e-17    1"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#matrix-inversion-1",
    "href": "slides/05_Matrix_algebra_advanced/index.html#matrix-inversion-1",
    "title": "Matrix algebra",
    "section": "Matrix inversion",
    "text": "Matrix inversion\nInverting a diagonal matrix\n\\[D^{-1}=\n      \\begin{bmatrix}\n        1/d_1 & 0 & \\dots & 0\\\\\n        0 &  1/d_2 & \\dots & 0\\\\\n        \\vdots & \\vdots & \\ddots & \\vdots\\\\\n        0 & 0 & \\dots &  1/d_n\\\\\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#cholesky-decomposition",
    "href": "slides/05_Matrix_algebra_advanced/index.html#cholesky-decomposition",
    "title": "Matrix algebra",
    "section": "Cholesky decomposition",
    "text": "Cholesky decomposition\n\nThe Cholesky decomposition allows to decompose a matrix in a triangular, which, when multiplied by its transposed will allow us to recover the initial matrix.\nIn coloquial terms, the Cholesky decomposition is the equivalent of a square root for matrice\nIn math terms the Cholesky decomposition is defined as \\[\\mathbf{A} = \\mathbf{L}\\mathbf{L}^t\\] Example\n\\[\n        \\begin{bmatrix}\n            1 & 1 & 1\\\\\n            1 & 5 & 5\\\\\n            1 & 5 & 14\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            1 & 0 & 0\\\\\n            1 & 2 & 0\\\\\n            1 & 2 & 3 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            1 & 1 & 1\\\\\n            0 & 2 & 2\\\\\n            0 & 0 & 3 \\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/05_Matrix_algebra_advanced/index.html#cholesky-decomposition-1",
    "href": "slides/05_Matrix_algebra_advanced/index.html#cholesky-decomposition-1",
    "title": "Matrix algebra",
    "section": "Cholesky decomposition",
    "text": "Cholesky decomposition\nWhy is it useful ?\nThere are actually two main reasons :\n\nWorking with triangular matrices is computationally more efficient\nIt can be used to rescale matrices and make MCMC algorithms converge more easily"
  },
  {
    "objectID": "slides/01_Data/index.html#illustrative-datasets",
    "href": "slides/01_Data/index.html#illustrative-datasets",
    "title": "Data used for this course",
    "section": "Illustrative datasets",
    "text": "Illustrative datasets\nTo illustrate the different models and methods we will discuss in this course, we will rely on a few data sets, which are directly available in different R package\n\n\nmite, mite.env and mite.xy available in the vegan R package\n\n\n\n\npenguins available in the palmerpenguins R package\n\n\n\nThese datasets are practical because they are manageable in size and will allow you to see how to work out the different example presented in this course.\n\n\nLet’s look at them in more details"
  },
  {
    "objectID": "slides/01_Data/index.html#oribatid-mite-data",
    "href": "slides/01_Data/index.html#oribatid-mite-data",
    "title": "Data used for this course",
    "section": "Oribatid mite data",
    "text": "Oribatid mite data\nAside from being very interesting, this dataset has been sample on the southern shore of Lac Geai (a few minutes walk from here !)\n\nSampling was carried out in June 1989 on the partially floating vegetation mat surrounding the lake from the forest border to the free water by Daniel Borcard."
  },
  {
    "objectID": "slides/01_Data/index.html#oribatid-mite-data-1",
    "href": "slides/01_Data/index.html#oribatid-mite-data-1",
    "title": "Data used for this course",
    "section": "Oribatid mite data",
    "text": "Oribatid mite data"
  },
  {
    "objectID": "slides/01_Data/index.html#oribatid-mite-data-2",
    "href": "slides/01_Data/index.html#oribatid-mite-data-2",
    "title": "Data used for this course",
    "section": "Oribatid mite data",
    "text": "Oribatid mite data\nOribatid mites are small (usually ranging in size from 0.2 to 1.4 mm) invertebrates that are part of the Arachnida class (so they have 8 legs).\n\n\nIn the mite data, 35 morphospecies were identified and counted across 70 samples."
  },
  {
    "objectID": "slides/01_Data/index.html#sites-coordinates",
    "href": "slides/01_Data/index.html#sites-coordinates",
    "title": "Data used for this course",
    "section": "Sites coordinates",
    "text": "Sites coordinates"
  },
  {
    "objectID": "slides/01_Data/index.html#vegetation-cover",
    "href": "slides/01_Data/index.html#vegetation-cover",
    "title": "Data used for this course",
    "section": "Vegetation cover",
    "text": "Vegetation cover"
  },
  {
    "objectID": "slides/01_Data/index.html#microtopography-and-shrub-cover",
    "href": "slides/01_Data/index.html#microtopography-and-shrub-cover",
    "title": "Data used for this course",
    "section": "Microtopography and shrub cover",
    "text": "Microtopography and shrub cover"
  },
  {
    "objectID": "slides/01_Data/index.html#substrate-density-and-water-content",
    "href": "slides/01_Data/index.html#substrate-density-and-water-content",
    "title": "Data used for this course",
    "section": "Substrate density and water content",
    "text": "Substrate density and water content"
  },
  {
    "objectID": "slides/01_Data/index.html#getting-the-data",
    "href": "slides/01_Data/index.html#getting-the-data",
    "title": "Data used for this course",
    "section": "Getting the data",
    "text": "Getting the data\n\n\nlibrary(vegan)\ndata(mite)\ndata(mite.env)\nView(mite)\nView(mite.env)"
  },
  {
    "objectID": "slides/01_Data/index.html#palmer-penguins",
    "href": "slides/01_Data/index.html#palmer-penguins",
    "title": "Data used for this course",
    "section": "Palmer penguins",
    "text": "Palmer penguins\n\nThe Palmer Archipelago penguins. Artwork by @allison_horst\nThese data were collected from 2007 to 2009 by Dr. Kristen Gorman with the Palmer Station Long Term Ecological Research Program, part of the US Long Term Ecological Research Network.\n\n\n\nThe data were imported directly from the Environmental Data Initiative (EDI) Data Portal, and are available for use by CC0 license (“No Rights Reserved”) in accordance with the Palmer Station Data Policy. (Gorman, Williams, and Fraser 2014; Horst, Hill, and Gorman 2020)"
  },
  {
    "objectID": "slides/01_Data/index.html#a-handy-dataset-of-three-groups",
    "href": "slides/01_Data/index.html#a-handy-dataset-of-three-groups",
    "title": "Data used for this course",
    "section": "A handy dataset of three groups",
    "text": "A handy dataset of three groups"
  },
  {
    "objectID": "slides/01_Data/index.html#behold-simpsons-paradox",
    "href": "slides/01_Data/index.html#behold-simpsons-paradox",
    "title": "Data used for this course",
    "section": "Behold: Simpson’s Paradox!",
    "text": "Behold: Simpson’s Paradox!"
  },
  {
    "objectID": "slides/01_Data/index.html#behold-simpsons-paradox-1",
    "href": "slides/01_Data/index.html#behold-simpsons-paradox-1",
    "title": "Data used for this course",
    "section": "Behold: Simpson’s Paradox!",
    "text": "Behold: Simpson’s Paradox!"
  },
  {
    "objectID": "slides/01_Data/index.html#theres-lots-more",
    "href": "slides/01_Data/index.html#theres-lots-more",
    "title": "Data used for this course",
    "section": "There’s lots more!",
    "text": "There’s lots more!\n\n\nlibrary(palmerpenguins)\nView(penguins)\nView(penguins_raw)\n\n\nand also see the official site: https://allisonhorst.github.io/palmerpenguins/\n\n\n\n\n\n\n\nGorman, Kristen B., Tony D. Williams, and William R. Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLOS ONE 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081.\n\n\nHorst, Allison Marie, Alison Presmanes Hill, and Kristen B Gorman. 2020. Palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data. https://doi.org/10.5281/zenodo.3960218."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#simple-hierarchical-model",
    "href": "slides/06_Simple_hierarchical_model/index.html#simple-hierarchical-model",
    "title": "‘Simple’ hierarchical models",
    "section": "“Simple” hierarchical model",
    "text": "“Simple” hierarchical model\n\nHere, we use the term “simple” in a rather loose way to discuss hierarchical models on one parameter without any constrains, whether they are spatial, temporal, phylogenetic or others.\n\n\nFuthermore, for most of this lecture, we will focus on models with a Gaussian error term to develop the underlying theory.\n\n\nWhen we will have done this, it will be reasonably straight forward to move to non-Gaussian hierarchical model."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#the",
    "href": "slides/06_Simple_hierarchical_model/index.html#the",
    "title": "‘Simple’ hierarchical models",
    "section": "The “|”",
    "text": "The “|”\n\n\nMost of you have probably already used the packages lme4 or brms to build hierarchical models and so you have used the | to include a hierachy in your model.\n\n\n\n\nBut do you know what the underlying mathematical structure of the model you built look like ? Does it really answer the question you were asking ?\n\n\n\n\n\n\n\n\n\nLet’s look at different lme4 models to learn about some basic (and not so basic!) hierarchical models."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#a-bit-of-notation",
    "href": "slides/06_Simple_hierarchical_model/index.html#a-bit-of-notation",
    "title": "‘Simple’ hierarchical models",
    "section": "A bit of notation",
    "text": "A bit of notation\n\n\nBefore we get into writing math, we need to define a bit of notation in addition of the one we have used so far.\n\n\n\n\nSpecifically, when define a hierarchy in a model, it is common to do this using at least one factor. Mathematically, we will define the different level of a factor in a model by a subscript.\nWe will use square brackets to define the sample.\n\n\n\nExample\n\n\\[\\mathbf{Z}_{f[i]}\\] This means that, within \\(\\mathbf{Z}\\), we focus on the \\(i^{\\text{th}}\\) factor \\(f\\).\n\n\n\nNote The \\(i^{\\text{th}}\\) sample of factor \\(f\\) maybe associated to any level of factor \\(f\\)."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercept",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercept",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the intercept",
    "text": "Hierarchy on the intercept\n\n\nlme4 notation used y ~ (1 | f) or y ~ 1 + (1 | f)\n\n\n\n\nThis model assumes there is a hierarchy solely on the intercept.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f},\\sigma^2\\mathbf{I})\\]\n\n\n\n\nor\n\\[y_i = b_{{f[i]}} + \\varepsilon \\quad \\forall\\quad i = 1\\dots n\\]\n\n\n\n\nwhere\n\\[\\mathbf{b}_f \\sim \\mathcal{N}(\\mu_f, \\sigma^2_f)\\]"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercept-1",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercept-1",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the intercept",
    "text": "Hierarchy on the intercept"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the slopes",
    "text": "Hierarchy on the slopes\n\nlme4 notation : y ~ 1 + (x | f)\n\n\n\nThis model assumes there is a hierarchy on the parameters associated to variable x.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\beta_0 + \\mathbf{z}\\mathbf{b}_{f},\\sigma^2\\mathbf{I})\\]\n\n\n\n\nor\n\\[y_i = \\beta_0 + b_{f[i]}z_i + \\varepsilon \\quad\\forall\\quad i = 1\\dots n\\]\n\n\n\n\nwhere\n\\(\\mathbf{z}\\) is an explanatory variable, \\(z_i\\) the \\(i^{\\text{th}}\\) values of \\(\\mathbf{z}\\) and\n\\[\\mathbf{b}_f \\sim \\mathcal{N}(\\mu_f, \\sigma^2_f)\\]"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes-1",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes-1",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the slopes",
    "text": "Hierarchy on the slopes"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-intercept-and-slope",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-intercept-and-slope",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on intercept and slope",
    "text": "Hierarchy on intercept and slope\n\nMathematically speaking, what are the differences between having a hierarchy on the intercept and a hierarchy on the slope ? Any idea ?"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-intercept-and-slope-1",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-intercept-and-slope-1",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on intercept and slope",
    "text": "Hierarchy on intercept and slope\nAnswer : Very little !\n\nActually, if we return to the way \\(\\mathbf{b}\\) is defined we see that in both case it is defined as\n\\[\\mathbf{b}_f \\sim \\mathcal{N}(\\mu_f, \\sigma^2_f)\\] with the sole difference that \\(\\mathbf{b}\\) is linked to an explanatory variable when the hierarchy is on the slope, while when the hierarchy is on the intercept it is not linked to any explanatory variable.\n\n\nWell… Actually… When a hierarchy is applied on the intercept it is technically associated to a constant explanatory variable."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\n\nA common question that often gets asked is :\n\n\n“How many level is enough ?”\n\n\nThis is a simple questions that sadly does not have a simple answer."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-1",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-1",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nIn these types of models we are interested in estimating the variance parameter \\(\\sigma^2_f\\) in\n\\[\\mathbf{b}_f \\sim \\mathcal{N}(\\mu_f, \\sigma^2_f)\\] to get the best estimation of \\(\\mathbf{b}\\).\n\nSo, another way to ask this question is: “What is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?”\n\n\nHowever, in the context of how we defined hierarchical models, a sample amounts to being the level of a factor."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-2",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-2",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nWhat is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?\n\nIs 3 enough ?\n\n\n\n\n\n\n\n\n\n\n\n\nTrue variance : 0.25\nEstimated variance : 0.234"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-3",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-3",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nWhat is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?\nMaybe 5 ?\n\n\n\n\n\n\n\n\n\n\n\n\nTrue variance : 0.25\nEstimated variance : 0.12"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-4",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-4",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nWhat is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?\nOr 10 ?\n\n\n\n\n\n\n\n\n\n\n\n\nTrue variance : 0.25\nEstimated variance : 0.174"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-5",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-5",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nWhat is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?\nOr 50 ?\n\n\n\n\n\n\n\n\n\n\n\n\nTrue variance : 0.25\nEstimated variance : 0.331"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-6",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-6",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nWhat is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?\nOr 100 ?\n\n\n\n\n\n\n\n\n\n\n\n\nTrue variance : 0.25\nEstimated variance : 0.271"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-7",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-7",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nWhat is the minimum number of samples needed to properly estimate the variance of a Gaussian distribution?\nOr 1000 ?\n\n\n\n\n\n\n\n\n\n\n\n\nTrue variance : 0.25\nEstimated variance : 0.251"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-8",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-8",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nThere is a consensus among researchers working intimately with hierarchical models that when the interest is to properly estimate the variance parameter \\(\\sigma^2\\), 5 or 6 levels is the extreme minimum.\n\n\nIn the book Richly Parameterized Linear Models: Additive, Time Series, and Spatial Models Using Random Effects, James S. Hodges (2016) makes this very thoughtful statement :\n\n“Treating factors with small numbers of levels as random will in the best case lead to very small and/or imprecise estimates of random effects; in the worst case it will lead to various numerical difficulties such as lack of convergence, zero variance estimates, etc.”"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-9",
    "href": "slides/06_Simple_hierarchical_model/index.html#how-many-levels-9",
    "title": "‘Simple’ hierarchical models",
    "section": "How many levels ?",
    "text": "How many levels ?\nSo, what to do if the number of level is not high enough for your comfort ?\n\nYou can still use the hierarchy in your model but focus on the mean of the levels instead of the variance.\n\n\nHow does this translate mathematically with what we have seen so far ?"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercepts-mean",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercepts-mean",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the intercept’s mean",
    "text": "Hierarchy on the intercept’s mean\n\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\boldsymbol{\\beta}_{f},\\sigma_\\mathbf{y}^2\\mathbf{I})\\] or\n\\[y_i = \\beta_{f[i]} + \\varepsilon \\quad \\forall\\quad i = 1\\dots n\\]\n\n\n\nIn this model, we assume that \\(\\boldsymbol{\\beta}_{f}\\) is distributed as\n\\[\\boldsymbol{\\beta}_{f} \\sim \\mathcal{N}(\\mu_{f}, \\sigma^2_{f})\\]\n\n\n\n\nThis means that all samples among the levels of factor \\(f\\) are used to estimate \\(\\boldsymbol{\\beta}_{f}\\).\n\n\n\n\nBy developping our model this way, we focus on estimating the mean of groups in the hierarchy instead of only the variance."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercepts-mean-1",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercepts-mean-1",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the intercept’s mean",
    "text": "Hierarchy on the intercept’s mean\nLet’s take a deeper look at \\[\\boldsymbol{\\beta}_{f} \\sim \\mathcal{N}(\\mu_{f}, \\sigma^2_{f})\\]\n\nWhen we study this way of sampling \\(\\boldsymbol{\\beta}_{f}\\), although our interest is more on \\(\\mu_{f}\\), we also have to acount for the variance term \\(\\sigma^2_{f}\\).\n\n\nNote: This is essentially the same thing as a one-way analysis of variance."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercepts-mean-2",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-intercepts-mean-2",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the intercept’s mean",
    "text": "Hierarchy on the intercept’s mean"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes-mean",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes-mean",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the slope’s mean",
    "text": "Hierarchy on the slope’s mean\n\n\nDevelopping a hierarchy on the slope’s mean translate mathematically in a very similar way as it does for the intercept.\n\n\n\n\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\boldsymbol{\\beta}_0+\\mathbf{X}\\boldsymbol{\\beta}_{f},\\sigma_\\mathbf{y}^2\\mathbf{I})\\] or\n\\[y_i = \\beta_0 + \\beta_{f[i]}x_i + \\varepsilon \\quad \\forall\\quad i = 1\\dots n\\]\n\n\n\n\nIn this model, we assume that \\(\\boldsymbol{\\beta}_{f}\\) is distributed as\n\\[\\boldsymbol{\\beta}_{f} \\sim \\mathcal{N}(\\mu_{f}, \\sigma^2_{f})\\]\n\n\n\n\nThis means that all the samples among the levels of factor \\(f\\) are used to estimate \\(\\boldsymbol{\\beta}_{f}\\).\nBy developping our model this way, we focus on estimating the average slope for each group in the hierarchy instead of only the variance."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes-mean-1",
    "href": "slides/06_Simple_hierarchical_model/index.html#hierarchy-on-the-slopes-mean-1",
    "title": "‘Simple’ hierarchical models",
    "section": "Hierarchy on the slope’s mean",
    "text": "Hierarchy on the slope’s mean"
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#tracking-the-estimated-parameters",
    "href": "slides/06_Simple_hierarchical_model/index.html#tracking-the-estimated-parameters",
    "title": "‘Simple’ hierarchical models",
    "section": "Tracking the estimated parameters",
    "text": "Tracking the estimated parameters\n\n\nAs can be seen, it is important in hierarchical model to track the different parameters that are estimated to make sure we can make proper inferences with our model.\n\n\n\n\nHowever, we need to be careful because the notation used can play tricks on us. This is especially true when using matrix notation.\n\n\n\n\nFor example, in\n\\[\\mathbf{b}_{f}\\sim \\mathcal{MVN}(\\mathbf{0}, \\mathbf{\\Sigma})\\] the number of levels are not explicitly defined and it is not clear if \\(\\mathbf{\\Sigma}\\) includes the same variance value on the diagonal or different ones and whether the off diagonal elements are 0 or not.\n\n\n\n\nIn any case, make sure to keep track of the estimated parameters so that you can better understand the limits of the model you are building and using."
  },
  {
    "objectID": "slides/06_Simple_hierarchical_model/index.html#choosing-the-right-model",
    "href": "slides/06_Simple_hierarchical_model/index.html#choosing-the-right-model",
    "title": "‘Simple’ hierarchical models",
    "section": "Choosing the right model",
    "text": "Choosing the right model\n\nAlthough these different models are mathematically quite similar, they approach very different biological questions.\n\n\nA comparison of the different figures caricaturizing how each model works should give a good insight about what each model can do.\n\n\nIt is thus important to make sure you design your biological question well so that deciding on which model to use is reasonably straight forward."
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#hierarchical-models-so-far",
    "href": "slides/09_Gaussian_process/index.html#hierarchical-models-so-far",
    "title": "Gaussian process",
    "section": "Hierarchical models so far",
    "text": "Hierarchical models so far\n\nAn already (very !) general formulation\n\nSo far, we have built hierarchical models that can be integrated into the following framework.\n\n\n\n\\[(\\mathbf{y}|\\mathbf{X},\\mathbf{Z}, \\boldsymbol{\\beta}, \\mathbf{b}, \\sigma_\\mathbf{y}^2)\\sim \\mathcal{MVN}(\\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z}\\mathbf{b}, \\sigma_\\mathbf{y}^2\\mathbf{I})\\]\n\n\n\n\nwhere\n\\[\\mathbf{b}\\sim \\mathcal{MVN}(\\mu, \\mathbf{\\Sigma})\\]\n\n\n\n\n\n\\(\\mathbf{y}\\) is a vector quantifying a response variable of length \\(n\\)\n\\(\\mathbf{X}\\) is a matrix of explanatory variables with \\(n\\) rows (samples) and \\(p\\) columns (explanatory variables)\n\\(\\boldsymbol{\\beta}\\) is a vector \\(p\\) pararameters weighting the importance of each explanatory variables in \\(\\mathbf{X}\\)\n\\(\\sigma_\\mathbf{y}^2\\) is a measure of variance of the error in the regression model\n\\(\\mathbf{I}\\) is an \\(n \\times n\\) identity matrix\n\n\n\n\\(\\mathbf{Z}\\) is designed matrix of “explanatory” variables with \\(n\\) rows (samples) and \\(q\\) columns\n\\(\\mu\\) is a vector defining the average importance of hierarchical parameters\n\\(\\mathbf{\\Sigma}\\) is a matrix defining the covariance structure of hierarchical parameters"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#hierarchical-models-so-far-1",
    "href": "slides/09_Gaussian_process/index.html#hierarchical-models-so-far-1",
    "title": "Gaussian process",
    "section": "Hierarchical models so far",
    "text": "Hierarchical models so far\nAn already (very !) general formulation\nAnother way to write this generalized formulation is\n\\[\\mathbf{y}_i = \\mathbf{X}_{ij} \\boldsymbol{\\beta}_j + \\mathbf{Z}_{ik}\\mathbf{b}_{k} + \\boldsymbol{\\varepsilon}_{ij}\\] where\n\\[\\mathbf{b}\\sim \\mathcal{MVN}(\\mu, \\mathbf{\\Sigma})\\] and\n\\[\\varepsilon \\sim \\mathcal{N}(0, \\sigma^2)\\]"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#even-more-complex-hierarchical-models",
    "href": "slides/09_Gaussian_process/index.html#even-more-complex-hierarchical-models",
    "title": "Gaussian process",
    "section": "Even more complex hierarchical models!?",
    "text": "Even more complex hierarchical models!?\nSo far we have seen many (!) versions of hierarchical models, which got increasingly more complex in their structure.\n\nLet’s continue on that slippery slope…\n\n\nWould you know how to constraint (spatially, temporally, phylogenetically, etc.) such a model ?"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#even-more-complex-hierarchical-models-1",
    "href": "slides/09_Gaussian_process/index.html#even-more-complex-hierarchical-models-1",
    "title": "Gaussian process",
    "section": "Even more complex hierarchical models!",
    "text": "Even more complex hierarchical models!\nIf we get back to a model that has a single hierarchy on the intercept such that\n\\[\\mathbf{y} \\sim \\mathcal{N}(\\mathbf{b},\\sigma^2)\\]\n\nwhere\n\\[\\mathbf{b} \\sim \\mathcal{N}(\\mu, \\sigma^2)\\]\n\n\nIf we want to account for a constraint on the previously presented model we can rewrite the equation fo \\(\\mathbf{b}\\) as\n\\[\\mathbf{b} \\sim \\mathcal{N}\\left(\\mu, f(d)\\right)\\]\n\n\nwhere\n\n\\(f(d)\\) is a function of a distance matrix"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#even-more-complex-hierarchical-models-2",
    "href": "slides/09_Gaussian_process/index.html#even-more-complex-hierarchical-models-2",
    "title": "Gaussian process",
    "section": "Even more complex hierarchical models!",
    "text": "Even more complex hierarchical models!\n\\[\\mathbf{b} \\sim \\mathcal{N}\\left(\\mu, f(d)\\right)\\]\n\nWhat this equation means conceptually is that the variance associated to \\(\\mathbf{b}\\) is not a constant, it changes based on distance (across space, time, phylogeny, etc.). This is known as a Gaussian process."
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#a-bit-of-history",
    "href": "slides/09_Gaussian_process/index.html#a-bit-of-history",
    "title": "Gaussian process",
    "section": "A bit of history",
    "text": "A bit of history\n\nIn statistics, Gaussian processes have a unique history. The development of this type of model is closely linked to the estimation of mineral deposits.\n\n\nSpatial Gaussian processes are also called geostatistical models, where the prefix geo refers to geology, not geography, as one may be led to believe.\n\n\nAs mining engineers are at the root of the development of Gaussian processes, the language associated with this type of model is influenced by this field."
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#a-bit-of-history-1",
    "href": "slides/09_Gaussian_process/index.html#a-bit-of-history-1",
    "title": "Gaussian process",
    "section": "A bit of history",
    "text": "A bit of history\nGaussian processes have been developed in the 1950s by\n\n\n\n\n\n\n\n\nDaniel G. Krige (1919–2013)\n\n\n\n\n\n\n\n\nGeorges Mathéron (1930–2000)"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#assumption-with-gaussian-processes",
    "href": "slides/09_Gaussian_process/index.html#assumption-with-gaussian-processes",
    "title": "Gaussian process",
    "section": "Assumption with Gaussian processes",
    "text": "Assumption with Gaussian processes\n\nIn general, when defining a Gaussian process, we make the following assumptions:\n\n\n\nThe closer two sites are, the more similar they are.\n\n\n\n\nAfter a certain distance, it is no longer necessary to consider that a site influences another site.\n\n\n\nNote The distance of influence of a site on another can be different depending on what is being studied, where it is being studied and when it is being studied"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fd",
    "href": "slides/09_Gaussian_process/index.html#fd",
    "title": "Gaussian process",
    "section": "\\(f(d)\\)",
    "text": "\\(f(d)\\)\n\nSo, what does \\(f(d)\\) looks like exactly ?\n\n\nIn theory, \\(f(d)\\) can be anything…\n\n\nHowever, in practice, there are particularities of the functions that are defined by the assumptions we impose on our model.\n\n\nAs such, here is a classic structure these variance function take"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fd---a-bit-of-vocabulary",
    "href": "slides/09_Gaussian_process/index.html#fd---a-bit-of-vocabulary",
    "title": "Gaussian process",
    "section": "\\(f(d)\\) - A bit of vocabulary",
    "text": "\\(f(d)\\) - A bit of vocabulary\n\nNugget effect"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fd---a-bit-of-vocabulary-1",
    "href": "slides/09_Gaussian_process/index.html#fd---a-bit-of-vocabulary-1",
    "title": "Gaussian process",
    "section": "\\(f(d)\\) - A bit of vocabulary",
    "text": "\\(f(d)\\) - A bit of vocabulary\n\nRange"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fd---a-bit-of-vocabulary-2",
    "href": "slides/09_Gaussian_process/index.html#fd---a-bit-of-vocabulary-2",
    "title": "Gaussian process",
    "section": "\\(f(d)\\) - A bit of vocabulary",
    "text": "\\(f(d)\\) - A bit of vocabulary\n\nSill"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fd---types-of-functions",
    "href": "slides/09_Gaussian_process/index.html#fd---types-of-functions",
    "title": "Gaussian process",
    "section": "\\(f(d)\\) - types of functions",
    "text": "\\(f(d)\\) - types of functions\n\nMany functions have been proposed have this general shape\n\n\nIn this lecture, we will use the exponential function\n\\[C_0 + C_1 \\left(1-e^{-d/a}\\right)\\]\n\n\nwhere\n\n\\(C_0\\) is the nugget effect\n\n\n\n\n\\(C_1\\) is the sill\n\n\n\n\n\\(d\\) is the distance\n\n\n\n\n\\(a\\) is the range"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#exponential-function",
    "href": "slides/09_Gaussian_process/index.html#exponential-function",
    "title": "Gaussian process",
    "section": "Exponential function",
    "text": "Exponential function\nNugget : 2 – Sill : 5 – Range : 10"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#an-illustrative-example",
    "href": "slides/09_Gaussian_process/index.html#an-illustrative-example",
    "title": "Gaussian process",
    "section": "An illustrative example",
    "text": "An illustrative example\n\nTo present how Gaussian processes can be used, let’s study the distribution of Sylvilagus oviparus in Montréal.\n\n\nA few characteristics of Sylvilagus oviparus\n\nThey are found mainly in urban parks of Montréal and are very efficient at hiding in hollow trees and burrows.\n\n\n\nThey lay their eggs (often pastel-coloured) on the Sunday following the first full moon after the spring equinox.\n\n\n\n\nThey move well in an urban setting and are not affected by the level of urbanisation"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#a-typical-member-of-the-species",
    "href": "slides/09_Gaussian_process/index.html#a-typical-member-of-the-species",
    "title": "Gaussian process",
    "section": "A typical member of the species",
    "text": "A typical member of the species"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#distribution-of-s.-oviparus-in-montréal",
    "href": "slides/09_Gaussian_process/index.html#distribution-of-s.-oviparus-in-montréal",
    "title": "Gaussian process",
    "section": "Distribution of S. oviparus in Montréal",
    "text": "Distribution of S. oviparus in Montréal\n\nIn 2015, a survey was carried out to find Sylvilagus oviparus in Montréal’s park. Here are the data . . .\n\n\n\n\n\n\n\n\n\n\n\nWithin the censused park\n\nBlue parks : observed\nPink parks : not observed"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#model",
    "href": "slides/09_Gaussian_process/index.html#model",
    "title": "Gaussian process",
    "section": "Model",
    "text": "Model\n\nSince we have presence-absence data\n\\[P(y = 1) = \\frac{\\exp(b)}{1 - \\exp(b)}\\]\n\n\nwhere \\[b \\sim{\\cal N}\\left(0, C_0 +C_1\\left(1 - e^{\\frac{-d}{a}}\\right)\\right)\\]"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#second",
    "href": "slides/09_Gaussian_process/index.html#second",
    "title": "Gaussian process",
    "section": "second",
    "text": "second\n\nTest your model"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#section",
    "href": "slides/09_Gaussian_process/index.html#section",
    "title": "Gaussian process",
    "section": "",
    "text": "img:\n\nit is a landscape"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#section-1",
    "href": "slides/09_Gaussian_process/index.html#section-1",
    "title": "Gaussian process",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#section-2",
    "href": "slides/09_Gaussian_process/index.html#section-2",
    "title": "Gaussian process",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/template/index.html#un-beau-titre",
    "href": "slides/template/index.html#un-beau-titre",
    "title": "Template for presentations",
    "section": "Un beau titre",
    "text": "Un beau titre\nthis is the first slide"
  },
  {
    "objectID": "slides/template/index.html#second",
    "href": "slides/template/index.html#second",
    "title": "Template for presentations",
    "section": "second",
    "text": "second\n\nTest your model"
  },
  {
    "objectID": "slides/template/index.html#section",
    "href": "slides/template/index.html#section",
    "title": "Template for presentations",
    "section": "",
    "text": "img:\n\nit is a landscape"
  },
  {
    "objectID": "slides/template/index.html#section-1",
    "href": "slides/template/index.html#section-1",
    "title": "Template for presentations",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/template/index.html#section-2",
    "href": "slides/template/index.html#section-2",
    "title": "Template for presentations",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/template/index.html#choose-parameters",
    "href": "slides/template/index.html#choose-parameters",
    "title": "Template for presentations",
    "section": "choose parameters",
    "text": "choose parameters\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5"
  },
  {
    "objectID": "slides/template/index.html#make-up-an-x-variable",
    "href": "slides/template/index.html#make-up-an-x-variable",
    "title": "Template for presentations",
    "section": "make up an X variable",
    "text": "make up an X variable\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)"
  },
  {
    "objectID": "slides/template/index.html#calculate-the-average",
    "href": "slides/template/index.html#calculate-the-average",
    "title": "Template for presentations",
    "section": "calculate the average",
    "text": "calculate the average\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x"
  },
  {
    "objectID": "slides/template/index.html#simulate-some-observations",
    "href": "slides/template/index.html#simulate-some-observations",
    "title": "Template for presentations",
    "section": "simulate some observations",
    "text": "simulate some observations\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)"
  },
  {
    "objectID": "slides/template/index.html#finally-visualize",
    "href": "slides/template/index.html#finally-visualize",
    "title": "Template for presentations",
    "section": "finally, visualize",
    "text": "finally, visualize\n\nplot(y_obs ~ x)"
  },
  {
    "objectID": "slides/template/index.html#here-it-is-all-on-one-slide",
    "href": "slides/template/index.html#here-it-is-all-on-one-slide",
    "title": "Template for presentations",
    "section": "here it is all on one slide",
    "text": "here it is all on one slide\n\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\nplot(y_obs, x)"
  },
  {
    "objectID": "slides/template/index.html#or-we-can-present-the-code-and-results-separately",
    "href": "slides/template/index.html#or-we-can-present-the-code-and-results-separately",
    "title": "Template for presentations",
    "section": "Or we can present the code and results separately",
    "text": "Or we can present the code and results separately\n\nThe codeThe figure\n\n\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\n\n\n\n\nplot(y_obs ~ x)"
  },
  {
    "objectID": "slides/template/index.html#another-equation",
    "href": "slides/template/index.html#another-equation",
    "title": "Template for presentations",
    "section": "another equation",
    "text": "another equation\n\\[\n2 + 4 = 6\n\\]"
  },
  {
    "objectID": "slides/template/index.html#the-equation",
    "href": "slides/template/index.html#the-equation",
    "title": "Template for presentations",
    "section": "The equation",
    "text": "The equation\n\\[\n\\begin{align}\ny  &\\sim \\text{N}(\\mu, \\sigma_{obs}) \\\\\n\\mu &= a + bx \\\\\n\\end{align}\n\\]"
  },
  {
    "objectID": "slides/template/index.html#the-model",
    "href": "slides/template/index.html#the-model",
    "title": "Template for presentations",
    "section": "The model",
    "text": "The model\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#declare-the-data",
    "href": "slides/template/index.html#declare-the-data",
    "title": "Template for presentations",
    "section": "Declare the data",
    "text": "Declare the data\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#state-parameters",
    "href": "slides/template/index.html#state-parameters",
    "title": "Template for presentations",
    "section": "State parameters",
    "text": "State parameters\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#write-the-likelihood-and-priors",
    "href": "slides/template/index.html#write-the-likelihood-and-priors",
    "title": "Template for presentations",
    "section": "Write the likelihood and priors",
    "text": "Write the likelihood and priors\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#basic-regression-model-1",
    "href": "slides/04_Linear_model/index.html#basic-regression-model-1",
    "title": "Linear models",
    "section": "Basic regression model",
    "text": "Basic regression model\nThe cool thing about the simple linear model is that it can be studied visually quite easily.\n\nFor example if we are interested in knowing how a newly discovered plant species (Bidonia exemplaris) reacts to humidity, we can relate the biomass of B. exemplaris sampled at 100 sites with the soil humidity content and readily visual the data and the trend."
  },
  {
    "objectID": "slides/04_Linear_model/index.html#basic-regression-model-2",
    "href": "slides/04_Linear_model/index.html#basic-regression-model-2",
    "title": "Linear models",
    "section": "Basic regression model",
    "text": "Basic regression model"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#regression-parameters",
    "href": "slides/04_Linear_model/index.html#regression-parameters",
    "title": "Linear models",
    "section": "Regression parameters",
    "text": "Regression parameters\nGenerally, we focused on the most commonly assessed regression parameters of the simple linear model, the slope and the intercept, but there is another one that is very important to consider, especially for this course.\n\nAny ideas which one it is ?"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#regression-parameters-1",
    "href": "slides/04_Linear_model/index.html#regression-parameters-1",
    "title": "Linear models",
    "section": "Regression parameters",
    "text": "Regression parameters\n\nIf we go back to the mathematical description of the model\n\\[\ny_i = \\beta_0 + \\beta_1 x_{i} + \\varepsilon\n\\]\n\n\n\nwe can see that in the simple linear regression the error term (\\(\\varepsilon\\)) has actually a very precise definition:\n\n\n\n\n\\[\\varepsilon \\sim \\mathcal{N}(0, \\sigma^2)\\]\n\n\nwhere \\(\\sigma^2\\) is an estimated variance.\n\n\n\n\nIn words, it means that the error in a simple linear regression follows a Gaussian distribution with a variance that is estimated.\n\n\n\n\nFor most the course, we will play with the variance parameter \\(\\sigma^2\\) in a bunch of different ways.\n\n\n\n\nBut before we do this, we need to understand a bit more about how this parameter influence the model."
  },
  {
    "objectID": "slides/04_Linear_model/index.html#regression-parameters-2",
    "href": "slides/04_Linear_model/index.html#regression-parameters-2",
    "title": "Linear models",
    "section": "Regression parameters",
    "text": "Regression parameters\nA first way to do this is to think about the simple linear regression in a slightly different way. Specifically, based on what we learned in the previous slide the simple linear regression can be rewritten as \\[\ny \\sim \\mathcal{N}(\\beta_0 + \\beta_1 x_{i}, \\sigma^2)\n\\]\n\nAs we will see later in this course, this writting style will become particularly useful."
  },
  {
    "objectID": "slides/04_Linear_model/index.html#regression-parameters-3",
    "href": "slides/04_Linear_model/index.html#regression-parameters-3",
    "title": "Linear models",
    "section": "Regression parameters",
    "text": "Regression parameters\nVariance of the model (\\(\\sigma^2\\))\n\nIn essence, \\(\\sigma^2\\) tells us about what the model could not account for.\n\n\n\nFor example, let’s compare the biomass of Bidonia exemplaris with that of Ilovea chicktighii, another species (a carnivorous plant)"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#regression-parameters-4",
    "href": "slides/04_Linear_model/index.html#regression-parameters-4",
    "title": "Linear models",
    "section": "Regression parameters",
    "text": "Regression parameters\nVariance of the model (\\(\\sigma^2\\))\nBy regressing humidity on the biomass of both plants, we can obtain the estimated parameters for each regression (which are all available using summary.lm)\n\n\n# Regression model\nregBexemplaris <- lm(b.exemplaris ~ humidity)\nregIchicktighii <- lm(i.chicktighii ~ humidity)\n\n# Summary\nsummaryRegBexemplaris <- summary(regBexemplaris)\nsummaryRegIchicktighii <- summary(regIchicktighii)"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#regression-parameters-5",
    "href": "slides/04_Linear_model/index.html#regression-parameters-5",
    "title": "Linear models",
    "section": "Regression parameters",
    "text": "Regression parameters\nVariance of the model (\\(\\sigma^2\\))\n\n\nFor Bidonia exemplaris\n\n# Estimated coefficients\nsummaryRegBexemplaris$coefficients[,1:2]\n\n            Estimate Std. Error\n(Intercept) 2.573889 0.04720304\nhumidity    1.100865 0.07975800\n\n# Estimated variance\nsummaryRegBexemplaris$sigma\n\n[1] 0.471798\n\n\n\nFor Ilovea chicktighii\n\n# Estimated coefficients\nsummaryRegIchicktighii$coefficients[,1:2]\n\n            Estimate  Std. Error\n(Intercept) 3.991785 0.008928294\nhumidity    1.271250 0.015085956\n\n# Estimated variance\nsummaryRegIchicktighii$sigma\n\n[1] 0.089239"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#limits-of-the-simple-linear-regression",
    "href": "slides/04_Linear_model/index.html#limits-of-the-simple-linear-regression",
    "title": "Linear models",
    "section": "Limits of the simple linear regression",
    "text": "Limits of the simple linear regression\nThere are two major pitfalls of the simple linear model for problems in the life sciences\n\n\nOne explanatory is almost never enough to approach biological questions nowadays.\n\n\n\n\nThe simple linear model assumes that the error follows a Gaussian distribution."
  },
  {
    "objectID": "slides/04_Linear_model/index.html#multiple-linear-regression",
    "href": "slides/04_Linear_model/index.html#multiple-linear-regression",
    "title": "Linear models",
    "section": "Multiple linear regression",
    "text": "Multiple linear regression\n\nSimple linear regression can be extended to account for multiple explanatory variables to study more complexe problems. This type of regression model is known as a multiple linear regression.\n\n\n\nMathematically, a multiple linear regression can be defined as\n\\[\ny_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\dots + \\beta_p x_{ip} + \\varepsilon\n\\]\n\n\n\n\nTheoretically, estimating the parameters of a multiple regression model is done the same ways as for simple linear regression. However, in practice, matrix algebra is quite practical to use in this context and also for this course in genral.\n\n\n\n\nIn this respect, let’s take a bit of time to get acquinted with different basic (and maybe not so basic!) knowledge of matrix algebra."
  },
  {
    "objectID": "slides/04_Linear_model/index.html#a-general-way-to-write-matrices",
    "href": "slides/04_Linear_model/index.html#a-general-way-to-write-matrices",
    "title": "Linear models",
    "section": "A general way to write matrices",
    "text": "A general way to write matrices\n\\[\n\\mathbf{A} = \\begin{bmatrix}\n                A_{11} & A_{12} & \\dots & A_{1j} & \\dots & A_{1n}\\\\\n                A_{21} & A_{22} & \\dots & A_{2j} & \\dots & A_{2n}\\\\\n                \\vdots & \\vdots & \\ddots & \\vdots & & \\vdots\\\\\n              A_{i1} & A_{i2} & \\dots & A_{ij} & \\dots & A_{in}\\\\\n            \\vdots & \\vdots & & \\vdots & \\ddots & \\vdots\\\\\n            A_{m1} & A_{m2} & \\dots & A_{mj} & \\dots & A_{mn}\\\\\n        \\end{bmatrix}\n\\] \\[A = \\left[a_{ij}\\right]=\\left[a_{ij}\\right]_{m\\times n}\\]"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#the-transpose-of-a-matrix",
    "href": "slides/04_Linear_model/index.html#the-transpose-of-a-matrix",
    "title": "Linear models",
    "section": "The transpose of a matrix",
    "text": "The transpose of a matrix\n\n\n\n\\[A = \\begin{bmatrix}\n          5 & -6 & 4 & -4\\\\\n        \\end{bmatrix}\n\\]\n\\[B = \\begin{bmatrix}\n          -8\\\\\n          9\\\\\n          -2\\\\\n        \\end{bmatrix}\n\\]\n\\[C = \\begin{bmatrix}\n          -4 & 1\\\\\n          2 & -5\\\\\n        \\end{bmatrix}\n\\]\n\n\\[A^t=\\begin{bmatrix}\n          5\\\\\n          -6\\\\\n          4\\\\\n          -4\\\\\n        \\end{bmatrix}\n\\]\n\\[B^t =\\begin{bmatrix}\n          -8 & 9 & -2\\\\\n        \\end{bmatrix}\n\\]\n\\[C^t =\\begin{bmatrix}\n          -4 & 2\\\\\n          1 & -5\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#the-transpose-of-a-matrix-1",
    "href": "slides/04_Linear_model/index.html#the-transpose-of-a-matrix-1",
    "title": "Linear models",
    "section": "The transpose of a matrix",
    "text": "The transpose of a matrix\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nA\n\n     [,1] [,2]\n[1,]    3    5\n[2,]    1   -2\n\nt(A)\n\n     [,1] [,2]\n[1,]    3    1\n[2,]    5   -2"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#multiplying-a-matrix-by-a-scalar",
    "href": "slides/04_Linear_model/index.html#multiplying-a-matrix-by-a-scalar",
    "title": "Linear models",
    "section": "Multiplying a matrix by a scalar",
    "text": "Multiplying a matrix by a scalar\n\\[\\mathbf{B} = c\\mathbf{A}\\] \\[B_{ij} = cA_{ij}\\]\n\n\\[\n            0.3 \\begin{bmatrix}\n                3 & 5\\\\\n                1 & -2\\\\\n            \\end{bmatrix} =  \n            \\begin{bmatrix}\n                0.9 & 1.5\\\\\n                0.3 & -0.6\\\\\n            \\end{bmatrix}\n\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nc <- 0.3\nc*A \n\n     [,1] [,2]\n[1,]  0.9  1.5\n[2,]  0.3 -0.6"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#matrix-multiplications-not-divisions",
    "href": "slides/04_Linear_model/index.html#matrix-multiplications-not-divisions",
    "title": "Linear models",
    "section": "Matrix multiplications (not divisions!)",
    "text": "Matrix multiplications (not divisions!)\n\\[\\mathbf{C} = \\mathbf{A} \\cdot \\mathbf{B}\\]\n\\[C_{ik} = \\sum^{n}_{j=1}A_{ij}B_{jk}\\]\nRules\nAssociative: \\(\\mathbf{A}(\\mathbf{B}\\mathbf{C}) = (\\mathbf{A}\\mathbf{B})\\mathbf{C}\\)\nDistributive: \\(\\mathbf{A}(\\mathbf{B} + \\mathbf{C}) = \\mathbf{A}\\mathbf{B}+\\mathbf{A}\\mathbf{C}\\)\nNot commutative: \\(\\mathbf{A}\\mathbf{B} \\neq \\mathbf{B}\\mathbf{A}\\)"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#inner-product",
    "href": "slides/04_Linear_model/index.html#inner-product",
    "title": "Linear models",
    "section": "Inner product",
    "text": "Inner product\n\\[(\\mathbf{Ax})_i=\\sum_{j=1}^{n}A_{ij}x_j\\]\n\n\\[\n  \\begin{bmatrix}\n    3 & 5\\\\\n    1 & -2\\\\\n  \\end{bmatrix}\n  \\begin{bmatrix}\n    2\\\\ 5\\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    (3, 5) \\cdot (2, 5)\\\\\n    (1, -2) \\cdot (2, 5) \\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    3 \\times 2 + 5 \\times 5\\\\\n    1 \\times 2 -2 \\times 5\\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    31\\\\\n    -8\\\\\n  \\end{bmatrix}\n\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nx <- matrix(c(2,5), nrow = 2, ncol = 1)\nA %*% x\n\n     [,1]\n[1,]   31\n[2,]   -8"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#identity-matrix",
    "href": "slides/04_Linear_model/index.html#identity-matrix",
    "title": "Linear models",
    "section": "Identity matrix",
    "text": "Identity matrix\nThe identity matrix is a square matrix where all values of its diagonal are 0 except the diagonal values which are all 1s.\n\n\\[\n\\mathbf{I}=\\begin{bmatrix}\n                1 & 0 & 0\\\\\n                0 & 1 & 0\\\\\n                0 & 0 & 1\\\\\n        \\end{bmatrix}\n\\]\n\n\n\nThe identity matrix is important because\n\\[\\mathbf{A} \\cdot \\mathbf{I}_n = \\mathbf{A}\\] or\n\\[\\mathbf{I}_m \\cdot \\mathbf{A} = \\mathbf{A}\\]"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#diagonal-matrix",
    "href": "slides/04_Linear_model/index.html#diagonal-matrix",
    "title": "Linear models",
    "section": "Diagonal matrix",
    "text": "Diagonal matrix\nThe diagonal matrix is a square matrix where all values of its diagonal are 0 except the ones on the diagonal.\n\n\\[D=\n      \\begin{bmatrix}\n        d_1 & 0 & \\dots & 0\\\\\n        0 & d_2 & \\dots & 0\\\\\n        \\vdots & \\vdots & \\ddots & \\vdots\\\\\n        0 & 0 & \\dots & d_n\\\\\n\\end{bmatrix}\\]\nAn example\n\n\\[\n\\begin{bmatrix}\n                -1 & 0 & 0\\\\\n                0 & 0 & 0\\\\\n                0 & 0 & 6\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#multiple-linear-regression-1",
    "href": "slides/04_Linear_model/index.html#multiple-linear-regression-1",
    "title": "Linear models",
    "section": "Multiple linear regression",
    "text": "Multiple linear regression\n\nIn this course, we will rely heavily on multiple linear regression and expand on it by studying how some of the parameters (the \\(\\beta\\)s) can depend on other other data and parameters.\n\n\nAs we saw earlier, a classic way to write multiple linear regression is\n\\[\ny_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\dots + \\beta_p x_{ip} + \\varepsilon\n\\]\n\n\nHowever, we can rewrite this using matrix notation has\n\\[\n\\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta} + \\boldsymbol{\\varepsilon}\n\\]"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#multiple-linear-regression-2",
    "href": "slides/04_Linear_model/index.html#multiple-linear-regression-2",
    "title": "Linear models",
    "section": "Multiple linear regression",
    "text": "Multiple linear regression\nMatrix notation\n\\[\n\\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta} + \\boldsymbol{\\varepsilon}\n\\]\nUsing the matrix notation, we assume that\n\n\n\n\\(\\mathbf{y}\\) is a vector of length \\(n\\) (samples)\n\n\n\n\n\n\n\\(\\mathbf{X}\\) is a matrix with \\(n\\) samples (rows) and representing \\(p\\) explanatory variables (columns)\n\n\n\n\n\n\n\\(\\boldsymbol{\\beta}\\) is a vector of \\(p\\) regression coefficients\n\n\n\n\n\n\n\\(\\boldsymbol{\\varepsilon}\\) is a vector of residuals of length \\(n\\)"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#error-in-linear-models",
    "href": "slides/04_Linear_model/index.html#error-in-linear-models",
    "title": "Linear models",
    "section": "Error in linear models",
    "text": "Error in linear models\nAs previously mentioned, in (simple and multiple!) linear regression the error term (\\(\\varepsilon\\)) has actually a very precise definition:\n\\[\\varepsilon \\sim \\mathcal{N}(0, \\sigma^2)\\] where \\(\\sigma^2\\) is an estimated variance\n\nwhich means that the error linear regression follows a Gaussian distribution with an estimateed variance.\n\n\nNote The model can be written using matrix notation as\n\\[\\mathbf{y} \\sim \\mathcal{N}(\\mathbf{X}\\boldsymbol{\\beta}, \\sigma^2)\\] where \\(\\sigma^2\\)"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#generalized-linear-models",
    "href": "slides/04_Linear_model/index.html#generalized-linear-models",
    "title": "Linear models",
    "section": "Generalized linear models",
    "text": "Generalized linear models\n\nTo go around this problem, generalized linear models (GLMs) have been proposed. In essence, GLMs use link functions to adapt models for them to be used on non-Gaussian data.\n\n\nMathematically, the generic way to write generalized linear model is\n\\[\n\\widehat{y}_i = g^{-1}(\\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\dots + \\beta_p x_{ip})\n\\]\n\n\nor in matrix notation\n\\[\n\\widehat{\\mathbf{y}} = g^{-1}(\\mathbf{X}\\boldsymbol{\\beta})\n\\]\nwhere \\(g\\) is the link function and \\(g^{-1}\\) the inverse link function."
  },
  {
    "objectID": "slides/04_Linear_model/index.html#generalized-linear-models-1",
    "href": "slides/04_Linear_model/index.html#generalized-linear-models-1",
    "title": "Linear models",
    "section": "Generalized linear models",
    "text": "Generalized linear models\nLink functions\n\nThere are many types of link functions and they are usually directly associated to the underlying data the analysis is carried out on.\n\n\n\nArguably the most common link function in ecology is\n\n\n\nlogit link function\n\nIt is commonly used for modelling binary (0-1) data.\n\\[\n\\mathbf{X}\\boldsymbol{\\beta} = \\ln\\left(\\frac{\\widehat{\\mathbf{y}}}{1 - \\widehat{\\mathbf{y}}}\\right)\n\\]\n\n\n\n\nThe inverse logit link function is\n\\[\n\\widehat{\\mathbf{y}} = \\frac{\\exp(\\mathbf{X}\\boldsymbol{\\beta})}{1 + \\exp(\\mathbf{X}\\boldsymbol{\\beta})} = \\frac{1}{1 + \\exp(-\\mathbf{X}\\boldsymbol{\\beta})}\n\\]"
  },
  {
    "objectID": "slides/04_Linear_model/index.html#generalized-linear-models-2",
    "href": "slides/04_Linear_model/index.html#generalized-linear-models-2",
    "title": "Linear models",
    "section": "Generalized linear models",
    "text": "Generalized linear models\nLink functions\nAnother commonly used link function is\n\nlog link function\nIt is commonly used for modelling count data.\n\\[\n\\mathbf{X}\\boldsymbol{\\beta} = \\ln\\left(\\widehat{\\mathbf{y}}\\right)\n\\]\n\n\nThe inverse logit link function is\n\\[\n\\widehat{\\mathbf{y}} = \\exp(\\mathbf{X}\\boldsymbol{\\beta})\n\\]"
  },
  {
    "objectID": "slides/00_Introduction/index.html#internet",
    "href": "slides/00_Introduction/index.html#internet",
    "title": "Introduction",
    "section": "Internet",
    "text": "Internet\nNetwork : UdeM-Visiteurs\nPassword : No password ! Yé !"
  },
  {
    "objectID": "slides/00_Introduction/index.html#dos-and-donts-at-the-station-biologique-des-laurentides",
    "href": "slides/00_Introduction/index.html#dos-and-donts-at-the-station-biologique-des-laurentides",
    "title": "Introduction",
    "section": "Dos and don’ts at the Station biologique des Laurentides",
    "text": "Dos and don’ts at the Station biologique des Laurentides\nThe lord of these premises will tell us all about what you can and cannot do here."
  },
  {
    "objectID": "slides/00_Introduction/index.html#course-material",
    "href": "slides/00_Introduction/index.html#course-material",
    "title": "Introduction",
    "section": "Course material",
    "text": "Course material\nWebsite : https://bios2.github.io/hiermod2023/\n\nOn it, you will find the slides but also practical examples.\n\n\nYou will also find course syllabus\n\n\nLet’s take a look…"
  },
  {
    "objectID": "slides/00_Introduction/index.html#general-daily-schedule",
    "href": "slides/00_Introduction/index.html#general-daily-schedule",
    "title": "Introduction",
    "section": "General daily schedule",
    "text": "General daily schedule\n\n8h00 to 9h00 - Breakfast\n\n9h00 to 12h00 - Lecture/Practice\n\n12h00 to 13h00 - Lunch\n\n13h00 to 17h00 - Lecture/Practice\n17h00 to 17h30 - Let us know about your research !\n\n17h30 to 18h30 - Supper"
  },
  {
    "objectID": "slides/00_Introduction/index.html#what-are-hierarchical-models",
    "href": "slides/00_Introduction/index.html#what-are-hierarchical-models",
    "title": "Introduction",
    "section": "What are hierarchical models ?",
    "text": "What are hierarchical models ?\nFor this course, hierarchical models are regression models in which the parameters (the regression coefficients) are not defined by a single value but they are themselves given a probability distribution (Gelman and Hill 2007)."
  },
  {
    "objectID": "slides/00_Introduction/index.html#particularities-of-hierarchical-models",
    "href": "slides/00_Introduction/index.html#particularities-of-hierarchical-models",
    "title": "Introduction",
    "section": "Particularities of hierarchical models",
    "text": "Particularities of hierarchical models\nHierarchical models are\n\n\nA challenging bit of technology (probably more than you might think!)\n\n\n\n\nVery flexible models (in many more ways that are usually expected!)\n\n\n\n\nConstrained to the same particularities as (generalized) (non) linear models (sometimes to a more severe extent)"
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-vocabulary",
    "href": "slides/00_Introduction/index.html#a-bit-of-vocabulary",
    "title": "Introduction",
    "section": "A bit of vocabulary",
    "text": "A bit of vocabulary\n\nHierarchical models, as we will see them in this course, are also known under different names\n\n\n\nRandom effect models\n\n\n\n\nMixed models\n\n\n\n\nMultilevel models\n\n\n\n\nVariance component models\n\n\n\n\nError component models"
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-vocabulary-1",
    "href": "slides/00_Introduction/index.html#a-bit-of-vocabulary-1",
    "title": "Introduction",
    "section": "A bit of vocabulary",
    "text": "A bit of vocabulary\nWe decided to use the term hierachical model to prevent confusions that sometimes arises in the litterature about random and fixed effects, which are terms commonly used when referring to mixed effect models.\n\nActually, random and fixed effects have multiple definitions, which leads to confusion."
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-vocabulary-2",
    "href": "slides/00_Introduction/index.html#a-bit-of-vocabulary-2",
    "title": "Introduction",
    "section": "A bit of vocabulary",
    "text": "A bit of vocabulary\nMultiple Definition of fixed and random effects\n\n\n(Kreft and De Leeuw 1998) Fixed effects are constant and random effect vary\n\n\n\n\n(Searl et al. 1992) Effects are fixed if they are interesting in themselves or random if there is interest in the underlying population\n\n\n\n\n(Green and Tukey 1960) When a sample exhausts the population, the corresponding variable is fixed; when the sample is a small (i.e., negligible) part of the population the corresponding variable is random\n\n\n\n\n(Roy LaMotte 2014) If an effect is assumed to be a realized value of a random variable, it is called a random effect\n\n\n\n\n(Robinson 1991) Fixed effects are estimated using least squares (or, more generally, maximum likelihood) and random effects are estimated with shrinkage."
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-history",
    "href": "slides/00_Introduction/index.html#a-bit-of-history",
    "title": "Introduction",
    "section": "A bit of history",
    "text": "A bit of history\n\nBecause of the different name used for hierarchial models, the history of this subfield of statistics is a little murky, but we know that a few important figures in statistics dabbed into this field, most notably\n\n\n\n\n\n\n\n\n\n\n\n\nFisher R.A. (1919). The Correlation between Relatives on the Supposition of Mendelian Inheritance. Transactions of the Royal Society of Edinburgh, 52 399–433."
  },
  {
    "objectID": "slides/00_Introduction/index.html#implementation",
    "href": "slides/00_Introduction/index.html#implementation",
    "title": "Introduction",
    "section": "Implementation",
    "text": "Implementation\n\n\nHierarchical models have been implemented in many software packages,\n\n\n\n\nin R\n\nlme4, brms, nlme, glmmTMB, MCMCglmm, …\n\n\n\n\n\nin SAS\n\nMIXED, HPMIXED, GLMMIX, …\n\n\n\n\n\nin Julia\n\nMixedModels.jl\n\n…"
  },
  {
    "objectID": "slides/00_Introduction/index.html#implementation-1",
    "href": "slides/00_Introduction/index.html#implementation-1",
    "title": "Introduction",
    "section": "Implementation",
    "text": "Implementation\nWhat we will use\n\nWe will not use any of these software packages… because under specific circumstances, what may seem like the same implementation of a model may lead to different answers… and both can actually be right !\n\n\nThis is because the underlying model implemented in the software package may actually be slightly different.\n\n\nInstead we will implement our own models from scratch using Stan."
  },
  {
    "objectID": "slides/00_Introduction/index.html#good-reference",
    "href": "slides/00_Introduction/index.html#good-reference",
    "title": "Introduction",
    "section": "Good reference",
    "text": "Good reference\n\nA good portion of this course material is based on this book."
  },
  {
    "objectID": "slides/00_Introduction/index.html#great-technical-references",
    "href": "slides/00_Introduction/index.html#great-technical-references",
    "title": "Introduction",
    "section": "Great technical references",
    "text": "Great technical references\n\nEverything is there but it can gets technical !"
  },
  {
    "objectID": "slides/00_Introduction/index.html#r-and-stan",
    "href": "slides/00_Introduction/index.html#r-and-stan",
    "title": "Introduction",
    "section": "R and Stan",
    "text": "R and Stan\nAll of the practical aspect of the course will be done with R and Stan.\n\nRStudio\nWe strongly (!) encourage you to use RStudio and to start a project for the course."
  },
  {
    "objectID": "slides/00_Introduction/index.html#r-package-to-install",
    "href": "slides/00_Introduction/index.html#r-package-to-install",
    "title": "Introduction",
    "section": "R package to install",
    "text": "R package to install\n\n# Package on CRAN\ninstall.packages(c(\"vegan\",\n                   \"palmerpenguins\",\n                   \"tidybayes\",\n                   \"tidyverse\",\n                   \"posterior\"))\n\n# cmdstanr - One last important package\ninstall.packages(\"cmdstanr\",\n                 repos = c(\"https://mc-stan.org/r-packages/\",\n                           getOption(\"repos\")))\ncmdstanr::check_cmdstan_toolchain()\ninstall_cmdstan(cores = 2) # If necessary"
  },
  {
    "objectID": "slides/03_Stan/index.html#what-is-stan",
    "href": "slides/03_Stan/index.html#what-is-stan",
    "title": "Stan",
    "section": "What is Stan?",
    "text": "What is Stan?\n\n\n\n\n\n\n\n\n\n\n\nStanisław Ulam"
  },
  {
    "objectID": "slides/03_Stan/index.html#stan",
    "href": "slides/03_Stan/index.html#stan",
    "title": "Stan",
    "section": "Stan",
    "text": "Stan\nhttps://mc-stan.org/\n\nA comprehensive software ecosystem aimed at facilitating the application of Bayesian inference\n\nFull Bayesian statistical inference with MCMC sampling (but not only)\nIntegrated with most data analysis languages (R, Python, MATLAB, Julia, Stata)"
  },
  {
    "objectID": "slides/03_Stan/index.html#why-stan",
    "href": "slides/03_Stan/index.html#why-stan",
    "title": "Stan",
    "section": "Why Stan?",
    "text": "Why Stan?\n\nOpen source\nExtensive documentation\nPowerful sampling algorithm\nLarge and active online community!"
  },
  {
    "objectID": "slides/03_Stan/index.html#hmc",
    "href": "slides/03_Stan/index.html#hmc",
    "title": "Stan",
    "section": "HMC",
    "text": "HMC\n\nMetropolis and Gibbs limitations:\n\nA lot of tuning to find the best spot between large and small steps\nInefficient in high-dimensional spaces\nCan’t travel long distances between isolated local minimums\n\nHamiltonian Monte Carlo:\n\nUses a gradient-based MCMC to reduce the random walk (hence autocorrelation)\nStatic HMC\nNo-U-Turn Sampler (NUTS)\nDon’t get it? Viz it!"
  },
  {
    "objectID": "slides/03_Stan/index.html#how-to-stan",
    "href": "slides/03_Stan/index.html#how-to-stan",
    "title": "Stan",
    "section": "How to Stan",
    "text": "How to Stan"
  },
  {
    "objectID": "slides/03_Stan/index.html#why-to-stan",
    "href": "slides/03_Stan/index.html#why-to-stan",
    "title": "Stan",
    "section": "WHY to Stan",
    "text": "WHY to Stan"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#frequentist",
    "href": "slides/02_Bayesian/index.html#frequentist",
    "title": "Bayesian modelling",
    "section": "Frequentist",
    "text": "Frequentist\n\n\nIn introductory statistics course, it is common to rely on the frequentist paradigm when inferring results from data.\n\n\n\n\nFrequentists want to find the best model parameter(s) for the data at hand.\n\n\n\n\n\\[\\text{Likelihood}\\hspace{1.5cm}P(\\text{Data}|\\text{Model})\\]\n\n\n\n\nThey are interested in maximizing the Likelihood\nThey need data\n\n\n\nEstimating model parameters\n\n\nMinimizing the sums of squares\nSimulated annealing\nNelder-Mead Simplex\n…"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#bayesian",
    "href": "slides/02_Bayesian/index.html#bayesian",
    "title": "Bayesian modelling",
    "section": "Bayesian",
    "text": "Bayesian\n\n\nBayesians want to find how good the model parameter(s) are given some data\n\n\n\n\n\\[\\text{Posterior}\\hspace{1.5cm}P(\\text{Model}|\\text{Data})\\]\n\n\n\n\nThey are interested in the posterior distribution\n\n\n\n\nThey need data and prior information\n\n\n\n\nThe general framework used in Bayesian modelling is\n\n\n\\[\\underbrace{P(\\text{Model}|\\text{Data})}_\\text{Posterior}\\propto \\underbrace{P(\\text{Data}|\\text{Model})}_\\text{Likelihood}\\underbrace{P(\\text{Model})}_\\text{Prior}\\]\n\n\n\nEstimating model parameters\n\n\nMarkov Chain Monte Carlo\nHamiltonian Monte Carlo\n…"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#our-way-of-thinking-is-bayesian",
    "href": "slides/02_Bayesian/index.html#our-way-of-thinking-is-bayesian",
    "title": "Bayesian modelling",
    "section": "Our way of thinking is Bayesian",
    "text": "Our way of thinking is Bayesian"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#a-few-words-about-the-prior",
    "href": "slides/02_Bayesian/index.html#a-few-words-about-the-prior",
    "title": "Bayesian modelling",
    "section": "A few words about the prior",
    "text": "A few words about the prior\n\nDefinition of prior probability\n\n\nThe prior probability informes us about the probability of the model being true before the current data is considered\n\n\n\nTypes of priors\n\n“Uninformative”\n\nThese priors are meant to bring very little information about the model\n\n\n\nInformative\n\nThese priors bring information about the model that is available"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#a-few-words-about-the-prior-1",
    "href": "slides/02_Bayesian/index.html#a-few-words-about-the-prior-1",
    "title": "Bayesian modelling",
    "section": "A few words about the prior",
    "text": "A few words about the prior\n“Uninformative” priors\n\n\nExample If we have no idea of how elevation influence sugar maple\n\n\n\nGaussian distribution\n\n\n\n\\[f(x)=\\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\\]\n\n\n\n\\(\\mu = 0\\)\n\\(\\sigma = \\text{Large say 100}\\)"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#a-few-words-about-the-prior-2",
    "href": "slides/02_Bayesian/index.html#a-few-words-about-the-prior-2",
    "title": "Bayesian modelling",
    "section": "A few words about the prior",
    "text": "A few words about the prior\nInformative priors\n\n\nExample If we know that\n\nThere are less sugar maples the higher we go\nThe influence of elevation on sugar maple cannot be more than two folds\n\nUniform distribution\n\n\n\\[f(x)=\\left\\{\n  \\begin{array}{cl}\n    \\frac{1}{b-a} & \\text{for } x\\in [a,b]\\\\\n    0 &\\text{otherwise}\\\\\n  \\end{array}\n\\right.\\]\n\n\\(a > -2\\)\n\\(b < 0\\)"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#estimating-bayesian-model",
    "href": "slides/02_Bayesian/index.html#estimating-bayesian-model",
    "title": "Bayesian modelling",
    "section": "Estimating Bayesian model",
    "text": "Estimating Bayesian model\n\n\nAs I hinted earlier, there are a number of ways to estimate the parameters of a Bayesian model. A common way to estimate Bayesian models is to rely on Markov Chain Monte Carlo (MCMC) or variants of it, including Hamiltonian Monte Carlo (HMC), which is used in Stan\n\n\n\nTypical reasons to favour MCMC\n\n\n\n\nIt is flexible\nIt can be applied to complex models such as models with multiple levels of hierarchy\n\n\n\n\nWhy should we learn about MCMC ?\n\n\n\nThe goal of this course is not to learn the intricacies of MCMC or HMC, but since we will play a lot with Stan, it is important to learn at least conceptually how it works MCMC and HMC."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc",
    "href": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc",
    "title": "Bayesian modelling",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\n\nHistorically, the developments of MCMC have been intimately linked with the arrival of computers. As such, the first developments and applications of MCMC were made during the Los Alamos projects.\nTo explain what is an MCMC, let’s imagine that we are interested in understanding how the mallard (Anas platyrhynchos) grows from hatchling to adult."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-1",
    "href": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-1",
    "title": "Bayesian modelling",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\nA simplistic statistical example\n\n\nLet’s say that we are interested in modelling how male Mallard weight changes as they grow from hatching to adult. Here are some data obtained from a local Mallard duck farm."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-2",
    "href": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-2",
    "title": "Bayesian modelling",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\nA simplistic statistical example\n\n\nA growth model can be constructed using a simple linear regression\n\\[y = \\beta_0 + \\beta x + \\varepsilon\\] From this model we can infer that the average weight of a Mallard duck when it hatches is 107 grams (intercept), and the average daily growth of the Mallard is 13.5 grams (slope)."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-3",
    "href": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-3",
    "title": "Bayesian modelling",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\nA simplistic statistical example\n\nEstimating the intercept and slope parameters of the simple linear regression can be done with an MCMC. This amount to sampling\n\n\n\\(\\beta_0\\) as\n\n\n\n\\[\\beta_0 \\sim \\mathcal{D}(\\text{mean}, \\text{variance}, \\text{skewness}, \\text{kurtosis}, \\dots)\\]\n\n\n\n\nand \\(\\beta\\) as\n\n\n\n\n\\[\\beta \\sim \\mathcal{D}(\\text{mean}, \\text{variance}, \\text{skewness}, \\text{kurtosis}, \\dots)\\]\n\n\nIn doing so, we are not focusing on finding the ‘best’ parameter values. Rather, we are focused on finding the distribution of best parameter values."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-4",
    "href": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-4",
    "title": "Bayesian modelling",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\n\nWhen using an MCMC, we are interested in sampling the distributions to estimate the parameters of the model.\n\n\nSince we do not know what the “true” characteristics of the distributions, MCMC and HMC rely on different approaches to assess the structure of the distribution is."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-5",
    "href": "slides/02_Bayesian/index.html#markov-chain-monte-carlo-mcmc-5",
    "title": "Bayesian modelling",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\nMCMC relies on using many random samples to assess the structure of the distribution."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#hamiltonian-monte-carlo",
    "href": "slides/02_Bayesian/index.html#hamiltonian-monte-carlo",
    "title": "Bayesian modelling",
    "section": "Hamiltonian Monte Carlo",
    "text": "Hamiltonian Monte Carlo\nHamiltonial Monte Carlo relies on Hamiltonian dynamics to assess the structure of the distribution."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#sampling-the-parameters",
    "href": "slides/02_Bayesian/index.html#sampling-the-parameters",
    "title": "Bayesian modelling",
    "section": "Sampling the parameters",
    "text": "Sampling the parameters\n\n\nIn MCMC and HMC, a lot of iterations need to be carried out to assess the distribution of parameters. But how many is enough ?\n\n\n\n\nHere is a rough procedure to follow:\n\nPerform a pilot run with a reduced number of iterations (e.g. 10) and measure the time it takes\nDecide on a number of steps to run to obtain a result in a reasonable amount of time\nRun the algorithm again !\nStudy the chain visually"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#studying-convergence",
    "href": "slides/02_Bayesian/index.html#studying-convergence",
    "title": "Bayesian modelling",
    "section": "Studying convergence",
    "text": "Studying convergence"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#studying-convergence-1",
    "href": "slides/02_Bayesian/index.html#studying-convergence-1",
    "title": "Bayesian modelling",
    "section": "Studying convergence",
    "text": "Studying convergence"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#studying-convergence-2",
    "href": "slides/02_Bayesian/index.html#studying-convergence-2",
    "title": "Bayesian modelling",
    "section": "Studying convergence",
    "text": "Studying convergence\n\nIf we ran the same MCMC as above but instead for 50000 steps, we obtain\n\n\n\n\n\n\n\n\n\n\nNote It is also possible to thin (record only the \\(n^{\\text{th}}\\) iteration), but it is better to keep all iterations when possible. Actually, thinning should only be carried out when there are too many iterations for you to keep them and manipulate them in the memory of your computer."
  },
  {
    "objectID": "slides/02_Bayesian/index.html#studying-convergence-3",
    "href": "slides/02_Bayesian/index.html#studying-convergence-3",
    "title": "Bayesian modelling",
    "section": "Studying convergence",
    "text": "Studying convergence\nBurn-in\nBurn-in is throwing away some iterations at the beginning of the MCMC run"
  },
  {
    "objectID": "slides/02_Bayesian/index.html#studying-convergence-4",
    "href": "slides/02_Bayesian/index.html#studying-convergence-4",
    "title": "Bayesian modelling",
    "section": "Studying convergence",
    "text": "Studying convergence\nBurn-in\nAfter burn-in, we obtain"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#complex-hierarchical-model",
    "href": "slides/08_Complex_hierarchical_model/index.html#complex-hierarchical-model",
    "title": "Complex hierarchical models",
    "section": "“Complex” hierarchical model",
    "text": "“Complex” hierarchical model\nBy “complex” we refer to hierarchical models for which more than one parameters are accounted for in a parameter hierarchy.\n\nAs we will see, there are a number of ways this can complexify the structure of a model in ways that are not always obvious."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#interacting-hierarchies",
    "href": "slides/08_Complex_hierarchical_model/index.html#interacting-hierarchies",
    "title": "Complex hierarchical models",
    "section": "Interacting hierarchies",
    "text": "Interacting hierarchies\n\nlme4 notation : y ~ (1 | f:g)\n\n\n\nThis model assumes that factors f and g interact to make a hierarchy.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f\\times g },\\sigma^2\\mathbf{I})\\] or\n\\[y_i = b_{f[i]\\times g[i]} + \\varepsilon \\quad\\forall\\quad i = 1\\dots n\\]\n\n\n\n\nwhere \\[\\mathbf{b}_{f\\times g} \\sim \\mathcal{N}\\left(\\mu_{f\\times g}, \\sigma^2_{f\\times g}\\right)\\]\n\n\n\n\nNote that a multi-factor hierarchy can be constructed my multiplying the levels of each factor to account for a more complexe hierarchy."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#interacting-hierarchies-1",
    "href": "slides/08_Complex_hierarchical_model/index.html#interacting-hierarchies-1",
    "title": "Complex hierarchical models",
    "section": "Interacting hierarchies",
    "text": "Interacting hierarchies"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#multiple-independent-hierarchy",
    "href": "slides/08_Complex_hierarchical_model/index.html#multiple-independent-hierarchy",
    "title": "Complex hierarchical models",
    "section": "Multiple independent hierarchy",
    "text": "Multiple independent hierarchy\n\nlme4 notation : y ~ (1 | f) + (1 | g) or y ~ 1 + (1 | f) + (1 | g)\n\n\n\nThis model assumes there is a hierarchy that varies among two factors that are independent from one another.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f} + \\mathbf{b}_{g},\\sigma^2\\mathbf{I})\\] or\n\\[y_i = b_{f[i]} + b_{g[i]} + \\varepsilon \\quad\\forall\\quad i = 1\\dots n\\]\n\n\n\n\nwhere\n\\[\\mathbf{b} \\sim \\mathcal{N}\\left(\\begin{bmatrix}\n                                    \\mu_f\\\\\n                                    \\mu_g\\\\\n                                  \\end{bmatrix}\n                                ,\n                                \\begin{bmatrix}\n                                  \\sigma^2_f & 0\\\\\n                                  0& \\sigma^2_g\\\\\n                                \\end{bmatrix}\n                                \\right)\\]\n\n\n\n\nHere, we are dealing with a model that has two intercepts, which are sampled independently so that the \\(b\\)s will change for a sample \\(i\\) only when the the level of factor \\(f\\) and the level of factor \\(g\\) changes independently."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#multiple-independent-hierarchy-1",
    "href": "slides/08_Complex_hierarchical_model/index.html#multiple-independent-hierarchy-1",
    "title": "Complex hierarchical models",
    "section": "Multiple independent hierarchy",
    "text": "Multiple independent hierarchy"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#nested-hierarchies",
    "href": "slides/08_Complex_hierarchical_model/index.html#nested-hierarchies",
    "title": "Complex hierarchical models",
    "section": "Nested hierarchies ?",
    "text": "Nested hierarchies ?\n\nlme4 notation : y ~ (1 | f/g) or y ~ (1 | f) + (1 | f:g)\n\n\n\nThis model assumes there is a hierarchy that varies among the levels of factor f and among the levels of factor g but only within the levels of factor f.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{f}+\\mathbf{b}_{f\\times g},\\sigma^2\\mathbf{I})\\] or\n\\[y_i = b_{f[i]}+b_{f[i]\\times g[i]} + \\varepsilon \\quad i = 1\\dots n\\]\n\n\n\n\nwhere\n\\[\\mathbf{b} \\sim \\mathcal{N}\\left(\\begin{bmatrix}\n                                    \\mu_f\\\\\n                                    \\mu_{f\\times g}\\\\\n                                  \\end{bmatrix},\n                                \\begin{bmatrix}\n                                  \\sigma^2_f & 0\\\\\n                                  0& \\sigma^2_{f\\times g}\\\\\n                                \\end{bmatrix}\n                                \\right)\\]\n\n\n\n\nHere, the model has two independent hierarchy, one changes for a sample \\(i\\) as a single intercept hierarchy and the other will change for a sample \\(i\\) only when the level of factor \\(g\\) is within the level of factor \\(f\\)."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#nested-hierarchies-1",
    "href": "slides/08_Complex_hierarchical_model/index.html#nested-hierarchies-1",
    "title": "Complex hierarchical models",
    "section": "Nested hierarchies ?",
    "text": "Nested hierarchies ?"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#uncorrelated-intercept-and-slope-hierarchy",
    "href": "slides/08_Complex_hierarchical_model/index.html#uncorrelated-intercept-and-slope-hierarchy",
    "title": "Complex hierarchical models",
    "section": "Uncorrelated intercept and slope hierarchy",
    "text": "Uncorrelated intercept and slope hierarchy\n\nlme4 notation : y ~ x + (x || f) or y ~ 1 + x + (1 | f) + (0 + x | g)\n\n\n\nThis model assumes there is a hierarchy that varies independently among the levels of factor f for the intercept and the slope.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{0f}+\\mathbf{z}\\mathbf{b}_{0f},\\sigma^2\\mathbf{I})\\] or\n\\[y_i = b_{0f[i]}+b_{1f[i]}z_i + \\varepsilon \\quad\\forall\\quad i = 1\\dots n\\]\n\n\n\n\nThis is because in this model\n\\[\\begin{bmatrix}\n    b_0\\\\\n    b_1\\\\\n\\end{bmatrix} \\sim \\mathcal{N}\\left(\\begin{bmatrix}\n                                    \\mu_{b_0f}\\\\\n                                    \\mu_{b_1f}\\\\\n                                  \\end{bmatrix},\n                                \\begin{bmatrix}\n                                  \\sigma^2_{b_0f} & 0\\\\\n                                  0& \\sigma^2_{b_1f}\\\\\n                                \\end{bmatrix}\n                                \\right)\\]"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#uncorrelated-intercept-and-slope-hierarchy-1",
    "href": "slides/08_Complex_hierarchical_model/index.html#uncorrelated-intercept-and-slope-hierarchy-1",
    "title": "Complex hierarchical models",
    "section": "Uncorrelated intercept and slope hierarchy",
    "text": "Uncorrelated intercept and slope hierarchy"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#a-small-step-back",
    "href": "slides/08_Complex_hierarchical_model/index.html#a-small-step-back",
    "title": "Complex hierarchical models",
    "section": "A small step back",
    "text": "A small step back\n\n\nThe structure of the hierarchy discussed so far were “less complex” in the sense that\n\n\n\n\n\nA single variance parameter is estimated\n\n\\[\\sigma^2_{f}\\]\n\n\n\n\n\nMultiple independent variance parameters are estiamted\n\n\\[\n\\begin{bmatrix}\n  \\sigma^2_f & 0\\\\\n  0& \\sigma^2_{g}\\\\\n\\end{bmatrix}\n\\]\n\n\n\n\nIn Bayesian, having uncorrelated variance allows us to sample variance parameter independently even with mutiple factors, which is computationally more efficient.\n\n\n\n\nFrom this point on, we will look at more complex covariance structures where the hierarchical levels are not independent from each other."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#correlated-intercept-and-slope-hierarchy",
    "href": "slides/08_Complex_hierarchical_model/index.html#correlated-intercept-and-slope-hierarchy",
    "title": "Complex hierarchical models",
    "section": "Correlated intercept and slope hierarchy",
    "text": "Correlated intercept and slope hierarchy\n\n\nlme4 notation : y ~ x + (x | g) or y ~ 1 + x + (1 + x | g)\n\n\n\n\nThis model assumes the hierarchy between the intercept and the slope is correlated.\n\n\n\n\nMathematically, it can be translated to\n\\[\\mathbf{y} \\sim \\mathcal{MVN}(\\mathbf{b}_{0f} +\\mathbf{z}\\mathbf{b}_{1f},\\sigma^2\\mathbf{I})\\] or\n\\[y_i = b_{0f[i]} + b_{1f[i]}z_i + \\varepsilon \\quad\\forall\\quad i = 1\\dots n\\]\n\n\n\n\nIn this model\n\\[\\begin{bmatrix}\n    b_0\\\\\n    b_1\\\\\n\\end{bmatrix}\n\\sim \\mathcal{N}\\left(\\begin{bmatrix}\n                                    \\mu_{b_0f}\\\\\n                                    \\mu_{b_1f}\\\\\n                                  \\end{bmatrix},\n                      \\begin{bmatrix}\n                        \\sigma^2_{b_0f} & \\rho_{b_0,b_1}\\sigma_{b_0f}\\sigma_{b_1f} \\\\\n                        \\rho_{b_0,b_1}\\sigma_{b_0f}\\sigma_{b_1f} & \\sigma^2_{b_1f}\n                      \\end{bmatrix}\n                \\right)\\]"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#correlated-intercept-and-slope-hierarchy-1",
    "href": "slides/08_Complex_hierarchical_model/index.html#correlated-intercept-and-slope-hierarchy-1",
    "title": "Complex hierarchical models",
    "section": "Correlated intercept and slope hierarchy",
    "text": "Correlated intercept and slope hierarchy\n\n\nThe covariance structure \\[\\begin{bmatrix}\n    b_0\\\\\n    b_1\\\\\n\\end{bmatrix}\n\\sim \\mathcal{N}\\left(\\begin{bmatrix}\n                                    \\mu_{b_0f}\\\\\n                                    \\mu_{b_1f}\\\\\n                                  \\end{bmatrix},\n                      \\begin{bmatrix}\n                        \\sigma^2_{b_0f} & \\rho_{b_0,b_1}\\sigma_{b_0f}\\sigma_{b_1f} \\\\\n                        \\rho_{b_0,b_1}\\sigma_{b_0f}\\sigma_{b_1f} & \\sigma^2_{b_1f}\n                      \\end{bmatrix}\n                \\right)\\]\nneeds to be discussed a bit more.\n\n\n\n\nNotation\n\n\n\n\nIn the covariance matrix,\n\n\n\n\n\n\\(\\rho_{b_0,b_1}\\) is the correlation between \\(b_0\\) and \\(b_1\\)\n\n\n\n\n\n\n\\(\\rho_{b_0,b_1}\\sigma_{b_0}\\sigma_{b_1}\\) is the covariance between \\(b_0\\) and \\(b_1\\)\n\n\n\n\n\nInterpretation\n\n\n\n\nA covariance matrix with non-zero covariance describes dependence between the \\(b\\)s, which can tell us both the strength of the relation between pairs of parameters and the variance structure."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#correlated-intercept-and-slope-hierarchy-2",
    "href": "slides/08_Complex_hierarchical_model/index.html#correlated-intercept-and-slope-hierarchy-2",
    "title": "Complex hierarchical models",
    "section": "Correlated intercept and slope hierarchy",
    "text": "Correlated intercept and slope hierarchy"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#so-far-what-we-have-done",
    "href": "slides/08_Complex_hierarchical_model/index.html#so-far-what-we-have-done",
    "title": "Complex hierarchical models",
    "section": "So far what we have done",
    "text": "So far what we have done"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#what-we-can-do-now",
    "href": "slides/08_Complex_hierarchical_model/index.html#what-we-can-do-now",
    "title": "Complex hierarchical models",
    "section": "What we can do now !",
    "text": "What we can do now !"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#combining-different-types-of-hierarchy",
    "href": "slides/08_Complex_hierarchical_model/index.html#combining-different-types-of-hierarchy",
    "title": "Complex hierarchical models",
    "section": "Combining different types of hierarchy",
    "text": "Combining different types of hierarchy\nWith what we learned so far, it is possible to build more complex model by combining the building blocks we went over in the last few hours.\n\nThe best way to do this is to immerse ourselve into a particular problem.\n\n\nSo, in the next slides we will discuss about the pumpkinseed (Lepomis gibbosus)"
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#combining-different-types-of-hierarchy-1",
    "href": "slides/08_Complex_hierarchical_model/index.html#combining-different-types-of-hierarchy-1",
    "title": "Complex hierarchical models",
    "section": "Combining different types of hierarchy",
    "text": "Combining different types of hierarchy\nFictive context\nPumpkinseed (Lepomis gibbosus) growth has been studied in the lakes of the Station de biologie des Laurentides during the famous ichthyology course given at Université de Montréal in the past 30 years.\n\nDuring these ichthyology courses, fish are sampled, measured and tag in all 15 lakes of the research station and every year fish are recaptured by students and remeasured. So far, there has been 10 teachers assistant showing there own specific way to measure Pumpkinseed, with, albeit, uneven levels of precision.\n\n\nYour superviser thinks that Pumpkinseed growth is influenced by water temperature and knows that, because of their area and depth (which are also known for these lakes), the different lakes have different average temperature.\n\n\nAfter 30 years of data, 123 fish have been sampled during 17 consecutive year."
  },
  {
    "objectID": "slides/08_Complex_hierarchical_model/index.html#pumpkinseed-growth-example",
    "href": "slides/08_Complex_hierarchical_model/index.html#pumpkinseed-growth-example",
    "title": "Complex hierarchical models",
    "section": "Pumpkinseed growth example",
    "text": "Pumpkinseed growth example\nQuestion\n\nDoes the growth of Pumpkinseed is influenced by water temperature?\n\n\n\n\n\n\n\nTry to build the model that best answer this question\n\n\nTo have the most precise model, we need to account for lakes area and depth as well as control for the temperature variation in between lakes and for divergences in sampling measurements of each year (wink, wink… teachers assistant may have an influence here as well)."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#playing-with-the-gaussian-distribution",
    "href": "slides/07_Convergence_trick/index.html#playing-with-the-gaussian-distribution",
    "title": "Convergence trick",
    "section": "Playing with the Gaussian distribution",
    "text": "Playing with the Gaussian distribution\nWhen estimating regression parameters, the Gaussian distribution is commonly used. Often what we need to do is figure out the mean and/or the variance of the Gaussian distribution that best fit the data given a particular model structure.\nHowever, for technical reasons, it is sometimes (actually, more often than we would care to advertize broadly !) very difficult to reach convergence for a particular parameter. Visually, a trace plot would look like this"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#playing-with-the-gaussian-distribution-1",
    "href": "slides/07_Convergence_trick/index.html#playing-with-the-gaussian-distribution-1",
    "title": "Convergence trick",
    "section": "Playing with the Gaussian distribution",
    "text": "Playing with the Gaussian distribution\nEven if you run the model for many, many (many !) iterations, it never seems to converge.\nWhat should we do ?"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#playing-with-the-gaussian-distribution-2",
    "href": "slides/07_Convergence_trick/index.html#playing-with-the-gaussian-distribution-2",
    "title": "Convergence trick",
    "section": "Playing with the Gaussian distribution",
    "text": "Playing with the Gaussian distribution\nThere is a very cool trick that can help us here.\nBefore we start to discuss this trick, it is important to know that sampling a standard Gaussian distribution (\\(\\mathcal{N}(0,1)\\)) is very straight forward computationally. So, the closer we get to a standard Gaussian distribution the better it is.\nThe convergence trick\nIf we think about it, the Gaussian distribution can be translated and scaled. If we can find a way to do this mathematically, we can incorporate this into our estimation procedure.\n\nAny ideas how to do this ?"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-1",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-1",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nTranslation"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-2",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-2",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nTranslation\nMathematically, translation is the equivalent of adding or subtracting a value from the mean of the distribution.\n\nThis means that\n\\[\\mathcal{N}(\\mu, \\sigma^2)\\]\n\n\nis exactly the same as\n\\[\\mathcal{N}(0, \\sigma^2) + \\mu\\]"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-3",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-3",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nScaling"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-4",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-4",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nScaling\nMathematically, scaling amounts to multiplying the Gaussian distribution by a positive number.\n\nThis means that\n\\[\\mathcal{N}(\\mu, \\sigma^2)\\]\n\n\nis exactly the same as\n\\[\\mathcal{N}(\\mu, 1) \\times \\sigma^2\\]"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-5",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-5",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nThe convergence trick amounts to sampling a standard Gaussian distribution and adjusting its mean and variance from outside the distribution\n\\[\\mathcal{N}(0, 1) \\times \\sigma^2 + \\mu\\] When implementing an MCMC in Stan (or any other such software), this trick allows for convergence to be much more efficient."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-6",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-6",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\n\nThe example I gave above is straight forward to visualize but is badly adapted to most problems because most regression models require that many parameters be sampled at once."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-7",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-7",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\n\nThe example I gave above is straight forward to visualize but is badly adapted to most problems because most regression models require that many parameters be sampled at once.\nTo do this, we need to work with a multivariate Gaussian distribution."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-8",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-8",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\n\nThe example I gave above is straight forward to visualize but is badly adapted to most problems because most regression models require that many parameters be sampled at once.\nTo do this, we need to work with a multivariate Gaussian distribution.\nThe good news is that the convergence trick works also with a multivariate Gaussian distribution. However, we need to rely on matrix algebra to translate and scale a multivariate Gaussian distribution properly."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-9",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-9",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\n\nThe example I gave above is straight forward to visualize but is badly adapted to most problems because most regression models require that many parameters be sampled at once.\nTo do this, we need to work with a multivariate Gaussian distribution.\nThe good news is that the convergence trick works also with a multivariate Gaussian distribution. However, we need to rely on matrix algebra to translate and scale a multivariate Gaussian distribution properly.\nTo show how our convergence trick works for a multivariate Gaussian distribution, let’s first visualize the two dimensional version of this distribution."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#bivariate-gaussian-distribution",
    "href": "slides/07_Convergence_trick/index.html#bivariate-gaussian-distribution",
    "title": "Convergence trick",
    "section": "Bivariate Gaussian distribution",
    "text": "Bivariate Gaussian distribution\n\\[\\mathcal{MVN}\\left(\n\\begin{bmatrix}\n  0\\\\\n  0\\\\\n\\end{bmatrix},\n\\begin{bmatrix}\n  2 & -1\\\\\n  -1 & 2\\\\\n\\end{bmatrix}\\right)\\]"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-10",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-10",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nMultivariate Gaussian distribution\nTranslation\nFor a multivariate distribution, a translation amounts to adding a vector of values to make the translation.\nMathematically, this means that\n\\[\\mathcal{MVN}\\left(\n\\begin{bmatrix}\n  \\mu_1\\\\\n  \\vdots\\\\\n  \\mu_n\\\\\n\\end{bmatrix},\n\\mathbf{\\Sigma}\\right)=\\mathcal{MVN}\\left(\n\\begin{bmatrix}\n  0\\\\\n  \\vdots\\\\\n  0\\\\\n\\end{bmatrix},\n\\mathbf{\\Sigma}\\right) + \\begin{bmatrix}\n  \\mu_1\\\\\n  \\vdots\\\\\n  \\mu_n\\\\\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-11",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-11",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nMultivariate Gaussian distribution\nScaling\nUnlike for the univariate Gaussian distribution, scalling for a multivariate distribution is a little trickier to perform… But mathematician and statistician have worked hard to figure out how to do this properly.\nHowever, we need to delve a little deeper into matrix algebra to understand how to scale a multivariate Gaussian distribution."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#scaling-a-covariance-matrix",
    "href": "slides/07_Convergence_trick/index.html#scaling-a-covariance-matrix",
    "title": "Convergence trick",
    "section": "Scaling a covariance matrix",
    "text": "Scaling a covariance matrix\n\nFirst recall that a covariance matrix \\(\\mathbf{\\Sigma}\\) is a square matrix (i.e. it is an \\(n\\times n\\) matrix).\nTo scale \\(\\mathbf{\\Sigma}\\), we cannot only multiply it by a scalar or even by a single matrix, we need to use the following matrix multiplication\n\\[\\mathbf{L}\\mathbf{\\Sigma}\\mathbf{L}^t\\] where \\(\\mathbf{L}\\) is a \\(p\\times n\\) matrix of weight to be used for the scaling (a “scaling” matrix) and \\(\\mathbf{L}^t\\) is its tranpose.\nThe technical reason why we need to use the equation above is to ensure that the resulting scaled covariance matrix also has an \\(n \\times n\\) dimension.\nIf only \\[\\mathbf{L}\\mathbf{\\Sigma}\\] is used the dimension of the resulting matrix also would be \\(p \\times p\\)."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#square-root-of-a-matrix",
    "href": "slides/07_Convergence_trick/index.html#square-root-of-a-matrix",
    "title": "Convergence trick",
    "section": "Square-root of a matrix",
    "text": "Square-root of a matrix\n\nBecause in our problem weighting (or scaling) matrices is usually done with other covariance matrices, to apply the matrix scaling operation described previously, we need to find a way to square-root a matrix.\nThis where the genious of André-Louis Cholesky comes to the rescue."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#square-root-of-a-matrix-1",
    "href": "slides/07_Convergence_trick/index.html#square-root-of-a-matrix-1",
    "title": "Convergence trick",
    "section": "Square-root of a matrix",
    "text": "Square-root of a matrix\nCholesky decomposition\n\nAndré-Louis Cholesky discovered a matrix decomposition approach probably around 1902 (so when he was 27 years old!), although it was attributed to him a few years after his death.\nThe Cholesky decomposition allows to decompose a square matrix in a triangular matrix, which, when multiplied by its transposed will allow us to recover the initial matrix.\nIn coloquial terms, the Cholesky decomposition is the equivalent of a square root for matrices.\nIn math terms the Cholesky decomposition is defined as \\[\\mathbf{A} = \\mathbf{L}\\mathbf{L}^t\\]"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#square-root-of-a-matrix-2",
    "href": "slides/07_Convergence_trick/index.html#square-root-of-a-matrix-2",
    "title": "Convergence trick",
    "section": "Square-root of a matrix",
    "text": "Square-root of a matrix\nCholesky decomposition\nExample\n\\[\\mathbf{A} = \\mathbf{L}\\mathbf{L}^t\\]\n\\[\n        \\begin{bmatrix}\n            1 & 1 & 1\\\\\n            1 & 5 & 5\\\\\n            1 & 5 & 14\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            1 & 0 & 0\\\\\n            1 & 2 & 0\\\\\n            1 & 2 & 3 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            1 & 1 & 1\\\\\n            0 & 2 & 2\\\\\n            0 & 0 & 3 \\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-12",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-12",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nMultivariate Gaussian distribution\nScaling\n\nTo scale the following multivariate Gaussian distribution \\[\\mathcal{MVN}\\left(\\boldsymbol{\\mu},\\mathbf{\\Sigma}\\right),\\]\nThe following steps need to be applied\n\nApply the Cholesky decomposition on the scaling matrix, here \\(\\mathbf{\\Sigma}\\) \\[\\mathbf{\\Sigma} = \\mathbf{L}\\mathbf{L}^t\\]\nMultiply the \\(\\mathbf{L}\\) matrix to a standard variance multivariate Gaussian distribution\n\n\\[\\mathbf{L}\\cdot \\mathcal{MVN}\\left(\\boldsymbol{\\mu},\\mathbf{I}\\right)\\cdot\\mathbf{L}^t.\\]\nRecall, that \\(\\mathbf{I}\\) is the identity matrix."
  },
  {
    "objectID": "slides/07_Convergence_trick/index.html#the-convergence-trick-13",
    "href": "slides/07_Convergence_trick/index.html#the-convergence-trick-13",
    "title": "Convergence trick",
    "section": "The convergence trick",
    "text": "The convergence trick\nMultivariate Gaussian distribution\nIf we apply translation and scaling together on a multivariate Gaussian distribution, we get\n\\[\\mathbf{L}\\cdot \\mathcal{MVN}\\left(\\mathbf{0},\\mathbf{I}\\right)\\cdot\\mathbf{L}^t + \\boldsymbol{\\mu}\\] When implementing in Stan some of the models we will discuss in this course, this convergence trick becomes very practical because it can lead a model to convergence much faster than without using this trick."
  },
  {
    "objectID": "about.html#cibles-de-formation",
    "href": "about.html#cibles-de-formation",
    "title": "Advanced Statistics and hierarchical models",
    "section": "Cibles de formation",
    "text": "Cibles de formation\nApprendre la théorie statistique pour mieux construire, appliquer et interpréter différents modèles statistiques appliqués à des systèmes biologiques. Devenir familier avec la recherche primaire en en modélisation statistique de systèmes biologiques. Développer des connaissances et gagner de l’expérience à travailler de façon collaborative sur des problématiques lié au développement et à l’application de méthodes statisiques.\nThis course will feature hierarchical models and spatial statistics."
  },
  {
    "objectID": "about.html#course-instructors",
    "href": "about.html#course-instructors",
    "title": "Advanced Statistics and hierarchical models",
    "section": "Course Instructors",
    "text": "Course Instructors\n\n\n\n\n\n\nDr Guillaume Blanchet\n\n\n\n\n\n\n\nDr Andrew MacDonald\n\n\n\n\n\n\n\nDr Vincent Tolon"
  },
  {
    "objectID": "topics/intercept_only/index.html",
    "href": "topics/intercept_only/index.html",
    "title": "Modèles hiérarchiques pour les sciences de la vie",
    "section": "",
    "text": "Understanding a hierarchical model as a model for parameters\nIntroduce\nOne Weird Trick (you Supervisor will be Amazed)— mean centering and group mean centering\n\na model for parameters\nstart withglobal aerages of seach tgroup., our question,is, what create this variation in averages?\nshow distribution of sample averages Do this for the average of the distributions, showing their interactions with each other, their distribution oacross all values.\nStarting with just the distribution of abundances across the species and plots.\nThen move to an intercept-only poisson model : distribution across plots\nreally take time: build up a model of multiple averages per species and multiple per plot\nor would the penguins be better for this? Consider the different islands and the different species\nhonestly could do it with both.\nThen try the following\nmodelling an average modelling group means modelling more than one group mean\na process: * Look at your data * think about “0” – where should it be? what does it mean? * think about units – how much of a difference in your “X” matters to your “y”?\n\nmodel the average and standard deviation of bill size (or of species abudance)\n\n\\[\n\\begin{align}\nY_s &\\sim \\text{Poisson}(\\lambda_s) \\\\\n\\log{\\lambda_s} &\\sim \\text{Normal}(300, 100)  \\\\\n\\end{align}\n\\]\n\na quick note – centering the response, i.e. taking the average out of the prior on the averages\nlook at the averages\nhow could we describe these averages? a simple model: mean and standard deviation\n\n\ndata(\"mite\", package = \"vegan\")\n\nspp_names <- colnames(mite)\nspp_names <- setNames(1:ncol(mite), colnames(mite))\n\n\nmite_long <- mite |> \n  tidyr::pivot_longer(dplyr::everything(), names_to = \"spp\", values_to = \"abd\") |> \n  dplyr::mutate(group_id = spp_names[spp])\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: C:/Users/Utilisateur/Documents/.cmdstan/cmdstan-2.30.1\n\n\n- CmdStan version: 2.30.1\n\n\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n\ngroup_avg_nopool <- cmdstan_model(\"topics/intercept_only/group_avg_nopool.stan\", \n                                  pedantic = TRUE)\n\nWarning in readLines(stan_file): incomplete final line found on\n'topics/intercept_only/group_avg_nopool.stan'\n\nsamp_group_avg_nopool <- group_avg_nopool$sample(data = list(\n  N = nrow(mite_long),\n  N_groups = ncol(mite),\n  group_id = mite_long$group_id,\n  abd = mite_long$abd\n))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.9 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.8 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 1.0 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.9 seconds.\nTotal execution time: 4.4 seconds.\n\n\n\nlibrary(tidyverse)\nlibrary(tidybayes)\nrvars_group_means_unpooled <- samp_group_avg_nopool |> \n  tidybayes::gather_rvars(group_mean[group_id]) |> \n  dplyr::mutate(spp = names(spp_names)[group_id],\n                spp = fct_reorder(spp, .value, .fun = median))\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = spp, dist = .value)) + \n  tidybayes::stat_halfeye()\n\n\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = spp, dist = exp(.value))) + \n  tidybayes::stat_halfeye()\n\n\n\ncolMeans(mite)\n\n    Brachy       PHTH       HPAV       RARD       SSTR    Protopl       MEGR \n 8.7285714  1.2714286  8.5142857  1.2142857  0.3142857  0.3714286  2.1857143 \n      MPRO       TVIE       HMIN      HMIN2       NPRA       TVEL       ONOV \n 0.1571429  0.8285714  4.9142857  1.9571429  1.8857143  9.0571429 17.2714286 \n      SUCT       LCIL   Oribatl1   Ceratoz1       PWIL   Galumna1   Stgncrs2 \n16.9571429 35.2571429  1.8857143  1.2857143  1.0857143  0.9571429  0.7285714 \n      HRUF   Trhypch1       PPEL       NCOR       SLAT       FSET   Lepidzts \n 0.2285714  2.6142857  0.1714286  1.1285714  0.4000000  1.8571429  0.1714286 \n  Eupelops   Miniglmn       LRUG      PLAG2   Ceratoz3   Oppiminu   Trimalc2 \n 0.6428571  0.2428571 10.4285714  0.8000000  1.3000000  1.1142857  2.0714286 \n\n\nI could easily add these colmeans to the second plot above\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = spp, dist = exp(.value))) + \n  tidybayes::stat_halfeye() +\n  geom_point(aes(y = spp, x = value), \n             inherit.aes = FALSE,\n             data = enframe(colMeans(mite), name = \"spp\"),\n             col = \"red\")\n\n\n\n\nBefore we jump to considering this as a hierarchical model, let’s look at another way of writing this Stan code\nFirst of all, I could have written this as a for-loop. I chose to vectorize it, and you can read more about it in the Stan user manual here.\n\n# for-loop version\n\nYou migth prefer seeing it this way because this lets you keep the data in the format you found it. you might also find it more readable. For models of this size, there will be no difference in speed between the two. But in bigger models, the first way I showed will be faster. this is because of the way that th Stan algorithm works when evaluatint the likelihood section. You can read more about it here [TK]\nWhether you choose a vectorized or for-loop approach to writing the likelihood, there is another, much more important alternative to writing a likelihood."
  },
  {
    "objectID": "topics/intercept_only/index.html#rewriting-the-normal-distribution",
    "href": "topics/intercept_only/index.html#rewriting-the-normal-distribution",
    "title": "Modèles hiérarchiques pour les sciences de la vie",
    "section": "rewriting the Normal distribution",
    "text": "rewriting the Normal distribution\n\\[\n\\text{Normal}(\\mu, \\sigma) = \\mu + z \\times \\sigma\n\\]\nif\n\\[\nz \\sim \\text{Normal}(0, 1)\n\\]\nyou can choose to write a normal distribution two ways. In the first, you consider the mean and standard devation as parameters “inside” the distribution, in the other, you start with a standard normal distribution and first scale it (multiply by the standard deviation) and then shift it (add in the average)\nThe result is a distribution that slides around the number line, like this:\n\n## tk animation\n\nWe can rewrite the first model in exactly this syntax\n\ngroup_avg_nopool_nc <- cmdstan_model(\"topics/intercept_only/group_avg_nopool_nc.stan\", \n                                  pedantic = TRUE)\n\nsamp_group_avg_nopool_nc <- group_avg_nopool_nc$sample(data = list(\n  N = nrow(mite_long),\n  N_groups = ncol(mite),\n  group_id = mite_long$group_id,\n  abd = mite_long$abd)\n)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 1.7 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 1.6 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 1.8 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 1.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.7 seconds.\nTotal execution time: 7.4 seconds.\n\n\nThis is an interesting fact that we will use later, but which I wanted to show now, separately from studying hierarchical modesls\n\nA model for parameters\nlet’s go back to the original differences between groups.. this time using species data\nCan also run the above model with row numbers\n\nmite_long_group <- mite |> \n  tibble::rowid_to_column() |> \n  pivot_longer(-rowid, names_to = \"spp\", values_to = \"abd\") |> \n  rename(group_id = rowid)\n\nsamp_group_avg_nopool_nc <- group_avg_nopool_nc$sample(data = list(\n  N = nrow(mite_long_group),\n  N_groups = max(mite_long_group$group_id),\n  group_id = mite_long_group$group_id,\n  abd = mite_long_group$abd))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 2.2 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 1.9 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 2.0 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 1.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 2.0 seconds.\nTotal execution time: 8.6 seconds.\n\nrvars_group_means_unpooled <- samp_group_avg_nopool_nc |> \n  tidybayes::gather_rvars(group_mean[group_id]) |> \n  dplyr::mutate(spp = names(spp_names)[group_id],\n                spp = fct_reorder(spp, .value, .fun = median))\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = group_id, dist = .value)) + \n  tidybayes::stat_halfeye()\n\n\n\n\nnow, let’s stop for a second and look at the point estimates for each plot in the dataset:\n\nrvars_group_means_unpooled |> \n  mutate(site_average = median(.value)) |> \n  ggplot(aes(x = site_average)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nAre you using the median to calculate something you’re calling an average ? what is going on?! A: I did this on purpose to show this distinction. the PARAMETER we’re talking about is the average abundance in each site. We don’t have a single value for this average, instead we have 2000 possible values, according to our model. We could choose to summarize those numbers any way we want – often, the median is a good choice.\n\nWhere do these differences in group mean come from? The simplest possible model might be that there is some average mite abundance, and some plots have more or less than this average. In other words, a normal distribution.\nLet’s add this model into our code\n\ngroup_avg_partpool <- cmdstan_model(\"topics/intercept_only/group_avg_partpool.stan\",\n                                    pedantic = TRUE)\n\nsamp_group_avg_partpool <- group_avg_partpool$sample(data = list(\n  N = nrow(mite_long_group),\n  N_groups = max(mite_long_group$group_id),\n  group_id = mite_long_group$group_id,\n  abd = mite_long_group$abd))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \n\n\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpgT7jTq/model-62a0151f72ab.stan', line 14, column 2 to column 33)\n\n\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 1 \n\n\nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 1.0 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpgT7jTq/model-62a0151f72ab.stan', line 14, column 2 to column 33)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 1.1 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \n\n\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpgT7jTq/model-62a0151f72ab.stan', line 14, column 2 to column 33)\n\n\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 3 \n\n\nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 1.1 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \n\n\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpgT7jTq/model-62a0151f72ab.stan', line 14, column 2 to column 33)\n\n\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 4 \n\n\nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 1.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.1 seconds.\nTotal execution time: 4.7 seconds.\n\nsamp_group_avg_partpool |> \n  gather_rvars(group_mean[spp]) |> \n  arrange(median(.value))\n\n# A tibble: 70 × 3\n     spp .variable         .value\n   <int> <chr>         <rvar[1d]>\n 1    57 group_mean  -0.88 ± 0.25\n 2    62 group_mean  -0.62 ± 0.22\n 3    61 group_mean   0.25 ± 0.14\n 4    54 group_mean   0.39 ± 0.14\n 5    55 group_mean   0.54 ± 0.13\n 6    44 group_mean   0.57 ± 0.12\n 7    24 group_mean   0.84 ± 0.11\n 8    23 group_mean   0.85 ± 0.11\n 9    41 group_mean   0.85 ± 0.11\n10    63 group_mean   0.91 ± 0.11\n# … with 60 more rows\n\n\n\nsamp_group_avg_partpool |> \n  gather_rvars(mu, sigma)\n\n# A tibble: 2 × 2\n  .variable        .value\n  <chr>        <rvar[1d]>\n1 mu         1.33 ± 0.070\n2 sigma      0.57 ± 0.054"
  },
  {
    "objectID": "topics/intercept_only/index.html#regularization-a-simple-simulation",
    "href": "topics/intercept_only/index.html#regularization-a-simple-simulation",
    "title": "Modèles hiérarchiques pour les sciences de la vie",
    "section": "Regularization: a simple simulation",
    "text": "Regularization: a simple simulation\none of the best and most useful aspects of hierarchical models is one which is not easy to see in our chosen datasets! Instead, I’m going to simulate some data to demonstrate it.\n\nset.seed(1234)\nfake_clutch_size_data <- tibble::tibble(\n  site_id = 1:42,\n  n_nests_per_site = sample(size = max(site_id),\n                            x = c(33, 13, 3),\n                            prob = c(.1, .2, .7),\n                            replace = TRUE),\n  site_mean = rnorm(n = max(site_id),\n                    mean = log(10), \n                    sd = .7)) |> \n  rowwise() |> \n  mutate(clutch_size = list(rpois(n = n_nests_per_site, \n                                  lambda = exp(site_mean))))\n\n\nfake_clutch_size_data |> \n  # unnest(clutch_size) |> \n  mutate(mean_cs = mean(clutch_size)) |> \n  ggplot(aes(x = exp(site_mean), y = mean_cs,\n             fill = as.factor(n_nests_per_site))) + \n  geom_point(pch = 21, size = 5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  geom_abline(slope = 1, intercept = 0)\n\n\n\n\ncan also look at it going through 0\n\nnopool_fig <- fake_clutch_size_data |> \n  # unnest(clutch_size) |> \n  mutate(mean_cs = mean(clutch_size)) |> \n  ggplot(aes(x = exp(site_mean), y = mean_cs - exp(site_mean),\n             fill = as.factor(n_nests_per_site))) + \n  geom_point(pch = 21, size = 5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  geom_abline(slope = 0, intercept = 0)\n\nin both cases you can see that the green values are off of the true value – just by chance they ended up above or below the real value\nlet’s fit our model from above to this!\n\nunnest_fake_cs <- unnest(fake_clutch_size_data, cols = \"clutch_size\")\n\ngroup_avg_partpool_nests_samp <- group_avg_partpool$sample(\n  data = with(unnest_fake_cs, \n              list(N = length(clutch_size),\n                   N_groups = max(site_id),\n                   group_id = site_id,\n                   abd = clutch_size\n              ))\n)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.2 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpgT7jTq/model-62a0151f72ab.stan', line 14, column 2 to column 33)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.2 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.2 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 1.4 seconds.\n\n\n\ntruth_posterior_combined <- group_avg_partpool_nests_samp |> \n  gather_rvars(group_mean[site_id]) |> \n  mutate(mean_cs = median(.value)) |> \n  select(-.value) |> \n  left_join(fake_clutch_size_data |> select(site_id, n_nests_per_site, site_mean))\n\nJoining, by = \"site_id\"\n\ntruth_posterior_combined |> \n  ggplot(\n    aes(\n      x = site_mean,\n      y = mean_cs - site_mean,\n      fill = as.factor(n_nests_per_site))) + \n  geom_point(pch = 21, size = 5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  geom_abline(slope = 0, intercept = 0)\n\n\n\nnopool_fig + \n  geom_point(\n    aes(\n      x = site_mean,\n      y = mean_cs - site_mean),\n    data = truth_posterior_combined) + \n  facet_wrap(~n_nests_per_site)\n\n\n\ntruth_posterior_combined |> \n  filter(exp(site_mean)>50)\n\n# A tibble: 1 × 5\n  site_id .variable  mean_cs n_nests_per_site site_mean\n    <int> <chr>        <dbl>            <dbl>     <dbl>\n1      41 group_mean    3.98                3      4.09\n\nfake_clutch_size_data |> \n  filter(site_id == 41) |> \n  pull(clutch_size)\n\n[[1]]\n[1] 64 54 46\n\n\nSmall exercise for you: demonstrate that all 3 models described here produce answers that are exactly the same.\n\n\n\nIn the ohter, you have standard normal variation\nAnimation showing overa ll mean and error, then group means and error\nprogrssion later to negative binomial perhaps??\nanimation showing averages – group averages – species averages\nreally want to show my own style here! I think I can see how this would build together.\nI wonder, if there is a way to simulate predator-prey dynamics in space, in a model where the predator needs to have both prey and environment conditions, but they prey need only the environment. what would happen if we use causal models (or the wrong causal model) on those data, measuring predators affecting prey when there is nothing\ngroup-mean-centering as a main topic Not as a new topic but as an interesting way to describe multilevel, slope models.\nanimation of points moving together, after group-mean-centering"
  },
  {
    "objectID": "topics/discrete_predictor/index.html",
    "href": "topics/discrete_predictor/index.html",
    "title": "Palmer penguins and discrete predictors",
    "section": "",
    "text": "Let’s start by taking a look at the Palmer Penguin dataset. Let’s look at the distribution of observations of bill size.\nThere’s quite a lot of variation in these measurements, with a suggestion of perhaps more than one peak in this distribution."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#a-simple-model",
    "href": "topics/discrete_predictor/index.html#a-simple-model",
    "title": "Palmer penguins and discrete predictors",
    "section": "A simple model",
    "text": "A simple model\n\\[\n\\begin{align}\n\\text{Bill depth} &\\sim \\text{Normal}(\\mu, \\sigma)\\\\\n\\mu &\\sim \\text{Normal}(17.5, 2) \\\\\n\\sigma &\\sim \\text{Exponential}(1) \\\\\n\\end{align}\n\\]\nlet’s express the same model in Stan:\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\n\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n\nnormal_dist <- cmdstan_model(\"topics/discrete_predictor/normal_dist.stan\")\nnormal_dist\n\ndata {\n  int N;\n  vector[N] measurements;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu, sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\n\n\nThe model section looks very much like the approach shown above. I want you to notice especially how the bottom chunk has three lines, each describing a probability distribution. These are for all the probability distribution of all the quantities in the model, both observed and unobserved. Above, we state which is which. Models are devices for putting together the probability of all the quantities we are looking for. Again, a Bayesian separates the world into unmeasured or measured quantities – and above we state which are observed (the data block) and which are unobserved (the parameters block).\nWe can fit this model to data and see the result:\n\n# first we drop all NA values\npenguins_nobillNA <- penguins |> \n  #drop NA values\n  filter(!is.na(bill_depth_mm))\n\n## then we assemble the data as a list.\n## I'm using the base function with()\n##  it lets me use the variable name directly \n## without writing penguins_nobillNA$bill_depth_mm\n\nlist_bill_dep <- with(penguins_nobillNA,\n     list(N = length(bill_depth_mm),\n          measurements = bill_depth_mm))\n     \n## sample 4 chains, suppress counting iterations\nsamp_bill_dep <- normal_dist$sample(data = list_bill_dep, \n                                    parallel_chains = 4,\n                                    refresh = 0)\n\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.0 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.5 seconds.\n\n## summarize the samples for each parameter into a nice table\nsamp_bill_dep |> \n  posterior::summarise_draws() |> \n  flextable::flextable()\n\n\nvariablemeanmediansdmadq5q95rhatess_bulkess_taillp__-405.497509-405.2055000.970060540.70942410-407.399200-404.5560000.9998221,770.3722,062.557mu17.15149317.1532000.105043640.1034854816.97499517.3258051.0008173,820.2583,163.881sigma1.9742741.9719050.075417550.075397621.8537852.0992961.0001273,369.5922,598.772"
  },
  {
    "objectID": "topics/discrete_predictor/index.html#plotting-parameters.",
    "href": "topics/discrete_predictor/index.html#plotting-parameters.",
    "title": "Palmer penguins and discrete predictors",
    "section": "Plotting parameters.",
    "text": "Plotting parameters.\nWe don’t have one distribution for each of our unknown numbers: we have thousands. We need to get a sense of what these possible values mean scientifically. An excellent way to do this is by making as many pictures as possible. We will start with making plots of specific parameters.\nWe can look at the distributions easily using the bayesplot package.\n\ndraws <- samp_bill_dep$draws(variables = c(\"mu\", \"sigma\"))\n\nbayesplot::mcmc_hist(draws, pars = \"mu\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\nbayesplot::mcmc_hist(draws, pars = \"sigma\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that the distributions do not have the same shape as the prior– this is particularly true for \\(\\sigma\\). This shows an important point: the prior distribution does not determine what the posterior looks like. should I sample from the prior and show them that?\n\nlibrary(ggplot2)\nlibrary(ggdist)\n\ndraws |>  \n  posterior::as_draws_df() |> \n  ggplot(aes(x = sigma)) + \n  stat_dotsinterval()\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\nFigure 1: the package ggdist has many fun & useful ways to draw pictures of posterior distributions. Here is one called stats_dotsinterval()"
  },
  {
    "objectID": "topics/discrete_predictor/index.html#posterior-predictions-the-easy-way-to-check-your-model",
    "href": "topics/discrete_predictor/index.html#posterior-predictions-the-easy-way-to-check-your-model",
    "title": "Palmer penguins and discrete predictors",
    "section": "Posterior predictions: the easy way to check your model",
    "text": "Posterior predictions: the easy way to check your model\nPeople care so much about model diagnostics. And with good reason: you need to know how much to trust a model before using it to make a scientific claim. One way to find out which model is best would be to use them to make a prediction, and see how right you are. An alternative is to see how well the data fit your sample.\n\nPosterior prediction in R\n\n# just get some draws\ndraws <- samp_bill_dep$draws(variables = c(\"mu\", \"sigma\"))\ndraws_matrix <- posterior::as_draws_matrix(draws)\n\n## set up a matrix. for every posterior sample, \n## (that is, for a value of mu and a value of sigma) \n## draw a whole fake dataset from a normal distribution with that mean and sd. \nnsamples <- 50\nyrep <- matrix(0, ncol = list_bill_dep$N, nrow = nsamples)\n\n# pick some random rows\nset.seed(1234)\nchosen_samples <- sample(1:nrow(draws_matrix), replace = FALSE, size = nsamples)\nsubset_draws <- draws_matrix[chosen_samples,]\n\nfor (r in 1:nsamples){\n yrep[r,] <- rnorm(n = list_bill_dep$N, \n                   mean = subset_draws[r, \"mu\"], \n                   sd = subset_draws[r, \"sigma\"])\n}\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = yrep)\n\n\n\n\n\n\nPosterior predictions in Stan\nWe can simulate our own data in R if we are comfortable translating between R and Stan. However, if you want, you can do the same process in Stan. Just combine the section we just looked at with the previous work on data simulation we started with:\n\nnormal_dist_rng <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng.stan\")\n\nnormal_dist_rng\n\ndata {\n  int N;\n  vector[N] measurements;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu, sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu, sigma);\n  }\n}\n\n\nHere we have a handy random number generator inside Stan.\n\nsamp_bill_dep_rng <- normal_dist_rng$sample(\n  data = list_bill_dep,\n  refresh = 0,\n  parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpjkCX3Q/model-2b064a36d475.stan', line 10, column 2 to column 35)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 1 finished in 0.4 seconds.\nChain 2 finished in 0.3 seconds.\nChain 3 finished in 0.3 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 0.4 seconds.\n\ndraws <- samp_bill_dep_rng$draws(variables = c(\"yrep\"))\ndraws_matrix <- posterior::as_draws_matrix(draws)\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = head(draws_matrix, 50))\n\n\n\n\nThe code is much shorter, because there is less to do in R. Both of these gives the same outcome: the posterior predictive distribution. This gives us a straightfoward way to test our model’s performance:\n\nwe use the model to generate fake observations.\nplot these on top of the real data\nif the data is a really poor match, we know our model has a distorted view of the world."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#different-groups-are-different",
    "href": "topics/discrete_predictor/index.html#different-groups-are-different",
    "title": "Palmer penguins and discrete predictors",
    "section": "Different groups are different",
    "text": "Different groups are different\nlet’s add in differences among species\n\npenguins |> \n  ggplot(aes(x = bill_depth_mm, fill = species))+ \n  geom_histogram(binwidth = .5) + \n  scale_fill_brewer(palette = \"Dark2\")\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nNow we can see that the distribution is in fact three different shapes, all placed together.\n\n\n\n\n\n\nWarning\n\n\n\nSometimes scientists will plot histograms of data at the beginning of a research project, and use the histogram to decide if their data are “normally distributed” or not. This is not helpful! Instead, decide on a model first, and ask yourself what kind of data you expect."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#stan-code-for-species-differences",
    "href": "topics/discrete_predictor/index.html#stan-code-for-species-differences",
    "title": "Palmer penguins and discrete predictors",
    "section": "Stan code for species differences",
    "text": "Stan code for species differences\n\\[\n\\begin{align}\n\\text{Bill depth}_{\\text{sp}[i]} &\\sim \\text{Normal}(\\mu_{\\text{sp}[i]}, \\sigma) \\\\\n\\mu &\\sim \\text{Normal}(17, 2) \\\\\n\\sigma &\\sim \\text{Exponential}(2) \\\\\n\\end{align}\n\\]\n\nnormal_dist_rng_spp_forloop <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng_spp_forloop.stan\")\n\nnormal_dist_rng_spp_forloop\n\ndata {\n  int N;\n  vector[N] measurements;\n  array[N] int<lower=1,upper=3> spp_id;\n}\nparameters {\n  vector[3] mu;\n  real<lower=0> sigma;\n}\nmodel {\n  for (i in 1:N){\n    measurements[i] ~ normal(mu[spp_id[i]], sigma);\n  }\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu[spp_id[i]], sigma);\n  }\n}\n\n\nThere’s a few differences to notice here:\n\nin the data block: We have a new input! A declaration of the array of integers at the top, saying if this is “species 1”, “species 2”, or “species 3”\nmu is a vector now. why?\nnotice the for-loop."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#quick-detour-vector-indexing",
    "href": "topics/discrete_predictor/index.html#quick-detour-vector-indexing",
    "title": "Palmer penguins and discrete predictors",
    "section": "Quick detour : vector indexing",
    "text": "Quick detour : vector indexing\nA very useful technique, in both R and Stan, is transforming a vector with indexing. Vector indexing requires two vectors: the first contains values we want to select or replicate, the second contains integers giving the positions of the elements we want. For example:\n\nsome_values <- c(\"taco\", \"cat\", \"goat\", \"cheeze\", \"pizza\")\npositions <- c(1,1,2,2,3,1,1,5)\n\nsome_values[positions]\n\n[1] \"taco\"  \"taco\"  \"cat\"   \"cat\"   \"goat\"  \"taco\"  \"taco\"  \"pizza\"\n\n\nThis works for number values as well, and is very useful when you want to do simulations! let’s simulate three groups with different averages.\n\nset.seed(525600)\nsome_means <- c(12, 17, 19)\nsome_labels <- c(\"taco\", \"cat\", \"goat\")\n\ndf_of_means <- data.frame(index = rep(1:3, each = 42)) |> \n  mutate(the_mean = some_means[index],\n         labels = some_labels[index],\n         obs = rnorm(n = length(the_mean),\n                     mean = the_mean,\n                     sd = 1))\n\ndf_of_means |> \n  ggplot(aes(x = obs, fill = labels)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#vector-indexing-in-stan",
    "href": "topics/discrete_predictor/index.html#vector-indexing-in-stan",
    "title": "Palmer penguins and discrete predictors",
    "section": "Vector indexing in Stan",
    "text": "Vector indexing in Stan\nWe can use this precise technique in Stan:\n\nnormal_dist_rng_spp <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng_spp.stan\")\n\nnormal_dist_rng_spp\n\ndata {\n  int N;\n  vector[N] measurements;\n  array[N] int<lower=1,upper=3> spp_id;\n}\nparameters {\n  vector[3] mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu[spp_id], sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu[spp_id[i]], sigma);\n  }\n}\n\n\nThe only difference to the previous model is in the line with the for-loop, which is now replaced with a vectorized expression. This is faster to write and will run faster in Stan. However it’s not possible in every case.\n\nSampling the species model\nWe have to make a new data list, since we’ve added a new input: a vector of numbers 1, 2, or 3 that tells us if we are working with the first, second, or third species.\n\nlist_bill_dep_spp <- with(penguins_nobillNA,\n     list(\n       N = length(bill_depth_mm),\n       measurements = bill_depth_mm,\n       spp_id = as.numeric(as.factor(species))\n     )\n)\n     \nsamp_normal_dist_rng_spp <- normal_dist_rng_spp$sample(\n  data = list_bill_dep_spp, \n  parallel_chains = 4,\n  refresh = 0)\n\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.4 seconds.\nChain 2 finished in 0.4 seconds.\nChain 3 finished in 0.4 seconds.\nChain 4 finished in 0.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.4 seconds.\nTotal execution time: 0.5 seconds.\n\nsamp_normal_dist_rng_spp$draws(variables = c(\"mu\", \"sigma\")) |> \n  posterior::summarise_draws() |> \n  flextable::flextable()\n\n\nvariablemeanmediansdmadq5q95rhatess_bulkess_tailmu[1]18.34441518.344300.090618300.0877699218.19566518.4941101.00048904,260.9442,939.608mu[2]18.41545718.415700.134137020.1347683418.19259018.6352000.99990694,350.8852,973.301mu[3]14.98818414.988200.099596830.0977033414.82240015.1532151.00172114,391.9143,055.671sigma1.1233971.121380.042827090.042632161.0553391.1972731.00110134,408.1102,924.840\n\n\nLet’s take a look at this in Shinystan\n\nshinystan::launch_shinystan(samp_normal_dist_rng_spp)\n\nand we can repeat the posterior checking from before:\n\nspp_yrep_draws <- samp_normal_dist_rng_spp$draws(variables = c(\"yrep\"))\nspp_draws_matrix <- posterior::as_draws_matrix(spp_yrep_draws)\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = head(spp_draws_matrix, 50))\n\n\n\n\nThe predicted distribution is now much more like the real data\nWe can also make figures for each individual species. Here we will move away from using bayesplot and try to visualize our posterior using the handy functions in the tidybayes package add a link\n\nlibrary(tidybayes)\nspp_draws_df <- posterior::as_draws_df(spp_yrep_draws)\n\nnormal_dist_post_samp <- tidybayes::gather_draws(samp_normal_dist_rng_spp,\n                        yrep[row_id], \n                        ndraws = 50)\n\nnormal_dist_post_samp |> \n  mutate(species = penguins_nobillNA$species[row_id]) |> \n  ggplot(aes(x = .value, colour = species)) + \n  geom_density(aes(group = .iteration), alpha = .1) + \n  facet_wrap(~species) + \n  geom_density(aes(x = bill_depth_mm),\n               data = penguins_nobillNA,\n               colour = \"black\") + \n  scale_colour_brewer(palette = \"Dark2\")\n\n\n\n\n\n\nExercises\n\nLevel 1\n\nrepeat this experience for another variable in the dataset. Does the same code work on bill length? What about body size? What would you change about the model (if anything)\nuse bayesplot to examine the fit of body size to these data.\n\n\n\nLevel 2\n\ngenerate some random groups of your own, with known means. How well does the model fit these data\nThe present model is fixed for exactly 3 groups. how would you change it for any number of groups?\n\n\n\nLevel 3\n\nthe function tidybayes::compose_data is a convenient way to set up your data for passing it into R. Try out this function. What does it produce for our dataset? How do you need to modify our Stan program so that it works for the output of tidybayes::compose_data?\nAs you can see, the model assumes the same sigma for all species. what if you relax this?\n\n\n\n\nOptional!\nTry this on your own data!"
  },
  {
    "objectID": "topics/parameter_resampling/day_1.html#content",
    "href": "topics/parameter_resampling/day_1.html#content",
    "title": "Day 1",
    "section": "Content",
    "text": "Content\nThe Secret Weapon\nregression with discrete predictors\n\nAfternoon practical exercises"
  },
  {
    "objectID": "topics/parameter_resampling/day_1.html#course-setup-information",
    "href": "topics/parameter_resampling/day_1.html#course-setup-information",
    "title": "Day 1",
    "section": "Course setup information",
    "text": "Course setup information\n\nsite information\nplagiarism"
  },
  {
    "objectID": "topics/parameter_resampling/day_1.html#simulation",
    "href": "topics/parameter_resampling/day_1.html#simulation",
    "title": "Day 1",
    "section": "Simulation",
    "text": "Simulation"
  },
  {
    "objectID": "topics/parameter_resampling/day_1.html#quantifying-uncertainty",
    "href": "topics/parameter_resampling/day_1.html#quantifying-uncertainty",
    "title": "Day 1",
    "section": "Quantifying uncertainty",
    "text": "Quantifying uncertainty"
  },
  {
    "objectID": "topics/parameter_resampling/day_1.html#resampling",
    "href": "topics/parameter_resampling/day_1.html#resampling",
    "title": "Day 1",
    "section": "Resampling",
    "text": "Resampling\nIn frequentist models, we can use the variance covariance matrix of parameters to resample new parameters values. This lets us propagate uncertainty from the estimated parameters to the predicted relationship.\nLet’s demonstrate this with one specific mite:\n\nlrug_water <- mite_water |> \n  filter(sp == \"LRUG\")\n\nlrug_glm <- glm(pa ~ water, data = lrug_water, family = \"binomial\")\n\nNow, with our model object, we can create the resampling distribution of the model predicitons:\n\n# Set seed\nset.seed(42) # The answer !\n\n# a sequence along the range of water values in the data\npredVal <- seq(from = min(lrug_water$water),\n               to = max(lrug_water$water),\n               length.out = 30)\n\nn_resamp <- 500\n\n# Result object\nresampModel <- array(NA_real_,\n                   dim = c(length(predVal), n_resamp))\n\n# Resample model parameters and calculate model predictions\nparamMean <- summary(lrug_glm)$coefficients[,1]\nparamCov <- summary(lrug_glm)$cov.unscaled\n\n# Resample model parameters\nparamSmpl <- MASS::mvrnorm(n_resamp, paramMean, paramCov)\n\n# Calculate model predictions using the resampled model parameters\nfor(j in 1:n_resamp){\n  resampModel[,j] <- binomial(link = \"logit\")$linkinv(\n    paramSmpl[j,1] + paramSmpl[j,2] * predVal)\n}\n\n# make a plot of these predictions\nmatplot(predVal, resampModel, type = \"l\", col = \"grey\", lty = 1)\n\n\n\n\nIf we want to find some kind of confidence interval for this line, we can take the quantiles of this resampling:\n\nlow <- apply(resampModel, 1, quantile, probs = .015)\nhigh <- apply(resampModel, 1, quantile, probs = .985)\n\n# plot\nwith(lrug_water, plot(pa ~ water, pch = 21, bg = \"lightblue\"))\npolygon(c(predVal,rev(predVal)),\n        c(low,rev(high)), col=\"thistle\", border=NA)\nlines(predVal, \n      predict(lrug_glm, newdata = list(water = predVal), type = \"response\")\n      )\n\n\n\n\nWe can also do this in a tidyverse style, if you are more comfortable with that:\n\ntibble(predVal) |> \n  rowwise() |> \n  mutate(intercept = list(paramSmpl[,1]),\n         slope = list(paramSmpl[,2]),\n         prediction = list(intercept + slope*predVal),\n         prediction_probability = list(plogis(prediction)),\n         low  = quantile(prediction_probability, .015),\n         high = quantile(prediction_probability, .985)) |> \n  ggplot(aes(x = predVal, ymin = low, ymax = high)) + \n  geom_ribbon(fill = \"thistle\") + \n  theme_bw() + \n  ylim(c(0,1))"
  },
  {
    "objectID": "topics/parameter_resampling/day_1.html#bayesian-approach",
    "href": "topics/parameter_resampling/day_1.html#bayesian-approach",
    "title": "Day 1",
    "section": "Bayesian approach",
    "text": "Bayesian approach\nhere is a simple bayesian model to generate the same inference:\n\\[\n\\begin{align}\ny &\\sim \\text{Bernoulli}(p)\\\\\n\\text{logit}(p) &= \\alpha + X\\beta\\\\\n\\alpha &\\sim \\text{Normal}(-2.5, .5)\\\\\n\\beta &\\sim \\text{Normal}(0, .5)\\\\\n\\end{align}\n\\]\nnormally we would go through a careful process of checking our priors here. At this time we won’t because the point here is to show how the bayesian posterior includes uncertainty, not to demonstrate a full Bayes workflow.\nFirst we compile the model, then we’ll look at the Stan code:\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\n\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n\nlogistic_glm_stan <- cmdstan_model(\n  stan_file = \"topics/parameter_resampling/logistic_bern_logit.stan\", \n  pedantic = TRUE)\n\nlogistic_glm_stan\n\ndata {\n  int<lower=0> n;\n  vector[n] x;\n  array[n] int<lower=0,upper=1> y;\n}\nparameters {\n  real intercept;\n  real slope;\n}\nmodel {\n  y ~ bernoulli_logit(intercept + slope * x);\n  intercept ~ normal(-2.5, .5);\n  slope ~ normal(0, .5);\n}\n\n\nHere we see the same three parts of a Stan model that we have reviewed already:\n\ndata\nparameters\nprobability statements\n\nAs you can see, we are using a handy Stan function called bernoulli_logit. This function expects our prediction for the average to be on the logit scale, then applies the logit link function for us.\n\n\nAs a quick review, the logit equation, or inverse-log-odds, is written as \\[\n\\frac{e^\\mu}{1 + e^\\mu}\n\\] Which is also written as\n\\[\n\\frac{1}{1 + e^{-\\mu}}\n\\]\nStan expects our data as a list.\n\nlogistic_glm_stan_samples <- logistic_glm_stan$sample(\n  data = list(n = nrow(lrug_water),\n              y = lrug_water$pa,\n              x = lrug_water$water),\n  refresh = 0)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 1.4 seconds.\n\ncoef(lrug_glm)\n\n(Intercept)       water \n-2.48153943  0.00874349 \n\nlibrary(tidybayes)\n\nspread_rvars(logistic_glm_stan_samples, intercept, slope[]) |> \n  bind_cols(predVal = predVal) |> \n  mutate(pred = posterior::rfun(plogis)(predVal * slope + intercept)) |> \n  ggplot(aes(x = predVal, ydist = pred)) + \n  stat_dist_lineribbon() + \n  guides(fill = \"none\") + \n  ylim(c(0,1))\n\nWarning: Using the `size` aesthetic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\n\n\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\n\nAlternative parameterization\nStan contains many functions intended to facilitate writing statistical models. Above, we used the function bernoulli_logit so that we could provide the expression for the average on the logit scale.  Stan also provides an even more efficient function that we can use; it is especially good when we have more than one predictor variable and a vector of slopes:This idea is the core concept of a GLM, or generalized linear model. Statistical distributions have parameters, but for most distributions these have constraints – only some values are “allowed”. For example, the only parameter of a Bernoulli distribution is \\(p\\), the probability of success. We respect this constraint by using a link function: we write an expression for the average of a distribution that can be any real number, and put it through a link function to get the value for \\(p\\).\n\n\n\n\n\n\nWarning\n\n\n\nPLEASE NOTE below you will see the relative path to the stan file (stan/logistic.stan). Immediately below you will see the Stan file content. You can copy and paste this to your own computer!\n\n\n\nsuppressPackageStartupMessages(library(cmdstanr))\n\nlogistic_bern_glm <- cmdstan_model(stan_file = \"topics/parameter_resampling/logistic.stan\", \n                               pedantic = TRUE)\n\nlogistic_bern_glm\n\ndata {\n  int<lower=0> N;\n  matrix[N, 1] x;\n  array[N] int<lower=0,upper=1> y;\n}\nparameters {\n  real intercept;\n  vector[1] slope;\n}\nmodel {\n  intercept ~ normal(-2.5, .5);\n  slope ~ normal(0, .5);\n  y ~ bernoulli_logit_glm(x, intercept, slope);\n}"
  },
  {
    "objectID": "topics/correlated_effects/secret_weapon.html",
    "href": "topics/correlated_effects/secret_weapon.html",
    "title": "Summarizing many univariate models",
    "section": "",
    "text": "We’ve already looked at univariate models. When we fit the same model to multiple different groups, we don’t expect the same values for all the coefficients. Each thing we are studying will respond to the same variable in different ways.\nHierarchial models represent a way to model this variation, in ways that range from simple to complex.\nBefore we dive in with hierarchical structure, let’s build a bridge between these two approaches.\nThis is useful to help us understand what a hierarchical model does.\nHowever it is also useful from a strict model-building perspective – so useful that Andrew Gelman calls it a “Secret Weapon”\nTo keep things simple and univariate, let’s consider only water:\nFirst, a quick word about centering and scaling a predictor variable:\nsome things to notice about this figure:\nAs you can see, some of these estimates are high, others low. We could also plot these as histograms to see this distribution.\nOnce again, the two parameters of this model represent:"
  },
  {
    "objectID": "topics/correlated_effects/secret_weapon.html#say-it-in-stan",
    "href": "topics/correlated_effects/secret_weapon.html#say-it-in-stan",
    "title": "Summarizing many univariate models",
    "section": "Say it in Stan",
    "text": "Say it in Stan\nThe above tidyverse approach is very appealing and intuitive, but we can also do the same procedure in Stan.\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\n\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n\nall_species_unpooled <- cmdstan_model(\n  stan_file = \"topics/correlated_effects/all_species_unpooled.stan\", \n  pedantic = TRUE)\n\nmite_bin <- mite\nmite_bin[mite_bin>0] <- 1\n\nall_species_unpooled_posterior <- \n  all_species_unpooled$sample(\n    data = list(\n      n = nrow(mite_bin),\n      S = ncol(mite_bin),\n      x = with(mite.env, (WatrCont - mean(WatrCont))/100),\n      y = as.matrix(mite_bin)\n    ), \n    refresh = 0, parallel_chains = 4\n    )\n\nRunning MCMC with 4 parallel chains...\n\nChain 4 finished in 5.9 seconds.\nChain 1 finished in 6.2 seconds.\nChain 2 finished in 6.4 seconds.\nChain 3 finished in 6.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 6.3 seconds.\nTotal execution time: 6.7 seconds.\n\n\nnow let’s try to plot this:\n\n# start by looking at the names of variables\n# get_variables(all_species_unpooled_posterior)\n\npost_pred <- tidybayes::spread_rvars(all_species_unpooled_posterior, \n             intercept[spp_id], slope[spp_id]) |> \n  expand_grid(water = seq(from = -4, to = 4, length.out = 10)) |> \n  mutate(prob = posterior::rfun(plogis)(intercept + slope*water),\n         spp = colnames(mite_bin)[spp_id]) |> \n  ggplot(aes(x = water, dist = prob)) + \n  tidybayes::stat_lineribbon() + \n  facet_wrap(~spp) + \n  scale_fill_brewer(palette = \"Greens\")\n\npost_pred\n\n\n\n\n\npost_pred + \n  geom_point(aes(x = water, y = presabs), \n             inherit.aes = FALSE, \n             data = mite_data_long_transformed,\n             pch = 21, \n             fill = \"orange\")\n\n\n\n\nPlot and compare to frequentist point estimates\n\nlong_rvars <- tidybayes::gather_rvars(\n  all_species_unpooled_posterior, \n             intercept[spp_id], slope[spp_id]) \n\n\nmite_many_glm_coefs |> \n  select(spp, term, estimate)\n\n# A tibble: 70 × 3\n# Groups:   spp [35]\n   spp      term        estimate\n   <chr>    <chr>          <dbl>\n 1 Brachy   (Intercept)   2.43  \n 2 Brachy   water        -0.547 \n 3 Ceratoz1 (Intercept)   0.466 \n 4 Ceratoz1 water         0.0273\n 5 Ceratoz3 (Intercept)  -0.237 \n 6 Ceratoz3 water         0.280 \n 7 Eupelops (Intercept)  -0.464 \n 8 Eupelops water        -0.535 \n 9 FSET     (Intercept)  -0.644 \n10 FSET     water        -1.82  \n# ℹ 60 more rows"
  },
  {
    "objectID": "topics/correlated_effects/secret_weapon.html#modelling-variation-in-slopes",
    "href": "topics/correlated_effects/secret_weapon.html#modelling-variation-in-slopes",
    "title": "Summarizing many univariate models",
    "section": "Modelling variation in slopes",
    "text": "Modelling variation in slopes\nClearly there is variation among species in the values of these parameters. Like all variation, we can develop a scientific model to describe it. The simplest model we’ll consider is a simple univariate distribution.\n\nsuppressPackageStartupMessages(library(cmdstanr))\n\nall_species_partpooled_diag <- cmdstan_model(\n  stan_file = \"topics/correlated_effects/all_species_partpooled_diag.stan\", \n  pedantic = TRUE)\n\nmite_bin <- mite\nmite_bin[mite_bin>0] <- 1\n\nmite_data_list <- list(\n  Nsites = nrow(mite_bin),\n  K = 2,\n  S = ncol(mite_bin),\n  x = cbind(1, with(mite.env, (WatrCont - mean(WatrCont))/100)),\n  y = as.matrix(mite_bin))\n\nall_species_partpooled_diag_posterior <- all_species_partpooled_diag$sample(\n  data = mite_data_list,\n  refresh = 0, parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 10.8 seconds.\nChain 4 finished in 11.1 seconds.\nChain 2 finished in 11.7 seconds.\nChain 3 finished in 11.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 11.3 seconds.\nTotal execution time: 11.9 seconds.\n\n\nplot these, reproducing the figure from earlier:\n\n# get the unpooled numbers\nunpooled_slopes <- all_species_unpooled_posterior |> \n  tidybayes::gather_rvars(slope[spp])\n\ntidybayes::get_variables(all_species_partpooled_diag_posterior)\n\n  [1] \"lp__\"          \"z[1,1]\"        \"z[2,1]\"        \"z[1,2]\"       \n  [5] \"z[2,2]\"        \"z[1,3]\"        \"z[2,3]\"        \"z[1,4]\"       \n  [9] \"z[2,4]\"        \"z[1,5]\"        \"z[2,5]\"        \"z[1,6]\"       \n [13] \"z[2,6]\"        \"z[1,7]\"        \"z[2,7]\"        \"z[1,8]\"       \n [17] \"z[2,8]\"        \"z[1,9]\"        \"z[2,9]\"        \"z[1,10]\"      \n [21] \"z[2,10]\"       \"z[1,11]\"       \"z[2,11]\"       \"z[1,12]\"      \n [25] \"z[2,12]\"       \"z[1,13]\"       \"z[2,13]\"       \"z[1,14]\"      \n [29] \"z[2,14]\"       \"z[1,15]\"       \"z[2,15]\"       \"z[1,16]\"      \n [33] \"z[2,16]\"       \"z[1,17]\"       \"z[2,17]\"       \"z[1,18]\"      \n [37] \"z[2,18]\"       \"z[1,19]\"       \"z[2,19]\"       \"z[1,20]\"      \n [41] \"z[2,20]\"       \"z[1,21]\"       \"z[2,21]\"       \"z[1,22]\"      \n [45] \"z[2,22]\"       \"z[1,23]\"       \"z[2,23]\"       \"z[1,24]\"      \n [49] \"z[2,24]\"       \"z[1,25]\"       \"z[2,25]\"       \"z[1,26]\"      \n [53] \"z[2,26]\"       \"z[1,27]\"       \"z[2,27]\"       \"z[1,28]\"      \n [57] \"z[2,28]\"       \"z[1,29]\"       \"z[2,29]\"       \"z[1,30]\"      \n [61] \"z[2,30]\"       \"z[1,31]\"       \"z[2,31]\"       \"z[1,32]\"      \n [65] \"z[2,32]\"       \"z[1,33]\"       \"z[2,33]\"       \"z[1,34]\"      \n [69] \"z[2,34]\"       \"z[1,35]\"       \"z[2,35]\"       \"gamma[1]\"     \n [73] \"gamma[2]\"      \"sd_params[1]\"  \"sd_params[2]\"  \"beta[1,1]\"    \n [77] \"beta[2,1]\"     \"beta[1,2]\"     \"beta[2,2]\"     \"beta[1,3]\"    \n [81] \"beta[2,3]\"     \"beta[1,4]\"     \"beta[2,4]\"     \"beta[1,5]\"    \n [85] \"beta[2,5]\"     \"beta[1,6]\"     \"beta[2,6]\"     \"beta[1,7]\"    \n [89] \"beta[2,7]\"     \"beta[1,8]\"     \"beta[2,8]\"     \"beta[1,9]\"    \n [93] \"beta[2,9]\"     \"beta[1,10]\"    \"beta[2,10]\"    \"beta[1,11]\"   \n [97] \"beta[2,11]\"    \"beta[1,12]\"    \"beta[2,12]\"    \"beta[1,13]\"   \n[101] \"beta[2,13]\"    \"beta[1,14]\"    \"beta[2,14]\"    \"beta[1,15]\"   \n[105] \"beta[2,15]\"    \"beta[1,16]\"    \"beta[2,16]\"    \"beta[1,17]\"   \n[109] \"beta[2,17]\"    \"beta[1,18]\"    \"beta[2,18]\"    \"beta[1,19]\"   \n[113] \"beta[2,19]\"    \"beta[1,20]\"    \"beta[2,20]\"    \"beta[1,21]\"   \n[117] \"beta[2,21]\"    \"beta[1,22]\"    \"beta[2,22]\"    \"beta[1,23]\"   \n[121] \"beta[2,23]\"    \"beta[1,24]\"    \"beta[2,24]\"    \"beta[1,25]\"   \n[125] \"beta[2,25]\"    \"beta[1,26]\"    \"beta[2,26]\"    \"beta[1,27]\"   \n[129] \"beta[2,27]\"    \"beta[1,28]\"    \"beta[2,28]\"    \"beta[1,29]\"   \n[133] \"beta[2,29]\"    \"beta[1,30]\"    \"beta[2,30]\"    \"beta[1,31]\"   \n[137] \"beta[2,31]\"    \"beta[1,32]\"    \"beta[2,32]\"    \"beta[1,33]\"   \n[141] \"beta[2,33]\"    \"beta[1,34]\"    \"beta[2,34]\"    \"beta[1,35]\"   \n[145] \"beta[2,35]\"    \"treedepth__\"   \"divergent__\"   \"energy__\"     \n[149] \"accept_stat__\" \"stepsize__\"    \"n_leapfrog__\" \n\npartpooled_slopes <- all_species_partpooled_diag_posterior |> \n  tidybayes::gather_rvars(beta[param, spp]) |> \n  filter(param == 2)\n\nleft_join(unpooled_slopes, partpooled_slopes, by = \"spp\") |> \n  ggplot(aes(x = mean(.value.x), y = mean(.value.y))) + \n  geom_point() + \n  geom_abline(intercept = 0, slope = 1)"
  },
  {
    "objectID": "topics/03_one_random_effect/index.html",
    "href": "topics/03_one_random_effect/index.html",
    "title": "Models with one level of hierarchy",
    "section": "",
    "text": "Bayesian workflow\n\n\n\n\nVisualize your data\nDecide on your model structure\nSimulate from the model to understand it\nFit the model to the data\nPlot model predictions to evaluate the fit / draw conclusions\nToday’s goal is to look at a couple of different model structures that we saw yesterday."
  },
  {
    "objectID": "topics/03_one_random_effect/index.html#gaussian-random-intercepts-penguin-body-mass",
    "href": "topics/03_one_random_effect/index.html#gaussian-random-intercepts-penguin-body-mass",
    "title": "Models with one level of hierarchy",
    "section": "Gaussian random intercepts: Penguin body mass",
    "text": "Gaussian random intercepts: Penguin body mass\nThe Palmer penguins are found on three different islands. Let’s look at the distribution of body mass of each species on each island.\n\nPlot the data\n\npenguin_mass_island <- penguins |> \n  select(species, island, body_mass_g) |> \n  drop_na(body_mass_g) |> \n  unite(sp_island, species, island) |> \n  ## center mass and change the units\n  mutate(mass_kg = (body_mass_g)/1000)\n\n\npenguin_mass_island |> \n  ggplot(aes(y = sp_island,\n             x = mass_kg,\n             colour = sp_island)) + \n  geom_jitter(alpha = 0.8, height = 0.1, width = 0) + \n  scale_color_brewer(palette = \"Dark2\")\n\n\n\n\nAre the sample sizes equal among the species-island combinations?\n\npenguin_mass_island |> \n  count(sp_island) |> \n  knitr::kable()\n\n\n\n\nsp_island\nn\n\n\n\n\nAdelie_Biscoe\n44\n\n\nAdelie_Dream\n56\n\n\nAdelie_Torgersen\n51\n\n\nChinstrap_Dream\n68\n\n\nGentoo_Biscoe\n123\n\n\n\n\n\n\n\nDecide on a model structure\nWe’ll begin by fitting a model that assumes that body size for each of these five groups is completely independent:\n\\[\n\\begin{align}\n\\text{Body mass}_i &\\sim \\text{Normal}(\\mu_i, \\sigma_{\\text{obs}}) \\\\\n\\mu_i &= \\bar\\beta + \\beta_{\\text{species}[i]} \\\\\n\\bar\\beta &\\sim \\text{Normal}(5, 2) \\\\\n\\beta_{\\text{species}} &\\sim \\text{Normal}(0, 1) \\\\\n\\sigma &\\sim \\text{Exponential}(.5)\n\\end{align}\n\\]\n\n\nSimulate to understand this model\nHere’s a little trick to get group indexes (numbers) from a character vector:\n\ngroup_names <- unique(penguin_mass_island$sp_island)\ngroup_numbers <- seq_along(group_names)\nnames(group_numbers) <- group_names\n\ngroup_numbers\n\nAdelie_Torgersen    Adelie_Biscoe     Adelie_Dream    Gentoo_Biscoe \n               1                2                3                4 \n Chinstrap_Dream \n               5 \n\n\n\npenguin_groupid <- penguin_mass_island |> \n  mutate(group_id = group_numbers[sp_island])\n\npenguin_groupid\n\n# A tibble: 342 × 4\n   sp_island        body_mass_g mass_kg group_id\n   <chr>                  <int>   <dbl>    <int>\n 1 Adelie_Torgersen        3750    3.75        1\n 2 Adelie_Torgersen        3800    3.8         1\n 3 Adelie_Torgersen        3250    3.25        1\n 4 Adelie_Torgersen        3450    3.45        1\n 5 Adelie_Torgersen        3650    3.65        1\n 6 Adelie_Torgersen        3625    3.62        1\n 7 Adelie_Torgersen        4675    4.68        1\n 8 Adelie_Torgersen        3475    3.48        1\n 9 Adelie_Torgersen        4250    4.25        1\n10 Adelie_Torgersen        3300    3.3         1\n# ℹ 332 more rows\n\n\nAs you can see, we’re set up now with the names and the indexes we need.\nNow we can simulate data and plot it:\n\nngroup <- length(group_numbers)\noverall_mean <- rnorm(1, mean = 5, sd = 2)\ngroup_diffs <- rnorm(n = ngroup, mean = 0, sd = 1)\nsigma_obs <- rexp(1, .5)\n\npenguin_pred_obs <- penguin_groupid |> \n  mutate(fake_mass_avg = overall_mean + group_diffs[group_id],\n         fake_mass_obs = rnorm(length(fake_mass_avg), \n                               mean = fake_mass_avg, \n                               sd = sigma_obs))\n\npenguin_pred_obs |> \n  ggplot(aes(y = sp_island,\n             x = fake_mass_obs,\n             colour = sp_island)) + \n  geom_jitter(alpha = 0.8, height = 0.1, width = 0) + \n  scale_color_brewer(palette = \"Dark2\")\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nrun the above code a few times! if you want, try different prior values.\n\n\n\n\nWrite it in Stan\n\nfixed_groups <- cmdstan_model(stan_file = \"topics/03_one_random_effect/fixed_groups.stan\")\n\nfixed_groups\n\ndata {\n  int<lower=0> N;\n  vector[N] y;\n  int<lower=0> Ngroup;\n  array[N] int<lower=0, upper=Ngroup> group_id;\n}\nparameters {\n  real b_avg;\n  vector[Ngroup] b_group;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(b_avg + b_group[group_id], sigma);\n  b_group ~ std_normal();\n  b_avg ~ normal(5, 2);\n  sigma ~ exponential(.5);\n}\ngenerated quantities {\n  vector[N] fake_obs;\n  \n  for (i in 1:N) {\n    fake_obs[i] = normal_rng(b_avg + b_group[group_id[i]], sigma);\n  }\n  \n  // predict making one new observation per group\n  vector[Ngroup] one_obs_per_group;\n  \n  for (k in 1:Ngroup) {\n    one_obs_per_group[k] = normal_rng(b_avg + b_group[k], sigma);\n  }\n}\n\n\n\n\nFit the model\n\npeng_group_list <- with(penguin_groupid, \n         list(\n           N = length(mass_kg),\n           y = mass_kg,\n           Ngroup = max(group_id),\n           group_id = group_id\n         ))\n\nfixed_groups_samples <- fixed_groups$sample(\n  data = peng_group_list,\n  refresh = 0,\n  parallel_chains = 4\n)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpYROeSn/model-15c466a4b69e9.stan', line 13, column 2 to column 47)\n\n\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 1 \n\n\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpYROeSn/model-15c466a4b69e9.stan', line 13, column 2 to column 47)\n\n\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 4 \n\n\nChain 1 finished in 1.6 seconds.\nChain 2 finished in 1.5 seconds.\nChain 3 finished in 1.5 seconds.\nChain 4 finished in 1.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.6 seconds.\nTotal execution time: 1.8 seconds.\n\n\n\n\nPlot predictions to evaluate results\n\n## bayesplot\n\n\nfixed_groups_samples |> \n  tidybayes::gather_rvars(one_obs_per_group[group_id]) |> \n  mutate(sp_island = group_names[group_id]) |> \n  ggplot(aes(y = sp_island,\n             dist = .value,\n             colour = sp_island)) + \n  stat_pointinterval() + \n  geom_point(aes(y = sp_island,\n             x = mass_kg,\n             colour = sp_island), \n             inherit.aes = FALSE,\n             alpha = .2, data = penguin_groupid)\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\nMake it hierarchical\nTK make them side by side\n\\[\n\\begin{align}\n\\text{Body mass}_i &\\sim \\text{Normal}(\\mu_i, \\sigma_{\\text{obs}}) \\\\\n\\mu_i &= \\bar\\beta + \\beta_{\\text{species}[i]} \\\\\n\\bar\\beta &\\sim \\text{Normal}(5, 2) \\\\\n\\beta_{\\text{species}} &\\sim \\text{Normal}(0, \\sigma_{\\text{sp}}) \\\\\n\\sigma_{\\text{obs}} &\\sim \\text{Exponential}(.5) \\\\\n\\sigma_{\\text{sp}} &\\sim \\text{Exponential}(1)\n\\end{align}\n\\]\n\nhierarchical_groups <- cmdstan_model(stan_file = \"topics/03_one_random_effect/hierarchical_groups.stan\")\n\nhierarchical_groups\n\ndata {\n  int<lower=0> N;\n  vector[N] y;\n  int<lower=0> Ngroup;\n  array[N] int<lower=0, upper=Ngroup> group_id;\n}\nparameters {\n  real b_avg;\n  vector[Ngroup] b_group;\n  real<lower=0> sigma_obs;\n  real<lower=0> sigma_grp;\n}\nmodel {\n  y ~ normal(b_avg + b_group[group_id], sigma_obs);\n  b_group ~ normal(0, sigma_grp);\n  b_avg ~ normal(5, 2);\n  sigma_obs ~ exponential(.5);\n  sigma_grp ~ exponential(1);\n}\ngenerated quantities {\n  vector[N] fake_obs;\n  \n  for (i in 1:N) {\n    fake_obs[i] = normal_rng(b_avg + b_group[group_id[i]], sigma_obs);\n  }\n  \n  // predict making one new observation per group\n  vector[Ngroup] one_obs_per_group;\n  \n  for (k in 1:Ngroup) {\n    one_obs_per_group[k] = normal_rng(b_avg + b_group[k], sigma_obs);\n  }\n  \n  // difference for a new group\n  real new_b_group = normal_rng(0, sigma_grp);\n  \n  // observations from that new group\n  real one_obs_new_group = normal_rng(b_avg + new_b_group, sigma_obs);\n  \n}\n\n\n\nhierarchical_groups_samples <- hierarchical_groups$sample(\n  data = peng_group_list, refresh = 0, parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpYROeSn/model-15c46a09925.stan', line 14, column 2 to column 51)\n\n\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 1 \n\n\nChain 3 finished in 1.6 seconds.\nChain 1 finished in 1.7 seconds.\nChain 2 finished in 1.7 seconds.\nChain 4 finished in 1.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.7 seconds.\nTotal execution time: 1.9 seconds.\n\n\n\nhierarchical_groups_samples\n\n    variable  mean median   sd  mad    q5   q95 rhat ess_bulk ess_tail\n lp__        88.53  88.89 2.10 1.99 84.59 91.34 1.01      955     1718\n b_avg        4.03   4.03 0.38 0.30  3.45  4.65 1.01      595      404\n b_group[1]  -0.32  -0.31 0.38 0.30 -0.94  0.26 1.01      595      441\n b_group[2]  -0.32  -0.31 0.38 0.31 -0.95  0.27 1.01      608      418\n b_group[3]  -0.34  -0.33 0.38 0.31 -0.96  0.25 1.01      607      436\n b_group[4]   1.04   1.05 0.38 0.30  0.42  1.63 1.01      599      413\n b_group[5]  -0.30  -0.29 0.38 0.30 -0.91  0.29 1.01      597      418\n sigma_obs    0.47   0.46 0.02 0.02  0.44  0.50 1.00     1682     1907\n sigma_grp    0.77   0.69 0.33 0.25  0.41  1.42 1.00     1233     1091\n fake_obs[1]  3.72   3.73 0.47 0.47  2.95  4.50 1.00     4037     3891\n\n # showing 10 of 358 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n\n\n\nhierarchical_groups_samples |> \n  tidybayes::gather_rvars(b_group[group_id],\n                          new_b_group) |> \n  mutate(sp_island = group_names[group_id],\n         sp_island = if_else(is.na(sp_island),\n                             true = \"New Group\",\n                             false = sp_island)) |> \n  ggplot(aes(y = sp_island,\n             dist = .value,\n             colour = sp_island)) + \n  stat_pointinterval()\n\n\n\n\n\nhierarchical_groups_samples |> \n  tidybayes::gather_rvars(one_obs_per_group[group_id],\n                          one_obs_new_group) |> \n  mutate(sp_island = group_names[group_id],\n         sp_island = if_else(is.na(sp_island),\n                             true = \"New Group\",\n                             false = sp_island)) |> \n  ggplot(aes(y = sp_island,\n             dist = .value,\n             colour = sp_island)) + \n  stat_pointinterval() + \n  geom_point(aes(y = sp_island,\n             x = mass_kg,\n             colour = sp_island), \n             inherit.aes = FALSE,\n             alpha = .2, data = penguin_groupid)"
  },
  {
    "objectID": "topics/03_one_random_effect/index.html#fit-the-model",
    "href": "topics/03_one_random_effect/index.html#fit-the-model",
    "title": "Models with one level of hierarchy",
    "section": "Fit the model",
    "text": "Fit the model\n\nfixed_groups_samples <- fixed_groups$sample(\n  data = \n    with(penguin_groupid, \n         list(\n           N = length(mass_kg),\n           y = mass_kg,\n           Ngroup = max(group_id),\n           group_id = group_id\n         )\n  ),\n  refresh = 0, parallel_chains = 4\n)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpw7jYom/model-daeddb7e5b3.stan', line 13, column 2 to column 47)\n\n\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 1 \n\n\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpw7jYom/model-daeddb7e5b3.stan', line 13, column 2 to column 47)\n\n\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 4 \n\n\nChain 1 finished in 1.7 seconds.\nChain 2 finished in 1.8 seconds.\nChain 3 finished in 1.8 seconds.\nChain 4 finished in 1.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.8 seconds.\nTotal execution time: 2.0 seconds.\n\n\n\nPlot predictions to evaluate results\n\n## bayesplot\n\n\nfixed_groups_samples |> \n  tidybayes::gather_rvars(one_obs_per_group[group_id]) |> \n  mutate(sp_island = group_names[group_id]) |> \n  ggplot(aes(y = sp_island,\n             dist = .value,\n             colour = sp_island)) + \n  stat_pointinterval() + \n  geom_point(aes(y = sp_island,\n             x = mass_kg,\n             colour = sp_island), \n             inherit.aes = FALSE,\n             alpha = .2, data = penguin_groupid)\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead."
  },
  {
    "objectID": "topics/mcmc/day_2.html",
    "href": "topics/mcmc/day_2.html",
    "title": "Day 2",
    "section": "",
    "text": "what makes a person and approach Bayesian is not the use of Bayes rule. Bayes rule is just a fact about conditional probability, which everyone uses regardless of their framework for scientific inference. no, to be bayesian is to use probability to measure uncertainty."
  },
  {
    "objectID": "topics/mcmc/day_2.html#mcmc",
    "href": "topics/mcmc/day_2.html#mcmc",
    "title": "Day 2",
    "section": "MCMC",
    "text": "MCMC"
  },
  {
    "objectID": "topics/mcmc/day_2.html#convergence-diagnostics",
    "href": "topics/mcmc/day_2.html#convergence-diagnostics",
    "title": "Day 2",
    "section": "Convergence Diagnostics",
    "text": "Convergence Diagnostics"
  },
  {
    "objectID": "topics/mcmc/day_2.html#model-validation-with-simulation",
    "href": "topics/mcmc/day_2.html#model-validation-with-simulation",
    "title": "Day 2",
    "section": "Model validation with simulation",
    "text": "Model validation with simulation"
  },
  {
    "objectID": "topics/mcmc/day_2.html#dags",
    "href": "topics/mcmc/day_2.html#dags",
    "title": "Day 2",
    "section": "DAGs",
    "text": "DAGs\n\nforks, pipes and colliders\nsimulation from a DAG\ndemonstration of errors from disregarding DAGs"
  },
  {
    "objectID": "topics/visualization_priors.html",
    "href": "topics/visualization_priors.html",
    "title": "Visualizing priors",
    "section": "",
    "text": "Bayesian models\n\\[\n\\begin{align}\nF_i & \\sim \\text{Poisson}(\\lambda_i) \\\\\n\\text{log}(\\lambda_i) &= \\alpha + \\beta x \\\\\n\\alpha & \\sim \\text{Normal}(??, ??) \\\\\n\\beta & \\sim \\text{Normal}(??, ??)\n\\end{align}\n\\]\n\n\n\nBayesian models\n\\[\n\\begin{align}\nF_i & \\sim \\text{Poisson}(\\lambda_i) \\\\\n\\text{log}(\\lambda_i) &= \\alpha + \\beta x \\\\\n\\alpha & \\sim \\text{Normal}(0, 1000) \\\\\n\\beta & \\sim \\text{Normal}(0, 1000)\n\\end{align}\n\\]\n.footnote[as seen in Kéry & Royle 2016 p 188]\n\n.footnote[ Gabry, Jonah, Daniel Simpson, Aki Vehtari, Michael Betancourt, and Andrew Gelman. « Visualization in Bayesian Workflow ». Journal of the Royal Statistical Society: Series A (Statistics in Society) 182 (2): 389‑402. https://doi.org/10.1111/rssa.12378.]\n\n\n\nwhat does this prior mean?\n\\[\n\\begin{align}\nF_i & \\sim \\text{Poisson}(\\lambda_i) \\\\\n\\text{log}(\\lambda_i) &= \\alpha + \\beta x \\\\\n\\alpha & \\sim \\text{Normal}(0, 1000) \\\\\n\\beta & \\sim \\text{Normal}(0, 1000)\n\\end{align}\n\\]\n\n\n\nwhat does this prior mean?\nlets do an example about my favourites: fly larvae!\n.pull-left[ ]\n.pull-right[ \\[\n\\begin{align}\nF_i & \\sim \\text{Poisson}(\\lambda_i) \\\\\n\\text{log}(\\lambda_i) &= \\alpha + \\beta x \\\\\n\\alpha & \\sim \\text{Normal}(0, 1000) \\\\\n\\beta & \\sim \\text{Normal}(0, 1000)\n\\end{align}\n\\] where \\(x\\) is some kind of standardized environmental variable]\n\n\n\nA quick look at the math for those curious\n\\[\n\\begin{align}\n\\text{log}(\\lambda) &= \\alpha + \\beta x \\\\\n\\lambda &= e^{\\alpha + \\beta x} \\\\\n\\lambda &= e^{\\alpha}e^{\\beta x} \\\\\n\\end{align}\n\\]\nAnd since \\(N(0,1000)\\) implies that -1000 and +1000 are entirely reasonable..\n.pull-left[ * \\(2.72^{-1000}\\times 2.72^{-1000}\\) * (practically zero)]\n.pull-right[ * \\(2.72^{1000}\\times 2.72^{1000}\\) * (..kind of a lot)]\n\n\n\neither no flies at all.. or a huge planet of maggots\n\nfor comparison, the planet Saturn weighs 5.7 * 10^29 grams\n\n\n\nsyntax: brms\n# define formula\n\ninsects_bf <- bf(\nabundance ~ 1 + env, \nfamily = poisson()\n)\n\n\n\nsyntax: setting priors\nget_prior(insects_bf, data = insect_data)\n\ninsect_priors <- c(\n  prior(normal(0,100), class = \"b\", coef = \"env\"),\n  prior(normal(0,100), class = \"Intercept\")\n)\n\n\n\nsyntax: sampling the model\ninsect_samples <- brm(insects_bf,\n                      data = insect_data,  # does nothing\n                      prior = insect_priors,\n                      sample_prior = \"only\")\n\n\n\nExercise I – Fly larvae\n\nsee the file insects.R on github\non your own or in a small group, experiment with setting priors for insect abundances.\nAND/OR consider an animal or plant which is more relevant to you\nor stay with insects even if that is not your specialty, and set “vague” priors!\n\n\n\n\nexercises – les poissons\nusing data from Kaggle, about fish\nlibrary(readr)\nfish <- read_csv(\"https://raw.githubusercontent.com/aammd/ISEC_stan_course/master/Fish.csv\")\n\nknitr::kable(head(fish), format = 'html')\n\n\n\n \n  \n    Species \n    Weight \n    Length1 \n    Length2 \n    Length3 \n    Height \n    Width \n  \n \n\n  \n    Bream \n    242 \n    23.2 \n    25.4 \n    30.0 \n    11.5200 \n    4.0200 \n  \n  \n    Bream \n    290 \n    24.0 \n    26.3 \n    31.2 \n    12.4800 \n    4.3056 \n  \n  \n    Bream \n    340 \n    23.9 \n    26.5 \n    31.1 \n    12.3778 \n    4.6961 \n  \n  \n    Bream \n    363 \n    26.3 \n    29.0 \n    33.5 \n    12.7300 \n    4.4555 \n  \n  \n    Bream \n    430 \n    26.5 \n    29.0 \n    34.0 \n    12.4440 \n    5.1340 \n  \n  \n    Bream \n    450 \n    26.8 \n    29.7 \n    34.7 \n    13.6024 \n    4.9274"
  },
  {
    "objectID": "topics/01_simulation/index.html",
    "href": "topics/01_simulation/index.html",
    "title": "Data simulation",
    "section": "",
    "text": "library(tidyverse)\nlibrary(cmdstanr)\nBefore starting work on real data, we are going to begin by learning how to generate data by simulation. There are at least three reasons why this is a good idea:"
  },
  {
    "objectID": "topics/01_simulation/index.html#simple-exercise-in-simulation",
    "href": "topics/01_simulation/index.html#simple-exercise-in-simulation",
    "title": "Data simulation",
    "section": "Simple exercise in simulation",
    "text": "Simple exercise in simulation\nLet’s imagine we are taking a walk as a group today at the beautiful SBL. What is the number of birds (total abundance of ALL species) each of us is going to see on our hike?\n\nSome questions to ask about simulated data\n\nWhat kind of observations are you going to make? Do they have a minimum or maximum value? Are they integers, or are they decimal numbers, or something else?\nWhere do the numbers come from? This could be anything, from simple linear approximations (i.e. the models we’re looking at in this course) to ODEs, mathematical models, GAMs, etc.\nHow many observations will we be making?\n\n\n\nThe process\nLet’s try to answer these questions for the bird walk we are about to take.\n\nWe’re going to count birds, so we’ll have count data: a number that is either 0 or some positive, round number\nWe’ll make a simplifying assumption: everybody has the same chance of seeing a bird (i.e. no differences in skill or equipment), and everyone in the class is an independent observer (i.e. nobody is working in pairs, etc.)\nEveryone in the class makes only one count, so we have 22 numbers.\n\nWe’re Bayesian, so we need to write a probability distribution for all the possible values.\n\\[\n\\begin{align}\n\\text{Number of Birds}_{\\text{seen by person i}} &\\sim \\text{Poisson}(\\lambda) \\\\\n\\lambda &\\sim \\text{Uniform}(0, 60)\n\\end{align}\n\\]\nA quick note about notation for models like these:\n\nWe use a subscript \\(i\\) to indicate the “label” for each observation in our dataset. You can think of this as the row number of the data spreadsheet, and imagine sliding your finger down the column of measurements, modelling each value in turn.\nUsually we’ll use more general language, such as \\(y_i\\). But for this simple example I wanted to make things as explicit as possible.\nNotice the symbol \\(\\sim\\). This is read as “distributed as”, and indicates the probability distribution from which the values might come. When the values we’re talking about are data that we can observe (in this case, counts of birds), we call the distribution the likelihood. When the value is something we can’t observe (in this case, the average count \\(\\lambda\\)) we call the distribution the prior.\n\n\n\n\n\n\n\nWarning\n\n\n\nWe’ll be talking about better ways to model count data in a later exercise! For now, I’m using the Uniform distribution for simplicity. It’s not usually a very good choice!\n\n\n\n\nSimulation in R\nOne of the most useful traits of Bayesian models is that they are generative: they can be used to make a simulated dataset. We’ll do that now for our bird example.\nlet’s simulate from a Poisson distribution:\n\nset.seed(525600)\nn_people <- 21\navg_birds_per_person <- runif(1, min = 0, max = 30)\nbird_count <- rpois(n_people, lambda = avg_birds_per_person)\n\nSome things to note in the code above:\nEvery statistical distribution that is in R (which is a lot! almost all! ) has four different functions. If the distribution is called dist, then they are:\n\nrdist = draw random numbers from dist\nqdist = the quantile function – what value gives a certain proportion of the distribution?\npdist = the probability density function – what proportion of the distribution is below a certain value?\nddist the density function = draws the “shape” of a distribution. How probable are specific values?\n\nThe other thing to note is that there are TWO simulation steps here: first, simulating a value of the average (\\(\\lambda\\)) and second, simulating observations. In our model, the Uniform distribution was referred to as the prior, and the Poisson distribution was referred to as a likelihood, but here you can see that they are very nearly the same thing: just statements about what distribution of values might be most consistent with the data.\n\nPlotting the result\nLet’s take a look at our simulated values:\n\nhist(bird_count, col = \"lightblue\", xlim = c(0, 50))\n\n\n\n\nHistogram of simulated counts of birds\n\n\n\n\nThis is pretty great, and represents one possible realization of sampling. However, one sample isn’t enough to tell us about what our \\(\\text{Uniform}(0, 60)\\) prior really means. Let’s do a few different simulations:\n\nlibrary(tidyverse)\n\nset.seed(525600)\n\nsimulate_some_birds <- function() {\n  lambda <- runif(1, min = 0, max = 60)\n  data.frame(obs = rpois(23, lambda = lambda))\n}\n\nrep_list <- replicate(12, simulate_some_birds())\n\ntibble::tibble(simulation = 1:12,\n               obs = rep_list) |> \n  unnest(cols = \"obs\") |> \n  ggplot(aes(x = obs)) + \n  geom_histogram(bins = 28) + \n  facet_wrap(~simulation) + \n  theme_bw() + \n  labs(x = \"Number of birds observed per person\")\n\n\n\n\nTwelve different simulations of a possible bird dataset. Do all of these seem plausible?\n\n\n\n\nThis figure shows different simulations of what, according to our prior, might be reasonable datasets for us to study. Do any of them seem implausible to you? If so, try changing the prior. The goal is to make fake datasets that seem plausible, but which still include the possibility of some surprising observations.\nWhen you have a prior that generates observations that cover a range of scientifically reasonable values, then you are ready to move on to fitting real data.\nHowever before we actually do that, let’s do the whole thing again: this time in Stan."
  },
  {
    "objectID": "topics/01_simulation/index.html#simulating-data-in-stan",
    "href": "topics/01_simulation/index.html#simulating-data-in-stan",
    "title": "Data simulation",
    "section": "Simulating data in Stan",
    "text": "Simulating data in Stan\nLet’s look back at the equation:\n\\[\n\\begin{align}\n\\text{Number of Birds}_{\\text{seen by person i}} &\\sim \\text{Poisson}(\\lambda) \\\\\n\\lambda &\\sim \\text{Uniform}(0, 60)\n\\end{align}\n\\]\nAnd then translate it into Stan:\n\npoisson_simulation <- cmdstan_model(\n  stan_file = \"topics/01_simulation/poisson_simulation.stan\")\n\npoisson_simulation\n\ndata {\n  int<lower=0> n_people;\n}\ngenerated quantities {\n  real<lower=0> avg_birds_per_person;\n  // an array -- like a list in R\n  array[n_people] int<lower=0> bird_count;\n  \n  // simulate averages\n  avg_birds_per_person = uniform_rng(0, 60);\n  // simulate observations with that average\n  for (i in 1:n_people){\n    bird_count[i] = poisson_rng(avg_birds_per_person);\n  }\n}\n\n\nWhat you see just above is not R, but is the first Stan program we will see in this course. Stan code is written in a text file, which you then bring into R with the function cmdstan_model as shown above. This does more than read the program, it compiles the code into a computer program. When you sample the model, as we’ll do later, Stan samples the posterior distribution using Hamiltonian Monte Carlo.\nThis Stan program has two parts. Each part is separated with curly braces, {}. The are they data block and the generated quantities block:\ndata {\n  int<lower=0> n_people;\n}\nAnd the generated quantites block.\ngenerated quantities {\n  real<lower=0> avg_observed;\n  // an array -- like a list in R\n  array[n_people] int<lower=0> bird_count;\n  \n  // simulate averages\n  avg_birds_per_person = uniform_rng(0, 60);\n  // simulate observations with that average\n  for (i in 1:n_people){\n    bird_count[i] = poisson_rng(avg_birds_per_person);\n  }\n}\nLet’s look at similarities and differences to the procedure in R:\nsimilarities:\n\nWe have a random number generating function for each of our distributions. In R, these were called runif and rpois, here they are uniform_rng and poisson_rng.\nOnce again, the only thing we need to provide is n_people, the number of observers we have\n\ndifferences:\n\nevery line ends with a semicolon ;\nin Stan, the name of a variable is on the RIGHT of a line, while in R it’s on the left.\nwe need to use a for-loop to generate random variables.\nnote the syntax for creating an array of integers. Arrays in Stan are a little like lists in R: they can hold any other kind of object, and are of a certain length.\n\n\n# We connect the data in R to the model in Stan using a \n# named list!\npoisson_simulation_datalist <- list(\n  n_people = 21\n)\n\npoisson_sim_stan <- poisson_simulation$sample(\n  data = poisson_simulation_datalist, \n  refresh = 0,\n  # usually not necessary -- this model has no parameters \n  fixed_param = TRUE)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.0 seconds.\nChain 2 finished in 0.0 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 1.0 seconds.\n\n\nThis generates a large number of simulated datasets – the default is 4000 datasets! Each time the model samples, it draws a new value for the unobserved average (avg_birds_per_person) and for the number of birds seen by each person.\nLet’s pull out just a few of these datasets and visualize them.\nWe’ll use a wonderful package called tidybayes to easily extract posterior draws from cmdstan objects.\n\nlibrary(tidybayes)\npois_sim <- tidybayes::spread_draws(poisson_sim_stan, \n                                    avg_birds_per_person,\n                                    bird_count[],\n                                    ndraws = 20,\n                                    seed = 525600)\n\nHere we pass tidybayes::spread_draws() the model name, as well as the names of the parameters that we want to work with. The parameter avg_birds_per_person is a scalar, so we only need to mention it by name. The parameter vector bird_count needs square brackets after its name. This syntax is strange but gives us lots of options for more complex models, as we’ll see!\nLet’s see what we get from tidybayes by looking at the first few rows.\n\npois_sim |> \n  as.data.frame() |> \n  head(25) |> \n  knitr::kable()\n\n\n\n\n.chain\n.iteration\n.draw\navg_birds_per_person\nbird_count\n\n\n\n\n1\n553\n553\n24.4378\n29\n\n\n1\n553\n553\n24.4378\n27\n\n\n1\n553\n553\n24.4378\n26\n\n\n1\n553\n553\n24.4378\n30\n\n\n1\n553\n553\n24.4378\n28\n\n\n1\n553\n553\n24.4378\n21\n\n\n1\n553\n553\n24.4378\n32\n\n\n1\n553\n553\n24.4378\n24\n\n\n1\n553\n553\n24.4378\n28\n\n\n1\n553\n553\n24.4378\n26\n\n\n1\n553\n553\n24.4378\n24\n\n\n1\n553\n553\n24.4378\n11\n\n\n1\n553\n553\n24.4378\n32\n\n\n1\n553\n553\n24.4378\n19\n\n\n1\n553\n553\n24.4378\n23\n\n\n1\n553\n553\n24.4378\n28\n\n\n1\n553\n553\n24.4378\n28\n\n\n1\n553\n553\n24.4378\n10\n\n\n1\n553\n553\n24.4378\n23\n\n\n1\n553\n553\n24.4378\n24\n\n\n1\n553\n553\n24.4378\n20\n\n\n4\n310\n3310\n28.4318\n32\n\n\n4\n310\n3310\n28.4318\n28\n\n\n4\n310\n3310\n28.4318\n29\n\n\n4\n310\n3310\n28.4318\n25\n\n\n\n\n\nRemember we asked for only 20 of the 4000 posterior samples. Here is one sample, and just a bit of the next. We can see that the value of avg_birds_per_person is the same within each iteration. The model uses this average to sample every bird_count value, one for each person making observations. Then the program takes a new value of avg_birds_per_person and simulates everyone’s bird_count again!\nLet’s take a look at some of these simulations:\n\npois_sim |> \n  ggplot(aes(x = bird_count)) + \n  geom_histogram(fill = \"orange\") + \n  geom_vline(aes(xintercept = avg_birds_per_person), col = \"darkgreen\", lwd = 1) + \n  facet_wrap(~.draw) + \n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nPrior simulations of bird counts. Green bars are the mean for a particular simulation, and orange histograms show the distribution of observations around this mean."
  },
  {
    "objectID": "topics/01_simulation/index.html#parameter-recovery",
    "href": "topics/01_simulation/index.html#parameter-recovery",
    "title": "Data simulation",
    "section": "Parameter recovery",
    "text": "Parameter recovery\nLet’s go back and look at the fake datasets we created in R\n\navg_birds_per_person\n\n[1] 17.12789\n\nbird_count\n\n [1] 23 10 19 27 20 15 16 18 18 22 14 14 14 18 17 13 26 19 16 13 10\n\n\nand let’s see if we can recapture the only known parameter, avg_birds_per_person, which is equal to 17.127887.\nWe’ll do it first in R, using the function fitdistr from the MASS package:\n\nMASS::fitdistr(bird_count, dpois, start = list(lambda=10))\n\nWarning in stats::optim(x = c(23L, 10L, 19L, 27L, 20L, 15L, 16L, 18L, 18L, : one-dimensional optimization by Nelder-Mead is unreliable:\nuse \"Brent\" or optimize() directly\n\n\n     lambda  \n  17.2382812 \n ( 0.9060239)\n\n\nThis could also be done with glm\n\nbird_glm <- glm(bird_count ~ 1, family = \"poisson\")\nexp(coef(bird_glm))\n\n(Intercept) \n    17.2381 \n\n\nYou can see that in all cases we are getting close to the value of avg_birds_per_person, which in these simulations is the true value.\n\nSampling the posterior distribution in Stan\nWe will be doing a lot of Stan models this week, and we will begin by replicating the above GLM in Stan.\n\npoisson_model <- cmdstan_model(\n  stan_file = \"topics/01_simulation/poisson_model.stan\")\n\npoisson_model\n\ndata {\n  int<lower=0> n_people;\n  array[n_people] int<lower=0> bird_count_observed;\n}\nparameters {\n  real<lower=0> avg_birds_per_person;\n}\nmodel {\n  bird_count_observed ~ poisson(avg_birds_per_person);\n  avg_birds_per_person ~ uniform(0, 60);\n}\ngenerated quantities {\n  // an array -- like a list in R\n  array[n_people] int<lower=0> bird_count;\n  \n  // simulate observations with that average\n  for (i in 1:n_people){\n    bird_count[i] = poisson_rng(avg_birds_per_person);\n  }\n}\n\n\nThis model has all the same code as the previous one, but has two additional parts. Let’s compare them\n\n\n\n\n\n\npoisson_simulation\n\ndata {\n  int<lower=0> n_people;\n}\ngenerated quantities {\n  real<lower=0> avg_birds_per_person;\n  // an array -- like a list in R\n  array[n_people] int<lower=0> bird_count;\n  \n  // simulate averages\n  avg_birds_per_person = uniform_rng(0, 60);\n  // simulate observations with that average\n  for (i in 1:n_people){\n    bird_count[i] = poisson_rng(avg_birds_per_person);\n  }\n}\n\n\n\n\n\n\npoisson_model\n\ndata {\n  int<lower=0> n_people;\n  array[n_people] int<lower=0> bird_count_observed;\n}\nparameters {\n  real<lower=0> avg_birds_per_person;\n}\nmodel {\n  bird_count_observed ~ poisson(avg_birds_per_person);\n  avg_birds_per_person ~ uniform(0, 60);\n}\ngenerated quantities {\n  // an array -- like a list in R\n  array[n_people] int<lower=0> bird_count;\n  \n  // simulate observations with that average\n  for (i in 1:n_people){\n    bird_count[i] = poisson_rng(avg_birds_per_person);\n  }\n}\n\n\n\n\n\n\n\nWhat’s different in this second Stan program? There are two new sections:\n\nparameters block : Indicated by parameters {}, this block includes all the unobserved quantities. In this case there is only one: avg_birds_per_person. We have to give this value a name and say what kind of number it is. Here is also the place to declare any constraints. In our example, we state that the parameter is always positive (because it is an average of counts).\nmodel block indicated by model {}, this block contains the model. What this means in a Bayesian model is that it lists the probability distribution for all the observations, and for all the unobserved parameters. In other words, it looks just like our mathematical expressions above. The model block can also contain intermediate calculations, for example combining data and parameters with an equation. We’ll see examples later.\n\nThis Stan program also contains one line that’s been moved.\n  avg_birds_per_person ~ uniform(0, 60);\nhas been moved to the model block. This has two consequences.\nFirst, when the model sees our data, it’s going to try to find values of avg_birds_per_person which make those data probable – in other words, it is going to find the posterior distribution of possible values of the average. Together, the prior and the data constrain what those values can be.\nSecond, the generated quantities block means something different now. Previously, we had no idea what avg_birds_per_person should be, so we had the computer choose a random number from a wide range. We called this “the prior” Now, when the computer draws new values of bird_count, it is going to use the values from the posterior that it is finding in the model {} block . This means that the simulations, rather than being prior predictive checks, are now posterior predictive checks."
  },
  {
    "objectID": "topics/01_simulation/index.html#parameter-recovery-1",
    "href": "topics/01_simulation/index.html#parameter-recovery-1",
    "title": "Data simulation",
    "section": "Parameter recovery",
    "text": "Parameter recovery\nLet us see if the model recovers our parameters. Once again, we connect a dataset to our model with a list:\n\nbird_data_list <- list(bird_count_observed = bird_count,\n                       n_people = length(bird_count))\n\npoisson_model_samp <- poisson_model$sample(data  = bird_data_list,\n                                           refresh = 0)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.0 seconds.\nChain 2 finished in 0.0 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.5 seconds.\n\npoisson_model_samp$summary()\n\n# A tibble: 23 × 10\n   variable          mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail\n   <chr>            <num>  <num> <num> <num> <num> <num> <num>    <num>    <num>\n 1 lp__             671.   671.  0.699 0.329 670.  672.   1.00    1912.    2347.\n 2 avg_birds_per_p…  17.2   17.2 0.907 0.919  15.8  18.8  1.00    1800.    2084.\n 3 bird_count[1]     17.2   17   4.30  4.45   10    25    1.00    3756.    4108.\n 4 bird_count[2]     17.1   17   4.29  4.45   10    24    1.00    3749.    3290.\n 5 bird_count[3]     17.3   17   4.29  4.45   11.0  25    1.00    3866.    3935.\n 6 bird_count[4]     17.3   17   4.20  4.45   11    24    1.00    3554.    3727.\n 7 bird_count[5]     17.1   17   4.19  4.45   11    24    1.00    3870.    3959.\n 8 bird_count[6]     17.2   17   4.26  4.45   11    25    1.00    3814.    3771.\n 9 bird_count[7]     17.2   17   4.29  4.45   10    25    1.00    3930.    3644.\n10 bird_count[8]     17.2   17   4.26  4.45   10    25    1.00    4151.    3893.\n# ℹ 13 more rows\n\n\nWe can look at a table of coefficients but it is much easier to once again look at posterior samples as a figure.\n\n\n\n\n\n\nVisualize everything!\n\n\n\nBayesian workflows are highly visual. Make as many plots as you can: of your parameters, your predictions, the performance of your chains, etc.\n\n\n\nbayesplot\nAnother essential package for working with posterior samples is called bayesplot. Let’s use it to look at the posterior distribution for avg_birds_per_person.\n\n## Extract draws from the model object\npoisson_model_draws <- poisson_model_samp$draws()\n\nbayesplot::mcmc_areas(poisson_model_draws, pars = \"avg_birds_per_person\") + \n  geom_vline(xintercept = avg_birds_per_person, col = \"orange\", lwd = 2)\n\n\n\n\nposterior distribution for avg_birds_per_person. The orange line is the true parameter value, which we simulated in R.\n\n\n\n\n\nPosterior predictive checks\nBayesian models MAKE data, which suggests a clear way to validate our models: ask the model to make some data, then see how well these data correspond to biology (e.g. to our real data). Here, we will take 50 fake datasets of bird counts and compare them to the simulation we first did in R.\nThe process involves a bit of fiddling around in R to get the simulated data, but then bayesplot does all the work:\n\nbird_count_draws <- poisson_model_samp$draws(variables = \"bird_count\")\nbird_count_draws_matrix <- posterior::as_draws_matrix(bird_count_draws)\n\nbayesplot::ppc_dens_overlay(y = bird_count,\n                            yrep = head(bird_count_draws_matrix, 50))\n\n\n\n\n\n\n\ntidybayes again\nAs we see above, bayesplot offers many out-of-the-box figures. Sometimes however, you’ll want to control exactly what your figures look like, and for this tidybayes is an excellent tool.\nLet’s use the flexibility of tidybayes to show how the prior and posterior differ between our two models\n\ntidybayes::gather_rvars(poisson_sim_stan,\n                        avg_birds_per_person) |> \n  ggplot(aes(y = \"avg_birds_per_person\", dist = .value)) + \n  tidybayes::stat_halfeye() + \n  labs(title = \"Prior\")\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\ntidybayes::gather_rvars(poisson_model_samp, \n                        avg_birds_per_person) |> \n  ggplot(aes(y = \"avg_birds_per_person\", dist = .value)) + \n  tidybayes::stat_halfeye() + \n  labs(title = \"Posterior\") + \n  coord_cartesian(xlim = c(0, 60))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShinystan\n\nshinystan::launch_shinystan(poisson_model_samp)"
  },
  {
    "objectID": "topics/01_simulation/index.html#exercises",
    "href": "topics/01_simulation/index.html#exercises",
    "title": "Data simulation",
    "section": "Exercises",
    "text": "Exercises\n\nLevel 1\n\nLet’s go birding! everyone in the class, over lunch, will go and count birds by eye! we’ll collect the vector, run and sample the model. Did our prior turn out to be appropriate?\nWhat would you do next to add complexity this model?\n\n\n\nLevel 2\n\nWe plotted histograms to evaluate our model. Experiment with other types of plots. For example, what is the maximum value in each posterior simulation? What is the minimum? How to these compare to the real data?\nTake a closer look at poisson_model_samp$summary() all the values of bird_count are the same. That’s correct, but why?\n\n\n\nLevel 3\n\nYou would never actually do the analysis in this exercise! If all you want is the average of a Poisson distribution, you can get that without any sampling at all. Start by writing the model with a different prior:\n\n\\[\n\\begin{align}\n\\text{Number of Birds}_{\\text{seen by person i}} &\\sim \\text{Poisson}(\\lambda) \\\\\n\\lambda &\\sim \\text{Gamma}(9, .5)\n\\end{align}\n\\]\nThis lets us calculate the posterior distribution directly. See the equation on Wikipedia and calculate the posterior for our bird data."
  },
  {
    "objectID": "topics/02_regression/index.html",
    "href": "topics/02_regression/index.html",
    "title": "Univariate regression",
    "section": "",
    "text": "Notes for today"
  },
  {
    "objectID": "topics/02_regression/index.html#return-to-simpsons-paradox",
    "href": "topics/02_regression/index.html#return-to-simpsons-paradox",
    "title": "Univariate regression",
    "section": "Return to Simpson’s Paradox",
    "text": "Return to Simpson’s Paradox\nWe’ll return to the Palmer penguins, and look at Simpson’s paradox in Stan.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\n\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n\nlibrary(tidybayes)\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) + \n  geom_point() + \n  stat_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nLet’s write a simple statistical model for these data:\n\\[\n\\begin{align}\n\\text{Bill depth}_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times\\text{Bill length}_i \\\\\n\\beta_0 &\\sim \\text{Normal}(??) \\\\\n\\beta_1 &\\sim \\text{Normal}(??) \\\\\n\\sigma &\\sim \\text{Exponential}(??)\n\\end{align}\n\\]\nWhat should our priors be? Before we can answer that, we have a more important question:\n\n\n\n\n\n\nWHERE IS ZERO??\n\n\n\nIt has to be somewhere. Does it make sense? take control and choose for yourself.\n\n\nIf we fit a model like this without thinking about the location of zero, we get some pretty silly answers:\n\nbill_line <- coef(lm(bill_depth_mm ~ bill_length_mm, data = penguins))\n\nWhen the value of bill length is 0, the average of the response is the intercept:\n\\[\n\\begin{align}\n\\mu_i &= \\beta_0 + \\beta_1\\times\\text{Bill length}_i \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times0 \\\\\n\\mu_i &= \\beta_0 \\\\\n\\end{align}\n\\]\nBut, if we take the data as we found it, we’re going to be talking about \\(\\beta_0\\) as the depth of a penguin’s bill when the bill has 0 length! Either way it is the same line. However, from the point of view of setting priors and interpreting coefficients, it helps a lot to set a meaningful 0.\nA very common choice is to subtract the average from your independent variable, so that it is equal to 0 at the average:\n\\[\n\\begin{align}\n\\text{Bill depth}_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times(\\text{Bill length}_i  - \\overline{\\text{Bill length}})\\\\\n\\beta_0 &\\sim \\text{Normal}(??) \\\\\n\\beta_1 &\\sim \\text{Normal}(??)\n\\end{align}\n\\]\nNow \\(\\beta_0\\) means the average bill depth at the average bill length. It becomes easier to think about priors:\n\\[\n\\begin{align}\n\\text{Bill depth}_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times(\\text{Bill length}_i  - \\overline{\\text{Bill length}})\\\\\n\\beta_0 &\\sim \\text{Normal}(17,2) \\\\\n\\beta_1 &\\sim \\text{Normal}(0,.5) \\\\\n\\sigma &\\sim \\text{Exponential}(0.5)\n\\end{align}\n\\]\n\n\n\n\n\n\nExercise\n\n\n\nWhat continuous predictors have you used in your analysis? How would you find a biologically meaningful zero? Think about how you would center time, age, mass, fitness etc."
  },
  {
    "objectID": "topics/02_regression/index.html#prior-predictive-simulations",
    "href": "topics/02_regression/index.html#prior-predictive-simulations",
    "title": "Univariate regression",
    "section": "Prior predictive simulations",
    "text": "Prior predictive simulations\nArmed with this model, it becomes much easier to think about prior predictions.\nWe’ll make a bunch of lines implied by the equation above. There’s two steps:\n\nCenter the predictor\nMake up a vector that goes from the minimum to the maximum of the predictor. This is just for convenience!\n\n\nbill_len_centered <- with(penguins,\n                          bill_length_mm - mean(bill_length_mm,\n                                                na.rm = TRUE))\n\n## make up a short vector\nsome_bill_lengths <- seq(\n  from = min(bill_len_centered, na.rm = TRUE), \n  to = max(bill_len_centered, na.rm = TRUE),\n  length.out = 10\n  )\n\n\n\n\n\n\n\nShortcuts to these common tasks\n\n\n\nThese tasks are so common that they are automated in helper functions.\nFor centering predictors, see the base R function ?scale\nFor creating a short vector over the range of a predictor, see modelr::seq_range. The R package modelr has many different functions to help with modelling.\n\n\nTo simulate, we’ll use some matrix algebra, as we saw in lecture:\n\nslopes <- rnorm(7, 0, .5)\ninters <- rnorm(7, 17, 2)\n\nX <- cbind(1, some_bill_lengths)\nB <- rbind(inters, slopes)\n\nprior_mus <- X %*% B\n\nmatplot(x = some_bill_lengths,\n        y = prior_mus, type = \"l\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCopy the code above. Increase the number of simulations. Which priors are too wide? Which are too narrow?\n\n\n\nSimulating Observations\nThere are always at least TWO kinds of predictions we can be thinking about:\n\nPredicted averages\nPredicted observations\n\nWe can use the full model to simulate observations!\n\nslopes <- rnorm(7, 0, .5)\ninters <- rnorm(7, 17, 2)\nsigmas <- rexp(7, rate = 0.3)\n\nX <- cbind(1, some_bill_lengths)\nB <- rbind(inters, slopes)\n\nprior_mus <- X %*% B\n\nprior_obs <- matrix(0, nrow = nrow(prior_mus), ncol = ncol(prior_mus))\n\nfor (j in 1:ncol(prior_obs)) {\n  prior_obs[,j] <- rnorm(n = nrow(prior_mus),\n                         mean = prior_mus[,j],\n                         sd = sigmas[j])\n}\n\nmatplot(x = some_bill_lengths,\n        y = prior_obs, type = \"p\")\n\n\n\n\nTidyverse style for those who indulge:\n\ntibble(\n  sim_id = 1:7,\n  slopes = rnorm(7, 0, .5),\n  inters = rnorm(7, 17, 2),\n  sigmas = rexp(7, rate = 0.4)\n  ) |> \n  mutate(x = list(seq(from = -10, to = 10, length.out = 6))) |> \n  rowwise() |> \n  mutate(avg = list(x * slopes + inters),\n         obs = list(rnorm(length(avg), mean = avg, sd = sigmas))) |> \n  unnest(cols = c(\"x\", \"avg\", \"obs\")) |> \n  ggplot(aes(x= x, y = avg, group = sim_id, colour = sim_id)) + \n  geom_line() + \n  geom_point(aes(y = obs)) + \n  scale_color_distiller(type = \"qual\")\n\nWarning: Using a discrete colour palette in a continuous scale\nℹ Consider using `type = \"seq\"` or `type = \"div\"` instead"
  },
  {
    "objectID": "topics/02_regression/index.html#linear-regression-in-stan",
    "href": "topics/02_regression/index.html#linear-regression-in-stan",
    "title": "Univariate regression",
    "section": "Linear regression in Stan",
    "text": "Linear regression in Stan\nNow we write a Stan program for this model. We’ll begin with a simple model that has no posterior predictions\n\nnormal_regression_no_prediction <- cmdstan_model(\n  stan_file = \"topics/02_regression/normal_regression_no_prediction.stan\")\n\nnormal_regression_no_prediction\n\ndata {\n  int<lower=0> N;\n  vector[N] bill_len;\n  vector[N] bill_dep;\n}\nparameters {\n  real intercept;\n  real slope;\n  real<lower=0> sigma;\n}\nmodel {\n  bill_dep ~ normal(intercept + slope * bill_len, sigma);\n  intercept ~ normal(17, 2);\n  slope ~ normal(0, 1);\n  sigma ~ exponential(.7);\n}\n\n\nIn order to get the posterior, we need to put our data in Stan. Remember to remove NAs first!\n\n## drop NAs\npenguins_no_NA <- penguins |> \n  tidyr::drop_na(bill_depth_mm, bill_length_mm) |> \n  dplyr::mutate(\n    bill_length_center = bill_length_mm - mean(bill_length_mm))\n\n## assemble data list\ndata_list <- with(penguins_no_NA,\n     list(N = length(bill_length_center),\n          bill_len = bill_length_center,\n          bill_dep = bill_depth_mm\n          ))\n\n\nnormal_reg_no_pred <- normal_regression_no_prediction$sample(\n  data = data_list, \n  refresh = 0)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.1 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 finished in 0.1 seconds.\nChain 4 finished in 0.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.1 seconds.\nTotal execution time: 1.1 seconds.\n\nnormal_reg_no_pred$summary()\n\n# A tibble: 4 × 10\n  variable       mean    median     sd    mad       q5       q95  rhat ess_bulk\n  <chr>         <num>     <num>  <num>  <num>    <num>     <num> <num>    <num>\n1 lp__      -396.     -395.     1.20   1.04   -398.    -394.      1.00    2123.\n2 intercept   17.2      17.2    0.105  0.105    17.0     17.3     1.00    3602.\n3 slope       -0.0848   -0.0849 0.0189 0.0192   -0.116   -0.0539  1.00    4449.\n4 sigma        1.93      1.92   0.0741 0.0741    1.81     2.05    1.00    4252.\n# ℹ 1 more variable: ess_tail <num>\n\n\n\nnormal_reg_no_pred$draws() |> \n  bayesplot::mcmc_areas(pars = c(\"slope\", \"intercept\", \"sigma\"))"
  },
  {
    "objectID": "topics/02_regression/index.html#posterior-predictions-in-stan",
    "href": "topics/02_regression/index.html#posterior-predictions-in-stan",
    "title": "Univariate regression",
    "section": "Posterior predictions in Stan",
    "text": "Posterior predictions in Stan\n\nnormal_regression <- cmdstan_model(stan_file = \"topics/02_regression/normal_regression.stan\")\n\nnormal_regression\n\ndata {\n  int<lower=0> N;\n  vector[N] bill_len;\n  vector[N] bill_dep;\n  // posterior predictions\n  int<lower=0> npost;\n  vector[npost] pred_values;\n}\nparameters {\n  real intercept;\n  real slope;\n  real<lower=0> sigma;\n}\nmodel {\n  bill_dep ~ normal(intercept + slope * bill_len, sigma);\n  intercept ~ normal(17, 2);\n  slope ~ normal(0, 1);\n}\ngenerated quantities {\n  vector[npost] post_bill_dep_obs;\n  vector[npost] post_bill_dep_average;\n  \n  // calculate expectation\n  post_bill_dep_average = intercept + slope * pred_values;\n  \n  // make fake observations\n  for (i in 1:npost) {\n    post_bill_dep_obs[i] = normal_rng(intercept + slope * pred_values[i], sigma);\n  }  \n  \n}\n\n\n\npenguins_no_NA <- penguins |> \n  tidyr::drop_na(bill_depth_mm, bill_length_mm) |> \n  dplyr::mutate(\n    bill_length_center = bill_length_mm - mean(bill_length_mm))\n\ndata_list <- with(penguins_no_NA,\n     list(N = length(bill_length_center),\n          bill_len = bill_length_center,\n          bill_dep = bill_depth_mm,\n          npost = 6,\n          pred_values = modelr::seq_range(penguins_no_NA$bill_length_center, n = 6)\n          ))\n\nbill_norm_reg <- normal_regression$sample(data = data_list, \n                                          refresh = 0)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.1 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 finished in 0.1 seconds.\nChain 4 finished in 0.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.1 seconds.\nTotal execution time: 1.0 seconds.\n\n\n\nlibrary(tidyverse)\n\nbill_posterior <- bill_norm_reg |> \n  tidybayes::spread_rvars(post_bill_dep_average[i],\n                          post_bill_dep_obs[i]) |>\n  mutate(bill_length = data_list$pred_values[i]) \n\nbill_posterior |> \n  ggplot(aes(x = bill_length, dist = post_bill_dep_average)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center, y = bill_depth_mm),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) + \n  scale_fill_brewer(palette = \"Greens\", direction = -1, guide = \"none\") + \n  labs(title = \"Average response\")\n\nWarning: Using the `size` aesthetic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\n\n\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\nbill_posterior |> \n  ggplot(aes(x = bill_length, dist = post_bill_dep_obs)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center, y = bill_depth_mm),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) + \n  scale_fill_brewer(palette = \"Greens\", direction = -1, guide = \"none\") +\n  labs(title = \"Predicted observations\")\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nNow, what I would like you to do is to extend this model to include species. Specifically, let each species have its own value of the intercept.\n\nnormal_regression_spp <- cmdstan_model(stan_file = \"topics/02_regression/normal_regression_spp.stan\")\n\nnormal_regression_spp\n\ndata {\n  int<lower=0> N;\n  vector[N] bill_len;\n  vector[N] bill_dep;\n  // species IDs\n  array[N] int spp_id;\n  // posterior predictions\n  int<lower=0> npost;\n  vector[npost] pred_values;\n  array[npost] int pred_spp_id;\n}\nparameters {\n  vector[3] intercept;\n  real slope;\n  real<lower=0> sigma;\n}\nmodel {\n  bill_dep ~ normal(intercept[spp_id] + slope * bill_len, sigma);\n  intercept ~ normal(17, 2);\n  slope ~ normal(0, 1);\n}\ngenerated quantities {\n  vector[npost] post_bill_dep_obs;\n  vector[npost] post_bill_dep_average;\n  \n  // calculate expectation\n  post_bill_dep_average = intercept[pred_spp_id] + slope * pred_values;\n  \n  // make fake observations\n  for (i in 1:npost) {\n    post_bill_dep_obs[i] = normal_rng(intercept[pred_spp_id[i]] + slope * pred_values[i], sigma);\n  }  \n  \n}\n\n\nWe set up a list for this model just as we did before. Note that this time we are using TRIPLE the pred_values, because we want to run independent predictions for each species.\n\nbill_vec <- modelr::seq_range(penguins_no_NA$bill_length_center, n = 6)\n\ndata_list_spp <- with(penguins_no_NA,\n     list(N = length(bill_length_center),\n          bill_len = bill_length_center,\n          bill_dep = bill_depth_mm,\n          spp_id = as.numeric(as.factor(species)),\n          npost = 3*6,\n          pred_values = rep(bill_vec, 3),\n          pred_spp_id = rep(1:3, each = 6)\n          ))\n\nnormal_reg_spp_post <- normal_regression_spp$sample(data = data_list_spp, refresh = 0)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.3 seconds.\nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 1.4 seconds.\n\n\nNote that the sign of the slope is different now!\n\nnormal_reg_spp_post$summary()\n\n# A tibble: 42 × 10\n   variable         mean   median     sd    mad       q5      q95  rhat ess_bulk\n   <chr>           <num>    <num>  <num>  <num>    <num>    <num> <num>    <num>\n 1 lp__         -157.    -157.    1.61   1.47   -160.    -155.     1.00    1626.\n 2 intercept[1]   19.4     19.4   0.124  0.119    19.2     19.6    1.00    1836.\n 3 intercept[2]   17.4     17.4   0.146  0.147    17.2     17.7    1.00    2436.\n 4 intercept[3]   14.3     14.3   0.108  0.105    14.1     14.5    1.00    2032.\n 5 slope           0.199    0.199 0.0183 0.0182    0.168    0.229  1.00    1555.\n 6 sigma           0.956    0.955 0.0369 0.0366    0.897    1.02   1.00    3392.\n 7 post_bill_d…   17.0     17.0   0.973  0.993    15.4     18.6    1.00    3744.\n 8 post_bill_d…   18.1     18.1   0.966  0.966    16.5     19.7    1.00    4495.\n 9 post_bill_d…   19.2     19.2   0.982  0.971    17.6     20.8    1.00    3613.\n10 post_bill_d…   20.3     20.3   0.976  0.994    18.7     21.9    1.00    3978.\n# ℹ 32 more rows\n# ℹ 1 more variable: ess_tail <num>\n\n\n\nPlotting posterior predictions\n\nbill_posterior <- normal_reg_spp_post |> \n  tidybayes::spread_rvars(post_bill_dep_average[i],\n                          post_bill_dep_obs[i]) |>\n  mutate(bill_length = data_list_spp$pred_values[i],\n         spp = data_list_spp$pred_spp_id) |> \n  mutate(spp = as.factor(levels(penguins$species)[spp]))\n\nbill_posterior |> \n  ggplot(aes(x = bill_length,\n             ydist = post_bill_dep_average,\n             fill = spp, \n             colour = spp)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center,\n                 y = bill_depth_mm,\n                 fill = species, colour = species),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) +   \n  scale_fill_brewer(palette = \"Set2\") +\n  scale_color_brewer(palette = \"Dark2\") + \n  labs(title = \"Average response\")\nbill_posterior |> \n  ggplot(aes(x = bill_length,\n             dist = post_bill_dep_obs,\n             fill = spp,\n             colour = spp)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center,\n                 y = bill_depth_mm,\n                 colour = species),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) + \n  scale_fill_brewer(palette = \"Set2\") +\n  scale_color_brewer(palette = \"Dark2\") + \n  labs(title = \"Predicted observations\") + \n  facet_wrap(~spp, ncol = 1)"
  },
  {
    "objectID": "topics/02_regression/index.html#exercise-2",
    "href": "topics/02_regression/index.html#exercise-2",
    "title": "Univariate regression",
    "section": "Exercise!",
    "text": "Exercise!\nshow how the \\(\\sigma\\) is different between these two models"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fd---types-of-functions",
    "href": "slides/09_Gaussian_process/index.html#fd---types-of-functions",
    "title": "Gaussian process",
    "section": "\\(f(d)\\) - types of functions",
    "text": "\\(f(d)\\) - types of functions\n\nMany types of functions have been proposed that has this general shape\n\n\nIn this lecture, we will use the exponential function\n\\[C_0 + C_1 \\left(1-e^{-d/a}\\right)\\]\n\n\nwhere\n\n\\(C_0\\) is the nugget effect\n\n\n\n\n\\(C_1\\) is the sill\n\n\n\n\n\\(d\\) is the distance\n\n\n\n\n\\(a\\) is the range"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#exponential-function",
    "href": "slides/09_Gaussian_process/index.html#exponential-function",
    "title": "Gaussian process",
    "section": "Exponential function",
    "text": "Exponential function\nNugget : 2 – Sill : 5 – Range : 10"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#an-illustrative-example",
    "href": "slides/09_Gaussian_process/index.html#an-illustrative-example",
    "title": "Gaussian process",
    "section": "An illustrative example",
    "text": "An illustrative example\n\nTo present how Gaussian processes can be used, let’s study the distribution of Sylvilagus oviparus in Montréal.\n\n\nA few characteristics of Sylvilagus oviparus\n\nThey are found mainly in urban parks of Montréal and is very efficient at hiding in hollow trees and burrows.\n\n\n\nThey lay their eggs (often pastel-coloured) on the Sunday following the first full moon after the spring equinox.\n\n\n\n\nThey move well in an urban setting and are not affected by the level of urbanisation\n\n\n\n\nThey disperse at most 15 km per year"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#a-typical-member-of-the-species",
    "href": "slides/09_Gaussian_process/index.html#a-typical-member-of-the-species",
    "title": "Gaussian process",
    "section": "A typical member of the species",
    "text": "A typical member of the species"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#distribution-in-montréal",
    "href": "slides/09_Gaussian_process/index.html#distribution-in-montréal",
    "title": "Gaussian process",
    "section": "Distribution in Montréal",
    "text": "Distribution in Montréal\nIn 2015, a survey was carried out to find Sylvilagus oviparus in Montréal’s park. Here are the results\n\n\n\n\n\n\n\n\n\nWithin the censused park\n\nBlue parks : observed\nPink parks : not observed"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#distribution-of-sylvilagus-oviparus-in-montréal",
    "href": "slides/09_Gaussian_process/index.html#distribution-of-sylvilagus-oviparus-in-montréal",
    "title": "Gaussian process",
    "section": "Distribution of Sylvilagus oviparus in Montréal",
    "text": "Distribution of Sylvilagus oviparus in Montréal\nIn 2015, a survey was carried out to find Sylvilagus oviparus in Montréal’s park. Here are the results\n\n\n\n\n\n\n\n\n\nWithin the censused park\n\nBlue parks : observed\nPink parks : not observed"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#distribution-of-s.-oviparus-in-montréal",
    "href": "slides/09_Gaussian_process/index.html#distribution-of-s.-oviparus-in-montréal",
    "title": "Gaussian process",
    "section": "Distribution of S. oviparus in Montréal",
    "text": "Distribution of S. oviparus in Montréal\nIn 2015, a survey was carried out to find Sylvilagus oviparus in Montréal’s park. Here are the results\n\n\n\n\n\n\n\n\n\nWithin the censused park\n\nBlue parks : observed\nPink parks : not observed"
  },
  {
    "objectID": "topics/03_one_random_effect/index.html#exercises",
    "href": "topics/03_one_random_effect/index.html#exercises",
    "title": "Models with one level of hierarchy",
    "section": "Exercises",
    "text": "Exercises\n\nTry leaving out a group and refitting the hierarchical model. Are the predictions for the missing group accurate?\nThere are other categorical predictors in the dataset. Try including year as a part of the group-creating factor (i.e. in the call to unite() above). What changes?\nThe posterior for both models includes a predicted fake_obs for EVERY observation. This opens the possibility of using bayesplot to make predictions. Look back at the code from Day 1 and create a posterior predictive check for both models. (e.g. using ppc_dens_overlay)\nWe could perhaps have used sex as a grouping factor, but sex has missing values in it! Why is this a problem for this kind of model? What would it take to address that? (Discussion only; missing values are unfortunately outside the class scope!)"
  },
  {
    "objectID": "topics/03_one_random_effect/index.html#poisson-random-intercepts-mite-abundance",
    "href": "topics/03_one_random_effect/index.html#poisson-random-intercepts-mite-abundance",
    "title": "Models with one level of hierarchy",
    "section": "Poisson random intercepts: Mite abundance",
    "text": "Poisson random intercepts: Mite abundance\n\ndata(mite, package = \"vegan\")\ndata(\"mite.env\", package = \"vegan\")\n\n# combine data and environment\n\nmite_data_long <- mite |> \n  tibble::rownames_to_column(var = \"site_id\") |> \n  bind_cols(mite.env) |> \n  pivot_longer(Brachy:Trimalc2,\n               names_to = \"spp\", values_to = \"abd\")\n\n\nmite_data_long |> \n  mutate(site_id = forcats::fct_reorder(site_id, abd)) |> \n  ggplot(aes(y = site_id, x = abd)) +\n  geom_point() + \n  coord_cartesian(xlim = c(0,100)) + \n  stat_summary(fun = median, col = \"red\", geom = \"point\")\n\n\n\n\nAbundance of each species at every site in the mite dataset. Points are species abundances, grouped on the row for that site.\n\n\n\n\n\nExercise: write the model in the same notation as the original\nLet’s model the counts of species abundances, using a random effect for each site. Write the model that corresponds to this!\n\n\nTrying it with a Normal distribution:\nIt’s actually possible to run the previous model on this one. let’s set up the data and try:\n\nspecies_numbers <- with(mite_data_long,\n     setNames(seq_along(unique(spp)), unique(spp)))\n\nmite_data_groupID <- mutate(mite_data_long,\n                            group_id = species_numbers[spp])\n\nmite_list <- with(mite_data_groupID,\n                  list(\n                    N = length(abd),\n                    y = abd,\n                    Ngroup = dplyr::n_distinct(spp),\n                    group_id = group_id\n                  ))\n\nnormal_samples <- hierarchical_groups$sample(data = mite_list, refresh = 0, parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpYROeSn/model-15c46a09925.stan', line 15, column 2 to column 33)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpYROeSn/model-15c46a09925.stan', line 15, column 2 to column 33)\n\n\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 3 \n\n\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpYROeSn/model-15c46a09925.stan', line 15, column 2 to column 33)\n\n\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 4 \n\n\nChain 2 finished in 9.1 seconds.\nChain 1 finished in 9.3 seconds.\nChain 4 finished in 9.4 seconds.\nChain 3 finished in 9.5 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 9.3 seconds.\nTotal execution time: 9.6 seconds.\n\n\nThis is interesting, but it would probably be better to fit this model with something meant for counts! With this comes the need to include a log link function. Fortunately, Stan makes all this possible with just a few small changes:\n\n\nExercise: translate it into Stan\nModify the program hierarchical_groups.stan to work for poisson data. Some things to keep in mind:\n\ndata {} block: remember that the Poisson distribution needs integers and set up the data inputs accordinly.\nparameters {} block: think about which parameters the poisson does NOT need.\nmodel {} block: remember to remove any unneeded parameters from the likelihood (the model of the data), and their priors too.\nreplace normal with poisson_log. Note that this evaluates its argument on the log scale. That is, it works like a typical GLM done in R. We can keep priors the same as in the last model, though we may decide to change their values.\ngenerated quantities {} block: replace normal_rng() with poisson_log_rng() – where necessary – and delete unused parameters.\nagain, remember that the Poisson needs to be making integers. For example, replace vector[Ngroup] with array[Ngroup] int\n\n\nphg <- cmdstan_model(stan_file = \"topics/03_one_random_effect/poisson_hier_groups.stan\")\n\nphg_samples <- phg$sample(data = mite_list, refresh = 20, parallel_chains = 2, chains = 2)\n\nRunning MCMC with 2 parallel chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:   20 / 2000 [  1%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:   20 / 2000 [  1%]  (Warmup) \n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpw7jYom/model-daed605a6f38.stan', line 14, column 2 to column 33)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 1 Iteration:   40 / 2000 [  2%]  (Warmup) \nChain 2 Iteration:   40 / 2000 [  2%]  (Warmup) \nChain 1 Iteration:   60 / 2000 [  3%]  (Warmup) \nChain 2 Iteration:   60 / 2000 [  3%]  (Warmup) \nChain 1 Iteration:   80 / 2000 [  4%]  (Warmup) \nChain 2 Iteration:   80 / 2000 [  4%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  120 / 2000 [  6%]  (Warmup) \nChain 2 Iteration:  120 / 2000 [  6%]  (Warmup) \nChain 1 Iteration:  140 / 2000 [  7%]  (Warmup) \nChain 2 Iteration:  140 / 2000 [  7%]  (Warmup) \nChain 1 Iteration:  160 / 2000 [  8%]  (Warmup) \nChain 2 Iteration:  160 / 2000 [  8%]  (Warmup) \nChain 2 Iteration:  180 / 2000 [  9%]  (Warmup) \nChain 1 Iteration:  180 / 2000 [  9%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  220 / 2000 [ 11%]  (Warmup) \nChain 1 Iteration:  220 / 2000 [ 11%]  (Warmup) \nChain 2 Iteration:  240 / 2000 [ 12%]  (Warmup) \nChain 2 Iteration:  260 / 2000 [ 13%]  (Warmup) \nChain 1 Iteration:  240 / 2000 [ 12%]  (Warmup) \nChain 2 Iteration:  280 / 2000 [ 14%]  (Warmup) \nChain 1 Iteration:  260 / 2000 [ 13%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  320 / 2000 [ 16%]  (Warmup) \nChain 1 Iteration:  280 / 2000 [ 14%]  (Warmup) \nChain 2 Iteration:  340 / 2000 [ 17%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  360 / 2000 [ 18%]  (Warmup) \nChain 1 Iteration:  320 / 2000 [ 16%]  (Warmup) \nChain 2 Iteration:  380 / 2000 [ 19%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  340 / 2000 [ 17%]  (Warmup) \nChain 2 Iteration:  420 / 2000 [ 21%]  (Warmup) \nChain 1 Iteration:  360 / 2000 [ 18%]  (Warmup) \nChain 2 Iteration:  440 / 2000 [ 22%]  (Warmup) \nChain 1 Iteration:  380 / 2000 [ 19%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  460 / 2000 [ 23%]  (Warmup) \nChain 1 Iteration:  420 / 2000 [ 21%]  (Warmup) \nChain 2 Iteration:  480 / 2000 [ 24%]  (Warmup) \nChain 1 Iteration:  440 / 2000 [ 22%]  (Warmup) \nChain 1 Iteration:  460 / 2000 [ 23%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  480 / 2000 [ 24%]  (Warmup) \nChain 2 Iteration:  520 / 2000 [ 26%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  540 / 2000 [ 27%]  (Warmup) \nChain 1 Iteration:  520 / 2000 [ 26%]  (Warmup) \nChain 2 Iteration:  560 / 2000 [ 28%]  (Warmup) \nChain 1 Iteration:  540 / 2000 [ 27%]  (Warmup) \nChain 2 Iteration:  580 / 2000 [ 29%]  (Warmup) \nChain 1 Iteration:  560 / 2000 [ 28%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  580 / 2000 [ 29%]  (Warmup) \nChain 2 Iteration:  620 / 2000 [ 31%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  620 / 2000 [ 31%]  (Warmup) \nChain 2 Iteration:  640 / 2000 [ 32%]  (Warmup) \nChain 1 Iteration:  640 / 2000 [ 32%]  (Warmup) \nChain 2 Iteration:  660 / 2000 [ 33%]  (Warmup) \nChain 2 Iteration:  680 / 2000 [ 34%]  (Warmup) \nChain 1 Iteration:  660 / 2000 [ 33%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  680 / 2000 [ 34%]  (Warmup) \nChain 2 Iteration:  720 / 2000 [ 36%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  720 / 2000 [ 36%]  (Warmup) \nChain 2 Iteration:  740 / 2000 [ 37%]  (Warmup) \nChain 1 Iteration:  740 / 2000 [ 37%]  (Warmup) \nChain 2 Iteration:  760 / 2000 [ 38%]  (Warmup) \nChain 2 Iteration:  780 / 2000 [ 39%]  (Warmup) \nChain 1 Iteration:  760 / 2000 [ 38%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  780 / 2000 [ 39%]  (Warmup) \nChain 2 Iteration:  820 / 2000 [ 41%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  820 / 2000 [ 41%]  (Warmup) \nChain 2 Iteration:  840 / 2000 [ 42%]  (Warmup) \nChain 1 Iteration:  840 / 2000 [ 42%]  (Warmup) \nChain 2 Iteration:  860 / 2000 [ 43%]  (Warmup) \nChain 2 Iteration:  880 / 2000 [ 44%]  (Warmup) \nChain 1 Iteration:  860 / 2000 [ 43%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration:  880 / 2000 [ 44%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration:  920 / 2000 [ 46%]  (Warmup) \nChain 2 Iteration:  940 / 2000 [ 47%]  (Warmup) \nChain 1 Iteration:  920 / 2000 [ 46%]  (Warmup) \nChain 2 Iteration:  960 / 2000 [ 48%]  (Warmup) \nChain 1 Iteration:  940 / 2000 [ 47%]  (Warmup) \nChain 1 Iteration:  960 / 2000 [ 48%]  (Warmup) \nChain 2 Iteration:  980 / 2000 [ 49%]  (Warmup) \nChain 1 Iteration:  980 / 2000 [ 49%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1020 / 2000 [ 51%]  (Sampling) \nChain 1 Iteration: 1020 / 2000 [ 51%]  (Sampling) \nChain 2 Iteration: 1040 / 2000 [ 52%]  (Sampling) \nChain 2 Iteration: 1060 / 2000 [ 53%]  (Sampling) \nChain 1 Iteration: 1040 / 2000 [ 52%]  (Sampling) \nChain 2 Iteration: 1080 / 2000 [ 54%]  (Sampling) \nChain 1 Iteration: 1060 / 2000 [ 53%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1080 / 2000 [ 54%]  (Sampling) \nChain 2 Iteration: 1120 / 2000 [ 56%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1140 / 2000 [ 57%]  (Sampling) \nChain 2 Iteration: 1160 / 2000 [ 58%]  (Sampling) \nChain 1 Iteration: 1120 / 2000 [ 56%]  (Sampling) \nChain 2 Iteration: 1180 / 2000 [ 59%]  (Sampling) \nChain 1 Iteration: 1140 / 2000 [ 57%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1160 / 2000 [ 58%]  (Sampling) \nChain 2 Iteration: 1220 / 2000 [ 61%]  (Sampling) \nChain 1 Iteration: 1180 / 2000 [ 59%]  (Sampling) \nChain 2 Iteration: 1240 / 2000 [ 62%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1260 / 2000 [ 63%]  (Sampling) \nChain 2 Iteration: 1280 / 2000 [ 64%]  (Sampling) \nChain 1 Iteration: 1220 / 2000 [ 61%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1240 / 2000 [ 62%]  (Sampling) \nChain 2 Iteration: 1320 / 2000 [ 66%]  (Sampling) \nChain 1 Iteration: 1260 / 2000 [ 63%]  (Sampling) \nChain 2 Iteration: 1340 / 2000 [ 67%]  (Sampling) \nChain 2 Iteration: 1360 / 2000 [ 68%]  (Sampling) \nChain 1 Iteration: 1280 / 2000 [ 64%]  (Sampling) \nChain 2 Iteration: 1380 / 2000 [ 69%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1320 / 2000 [ 66%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1340 / 2000 [ 67%]  (Sampling) \nChain 2 Iteration: 1420 / 2000 [ 71%]  (Sampling) \nChain 1 Iteration: 1360 / 2000 [ 68%]  (Sampling) \nChain 2 Iteration: 1440 / 2000 [ 72%]  (Sampling) \nChain 2 Iteration: 1460 / 2000 [ 73%]  (Sampling) \nChain 1 Iteration: 1380 / 2000 [ 69%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1480 / 2000 [ 74%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1420 / 2000 [ 71%]  (Sampling) \nChain 2 Iteration: 1520 / 2000 [ 76%]  (Sampling) \nChain 1 Iteration: 1440 / 2000 [ 72%]  (Sampling) \nChain 2 Iteration: 1540 / 2000 [ 77%]  (Sampling) \nChain 1 Iteration: 1460 / 2000 [ 73%]  (Sampling) \nChain 2 Iteration: 1560 / 2000 [ 78%]  (Sampling) \nChain 1 Iteration: 1480 / 2000 [ 74%]  (Sampling) \nChain 2 Iteration: 1580 / 2000 [ 79%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1520 / 2000 [ 76%]  (Sampling) \nChain 2 Iteration: 1620 / 2000 [ 81%]  (Sampling) \nChain 1 Iteration: 1540 / 2000 [ 77%]  (Sampling) \nChain 2 Iteration: 1640 / 2000 [ 82%]  (Sampling) \nChain 1 Iteration: 1560 / 2000 [ 78%]  (Sampling) \nChain 2 Iteration: 1660 / 2000 [ 83%]  (Sampling) \nChain 1 Iteration: 1580 / 2000 [ 79%]  (Sampling) \nChain 2 Iteration: 1680 / 2000 [ 84%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1620 / 2000 [ 81%]  (Sampling) \nChain 2 Iteration: 1720 / 2000 [ 86%]  (Sampling) \nChain 1 Iteration: 1640 / 2000 [ 82%]  (Sampling) \nChain 2 Iteration: 1740 / 2000 [ 87%]  (Sampling) \nChain 2 Iteration: 1760 / 2000 [ 88%]  (Sampling) \nChain 1 Iteration: 1660 / 2000 [ 83%]  (Sampling) \nChain 1 Iteration: 1680 / 2000 [ 84%]  (Sampling) \nChain 2 Iteration: 1780 / 2000 [ 89%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1820 / 2000 [ 91%]  (Sampling) \nChain 1 Iteration: 1720 / 2000 [ 86%]  (Sampling) \nChain 2 Iteration: 1840 / 2000 [ 92%]  (Sampling) \nChain 1 Iteration: 1740 / 2000 [ 87%]  (Sampling) \nChain 2 Iteration: 1860 / 2000 [ 93%]  (Sampling) \nChain 1 Iteration: 1760 / 2000 [ 88%]  (Sampling) \nChain 2 Iteration: 1880 / 2000 [ 94%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 1780 / 2000 [ 89%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1920 / 2000 [ 96%]  (Sampling) \nChain 1 Iteration: 1820 / 2000 [ 91%]  (Sampling) \nChain 2 Iteration: 1940 / 2000 [ 97%]  (Sampling) \nChain 2 Iteration: 1960 / 2000 [ 98%]  (Sampling) \nChain 1 Iteration: 1840 / 2000 [ 92%]  (Sampling) \nChain 2 Iteration: 1980 / 2000 [ 99%]  (Sampling) \nChain 1 Iteration: 1860 / 2000 [ 93%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 11.9 seconds.\nChain 1 Iteration: 1880 / 2000 [ 94%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 1920 / 2000 [ 96%]  (Sampling) \nChain 1 Iteration: 1940 / 2000 [ 97%]  (Sampling) \nChain 1 Iteration: 1960 / 2000 [ 98%]  (Sampling) \nChain 1 Iteration: 1980 / 2000 [ 99%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 12.9 seconds.\n\nBoth chains finished successfully.\nMean chain execution time: 12.4 seconds.\nTotal execution time: 13.0 seconds.\n\nphg_samples |> \n  gather_rvars(one_obs_per_group[i]) |> \n  mutate(spp = names(species_numbers)[i],\n         spp = forcats::fct_reorder(spp, .value, median)) |> \n  ggplot(aes(y = spp, dist = .value)) + \n  stat_pointinterval() + \n  geom_point(aes(y = spp, x = m),\n             data = mite_data_groupID |> \n               group_by(spp) |> \n               summarize(m = mean(abd)),\n             inherit.aes = FALSE, col = \"red\")\n\n\n\n\n\n\nExercises\n\nTry modifying the program again, this time adding a predictor: water content. What happens to sigma_grp in this example?"
  },
  {
    "objectID": "topics/03_one_random_effect/index.html#observation-level-random-effects-mite-species-richness",
    "href": "topics/03_one_random_effect/index.html#observation-level-random-effects-mite-species-richness",
    "title": "Models with one level of hierarchy",
    "section": "Observation-level random effects: Mite species richness",
    "text": "Observation-level random effects: Mite species richness\n\nmite_species_richness <- mite_data_long |> \n  group_by(site_id, WatrCont) |> \n  summarize(S = sum(abd > 0)) |>\n  ungroup() |> \n  mutate(water_c = (WatrCont - mean(WatrCont))/100)\n\n`summarise()` has grouped output by 'site_id'. You can override using the\n`.groups` argument.\n\nmite_species_richness |> \n  ggplot(aes(x = water_c, y = S)) + \n  geom_point()\n\n\n\nmite_species_richness |> \n  ggplot(aes(x = S)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "topics/03_one_random_effect/index.html#bernoulli-presence-absence-data-mite-occurrance.",
    "href": "topics/03_one_random_effect/index.html#bernoulli-presence-absence-data-mite-occurrance.",
    "title": "Models with one level of hierarchy",
    "section": "Bernoulli presence-absence data: Mite occurrance.",
    "text": "Bernoulli presence-absence data: Mite occurrance."
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#distribution-of-s.-oviparus-in-montréal-1",
    "href": "slides/09_Gaussian_process/index.html#distribution-of-s.-oviparus-in-montréal-1",
    "title": "Gaussian process",
    "section": "Distribution of S. oviparus in Montréal",
    "text": "Distribution of S. oviparus in Montréal\n\nIn 2015, a survey was carried out to find Sylvilagus oviparus in Montréal’s park. Here are the data . . .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWithin the censused park\n\nBlue parks : observed\nPink parks : not observed"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#fitting-the-model",
    "href": "slides/09_Gaussian_process/index.html#fitting-the-model",
    "title": "Gaussian process",
    "section": "Fitting the model",
    "text": "Fitting the model\nIf we estimate the parameters of the model presented in the previous slide we get a Gaussian process that looks like\n\n\nWhat can we learn from this model ?"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#kringing",
    "href": "slides/09_Gaussian_process/index.html#kringing",
    "title": "Gaussian process",
    "section": "Kringing",
    "text": "Kringing\nIf we want to interpolate across the region of interest, this is known as kriging.\n\nSimple kriging\nSo far, we have seen the most simplistic Gaussian process where there is not even any intercept that is estimated. In short, the model is constructed using only the covariance function.\n\nIn a linear regression perspective, this means that\n\\[\\mathbf{y}\\sim\\mathcal{N}(0, f(d))\\]"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#kringing-1",
    "href": "slides/09_Gaussian_process/index.html#kringing-1",
    "title": "Gaussian process",
    "section": "Kringing",
    "text": "Kringing\n\nOrdinary kriging\n\nIf we want to account for an intercept in the model such that\n\\[\\mathbf{y}\\sim\\mathcal{N}(\\beta_0, f(d))\\]\nThis is known as ordinary kriging.\n\n\nUniversal kriging\n\nIf we want to account for one or more explanatory variables in the model such that\n\\[\\mathbf{y}\\sim\\mathcal{N}(\\beta_0 + \\mathbf{X}\\beta, f(d))\\] This is known as Universal kriging."
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#prediction-map",
    "href": "slides/09_Gaussian_process/index.html#prediction-map",
    "title": "Gaussian process",
    "section": "Prediction map",
    "text": "Prediction map"
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#kringing-style-font-size-0.6em",
    "href": "slides/09_Gaussian_process/index.html#kringing-style-font-size-0.6em",
    "title": "Gaussian process",
    "section": "Kringing {style = font-size: 0.6em;}",
    "text": "Kringing {style = font-size: 0.6em;}\n::: {style = font-size: 1.2em;} Ordinary kriging :::\nIf we want to account for an intercept in the model such that\n\\[\\mathbf{y}\\sim\\mathcal{N}(\\beta_0, f(d))\\]\nThis is known as ordinary kriging.\n\n::: {style = font-size: 1.2em;} Universal kriging :::\nIf we want to account for one or more explanatory variables in the model such that\n\\[\\mathbf{y}\\sim\\mathcal{N}(\\beta_0 + \\mathbf{X}\\beta, f(d))\\] This is known as Universal kriging."
  },
  {
    "objectID": "slides/09_Gaussian_process/index.html#kringing-style-font-size-0.7em",
    "href": "slides/09_Gaussian_process/index.html#kringing-style-font-size-0.7em",
    "title": "Gaussian process",
    "section": "Kringing {style = “font-size: 0.7em;”}",
    "text": "Kringing {style = “font-size: 0.7em;”}\n::: {style = “font-size: 1.2em;”} Ordinary kriging :::\nIf we want to account for an intercept in the model such that\n\\[\\mathbf{y}\\sim\\mathcal{N}(\\beta_0, f(d))\\]\nThis is known as ordinary kriging.\n\n::: {style = “font-size: 1.2em;”} Universal kriging :::\nIf we want to account for one or more explanatory variables in the model such that\n\\[\\mathbf{y}\\sim\\mathcal{N}(\\beta_0 + \\mathbf{X}\\beta, f(d))\\] This is known as Universal kriging."
  }
]