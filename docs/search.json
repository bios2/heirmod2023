[
  {
    "objectID": "practice_example_template.html",
    "href": "practice_example_template.html",
    "title": "Template",
    "section": "",
    "text": "Some text\n\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\n\n\nYou can also embed plots, for example:\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Course contents",
    "section": "",
    "text": "Here are documents containing all code and theory for the entire course:\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nDay 1\n\n\n\n\n\nGeneral Introduction, introduction to simulation, model checking, and Stan workflows.\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2\n\n\n\n\n\nMCMC, Diagnostic tests, model validation, and DAGs.\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides/01_Data/index.html#illustrative-datasets",
    "href": "slides/01_Data/index.html#illustrative-datasets",
    "title": "Data used for this course",
    "section": "Illustrative datasets",
    "text": "Illustrative datasets\nTo illustrate the different models and methods we will discuss in this course, we will rely on a few data sets, which are directly available in different R package\n\nmite, mite.env and mite.xy available in the vegan R package\npenguins available in the palmerpenguins R package\n\nThese datasets are practical because they are manageable in size and will allow you to see how to work out the different example presented in this course.\nLet’s look at them in more details"
  },
  {
    "objectID": "slides/01_Data/index.html#oribatid-mite-data",
    "href": "slides/01_Data/index.html#oribatid-mite-data",
    "title": "Data used for this course",
    "section": "Oribatid mite data",
    "text": "Oribatid mite data\nAside from being a very interesting datasets this data has been sample on the southern shore of Lac Geai (a few minutes walk from here ! We will go see it this week)\nSampling was carried out in June 1989 on the partially floating vegetation mat surrounding the lake from the forest border to the free water by Daniel Borcard"
  },
  {
    "objectID": "slides/01_Data/index.html#oribatid-mite-data-1",
    "href": "slides/01_Data/index.html#oribatid-mite-data-1",
    "title": "Data used for this course",
    "section": "Oribatid mite data",
    "text": "Oribatid mite data\nOribatid mites are small (usually ranging in size from 0.2 to 1.4 mm) invertebrates that are part of the Arachnida class (so they have 8 legs).\n\nIn the mite data, 35 morphospecies were identified and counted across 70 samples."
  },
  {
    "objectID": "slides/01_Data/index.html#sites-coordinates",
    "href": "slides/01_Data/index.html#sites-coordinates",
    "title": "Data used for this course",
    "section": "Sites coordinates",
    "text": "Sites coordinates"
  },
  {
    "objectID": "slides/01_Data/index.html#vegetation-cover",
    "href": "slides/01_Data/index.html#vegetation-cover",
    "title": "Data used for this course",
    "section": "Vegetation cover",
    "text": "Vegetation cover\n{fig-align=“center” width = 105%}"
  },
  {
    "objectID": "slides/01_Data/index.html#microtopography-and-shrub-cover",
    "href": "slides/01_Data/index.html#microtopography-and-shrub-cover",
    "title": "Data used for this course",
    "section": "Microtopography and shrub cover",
    "text": "Microtopography and shrub cover\n{fig-align=“center” width = 105%}"
  },
  {
    "objectID": "slides/01_Data/index.html#substrate-density-and-water-content",
    "href": "slides/01_Data/index.html#substrate-density-and-water-content",
    "title": "Data used for this course",
    "section": "Substrate density and water content",
    "text": "Substrate density and water content\n{fig-align=“center” width = 105%}"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#basic-regression-model-1",
    "href": "slides/02_Linear_model/index.html#basic-regression-model-1",
    "title": "Linear models",
    "section": "Basic regression model",
    "text": "Basic regression model\nThe cool thing about the simple linear model is that it can be studied visually quite easily"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nMany techniques have been proposed to estimate the parameters of a regression model.\nThe goal of this course is not to study these techniques but we will learn how to play with the estimated parameters because it will be very useful as we move along.\nFor example, if we want to build a model’s confidence interval from a linear regression coded as\n\n\n\n\nreg <- lm(y ~ x)\n\nHow would you do it ?\nLet’s look at the model’s results are worth studying"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-1",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-1",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nModel’s results\n\n\n(summaryReg <- summary(reg))\n\n\nCall:\nlm(formula = y ~ x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.47988 -0.26475  0.00611  0.32590  1.36077 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.57389    0.04720   54.53   <2e-16 ***\nx            1.10086    0.07976   13.80   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4718 on 98 degrees of freedom\nMultiple R-squared:  0.6603,    Adjusted R-squared:  0.6569 \nF-statistic: 190.5 on 1 and 98 DF,  p-value: < 2.2e-16\n\n\nLet’s say we want to construst the model’s confidence intervals by sampling multiple times (say 100 times!) the regression parameters, which we will assume follow Gaussian distribution. How would you do this ?"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-2",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-2",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nWe could sample the model parameters but how can we do this properly ?\nAny suggestions?"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-3",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-3",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIf we look at the estimated regression model coefficient, we can learn a few things\n\nsummaryReg$coefficients\n\n            Estimate Std. Error  t value     Pr(>|t|)\n(Intercept) 2.573889 0.04720304 54.52804 4.011925e-75\nx           1.100865 0.07975800 13.80256 1.035796e-24\n\n\nNotably, there are uncertainty around the parameters.\nMaybe we can use this information to sample model parameters and reconstruct models across different iterations of parameters.\nLet’s give it a shot !"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-4",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-4",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIf we assume that the parameters of our particular model follow a Gaussian distribution, we can state that\n\\[\\beta_0 \\sim N(2.574, 0.047^2)\\] \\[\\beta_1 \\sim N(1.101, 0.080^2)\\]"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-5",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-5",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIn R, we can do this as follow\n\n# Object that include regression coefficients\nregCoef <- summaryReg$coefficients\n\n# Sample regression parameters\nbeta_0 <- rnorm(100, mean = regCoef[1,1], sd = regCoef[1,2])\nbeta_1 <- rnorm(100, mean = regCoef[2,1], sd = regCoef[2,2])"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-6",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-6",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-7",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-7",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nBut is this the right way to do it ?"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-8",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-8",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nActually, even if the model’s confidence interval look about right, they are wrong !"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-9",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-9",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nThe approach presented in the previous slide works only if we assume that the parameters are completely independent from one another.\nA situation that happens only in very specific circumstances.\nSo… We need to find a way to account for the non-independencies between the parameters.\nHow can we do this ? Any ideas ?"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-10",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-10",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\n\nAssuming that the regression parameters are normally distributed is not a bad assumption.\nHowever to consider a dependencies between the parameters we need to sample them from a multivariate normal distribution where the variance of each parameter and their dependency is defined by a covariance matrix estimated specifically for the data we model.\nThe good news is that this covariance matrix is given by summary.lm function\n\n\n(covReg <- summaryReg$cov.unscaled)\n\n              (Intercept)             x\n(Intercept)  0.0100098513 -0.0005305969\nx           -0.0005305969  0.0285782940"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-11",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-11",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nFor our specific model, mathematically, we assume that\n\\[\\begin{bmatrix}\n  \\beta_0\\\\\n  \\beta_1\\\\\n\\end{bmatrix} \\sim MVN \\left( \\begin{bmatrix}\n  2.574\\\\\n  1.101\\\\\n\\end{bmatrix}, \\begin{bmatrix}\n  0.0100 & -0.0005 \\\\\n  -0.0005 & 0.0286 \\\\\n\\end{bmatrix} \\right)\\]\nNote To present the multivariate normal distribution, we rely on matrix notation. This is our first introduction into matrix algebra. We will talk about this more into this course."
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-12",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-12",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters\nIn R, we can sample the parameters using a multivariate normal distribution using the following code\n\n# Object that include regression coefficients\nregCoef <- summaryReg$coefficients\n\n# Sample regression parameters\nbeta <- MASS::mvrnorm(100, regCoef[,1], Sigma = covReg)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-13",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-13",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-14",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-14",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSampling model parameters - Comparison"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-15",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-15",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nSo far, we focused on the most commonly assessed regression parameters of the simple linear model, the slope and the intercept, but there is another one that is very important to consider, especially for this course.\nAny ideas which one it is ?"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-16",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-16",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\n\nIf we go back to the mathematical description of the model\n\\[\ny_i = \\beta_0 + \\beta_1 x_{i} + \\varepsilon\n\\]\nwe can see that in the simple linear regression the error term (\\(\\varepsilon\\)) has actually a very precise definition:\n\\[\\varepsilon \\sim N(0, \\sigma^2)\\] where \\(\\sigma^2\\) is an estimated variance.\nIn words, it means that the error in a simple linear regression follows a Gaussian distribution with a variance that is estimated.\nFor most the course, we will play with this parameter in a bunch of different ways.\nBut before we do this, we need to understand a bit more about how this parameter influence the model."
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-17",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-17",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nVariance of the model (\\(\\sigma^2\\))\n\nIn essence, \\(\\sigma^2\\) tells us about what the model could not account for.\nSo, if we measure biomass of two different species that react exactly the same way to humidity, we get"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-18",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-18",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nVariance of the model (\\(\\sigma^2\\))\nThe estimated parameters for each regression are all available using summary.lm\n\n# Regression model\nregSp1 <- lm(sp1 ~ x)\nregSp2 <- lm(sp2 ~ x)\n\n# Summary\nsummaryRegSp1 <- summary(regSp1)\nsummaryRegSp2 <- summary(regSp2)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#estimating-regression-parameters-19",
    "href": "slides/02_Linear_model/index.html#estimating-regression-parameters-19",
    "title": "Linear models",
    "section": "Estimating regression parameters",
    "text": "Estimating regression parameters\nVariance of the model (\\(\\sigma^2\\))\n\n\nFor species 1\n\n# Estimated coefficients\nsummaryRegSp1$coefficients[,1:2]\n\n            Estimate Std. Error\n(Intercept) 3.975367  0.0341467\nx           1.303821  0.0584426\n\n# Estimated variance\nsummaryRegSp1$sigma\n\n[1] 0.481509\n\n\n\nFor species 2\n\n# Estimated coefficients\nsummaryRegSp2$coefficients[,1:2]\n\n            Estimate  Std. Error\n(Intercept) 3.996627 0.006714987\nx           1.280388 0.011492802\n\n# Estimated variance\nsummaryRegSp2$sigma\n\n[1] 0.09468927"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#limits-of-the-simple-linear-regression",
    "href": "slides/02_Linear_model/index.html#limits-of-the-simple-linear-regression",
    "title": "Linear models",
    "section": "Limits of the simple linear regression",
    "text": "Limits of the simple linear regression\nThere are two major pitfalls of the simple linear model for problems in the life sciences\n\nOne explanatory is almost never enough to approach biological questions nowadays.\nThe simple linear model assumes that the error follows a Gaussian distribution."
  },
  {
    "objectID": "slides/02_Linear_model/index.html#limits-of-the-simple-linear-regression-1",
    "href": "slides/02_Linear_model/index.html#limits-of-the-simple-linear-regression-1",
    "title": "Linear models",
    "section": "Limits of the simple linear regression",
    "text": "Limits of the simple linear regression\nMultiple linear regression\n\nSimple linear regression can be extended to account for multiple explanatory variables to study more complexe problems. This type of regression model is known as a multiple linear regression.\nMathematically, a multiple linear regression can be defined as\n\\[\ny_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\dots + \\beta_p x_{ip} + \\varepsilon\n\\]\nTheoretically, estimating the parameters of a multiple regression model is done the same ways as for simple linear regression. However, in practice, matrix algebra is quite practical to use in this context and also for this course in genral.\nIn this respect, let’s take a bit of time to get acquinted with different basic (and maybe not so basic!) knowledge of matrix algebra."
  },
  {
    "objectID": "slides/02_Linear_model/index.html#multiple-linear-regression-1",
    "href": "slides/02_Linear_model/index.html#multiple-linear-regression-1",
    "title": "Linear models",
    "section": "Multiple linear regression",
    "text": "Multiple linear regression"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#gaussian-error",
    "href": "slides/02_Linear_model/index.html#gaussian-error",
    "title": "Linear models",
    "section": "Gaussian error",
    "text": "Gaussian error"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#basic-regression-model---gaussian-error",
    "href": "slides/02_Linear_model/index.html#basic-regression-model---gaussian-error",
    "title": "Linear models",
    "section": "Basic regression model - Gaussian error",
    "text": "Basic regression model - Gaussian error\nTo go around this problem, generalized linear models (GLMs) have been proposed. In essence, GLMs use link functions to adapt models for them to be used on non-Gaussian data.\nFor example\nlogit link function :\nlog link function :\nThe logit link function is often used for modelling binary data while the log link function is commonly used for modelling count data."
  },
  {
    "objectID": "slides/02_Linear_model/index.html#basic-regression-model-2",
    "href": "slides/02_Linear_model/index.html#basic-regression-model-2",
    "title": "Linear models",
    "section": "Basic regression model",
    "text": "Basic regression model\nThere are however a few major pitfall in using the simple linear model for problems in the life sciences\n\nOne explanatory is almost never enough to answer the questions we want to aproach"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#second",
    "href": "slides/02_Linear_model/index.html#second",
    "title": "Linear models",
    "section": "second",
    "text": "second\n\nTest your model"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#section",
    "href": "slides/02_Linear_model/index.html#section",
    "title": "Linear models",
    "section": "",
    "text": "img:\n\nit is a landscape"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#section-1",
    "href": "slides/02_Linear_model/index.html#section-1",
    "title": "Linear models",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#section-2",
    "href": "slides/02_Linear_model/index.html#section-2",
    "title": "Linear models",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#choose-parameters",
    "href": "slides/02_Linear_model/index.html#choose-parameters",
    "title": "Linear models",
    "section": "choose parameters",
    "text": "choose parameters\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#make-up-an-x-variable",
    "href": "slides/02_Linear_model/index.html#make-up-an-x-variable",
    "title": "Linear models",
    "section": "make up an X variable",
    "text": "make up an X variable\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#calculate-the-average",
    "href": "slides/02_Linear_model/index.html#calculate-the-average",
    "title": "Linear models",
    "section": "calculate the average",
    "text": "calculate the average\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#simulate-some-observations",
    "href": "slides/02_Linear_model/index.html#simulate-some-observations",
    "title": "Linear models",
    "section": "simulate some observations",
    "text": "simulate some observations\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#finally-visualize",
    "href": "slides/02_Linear_model/index.html#finally-visualize",
    "title": "Linear models",
    "section": "finally, visualize",
    "text": "finally, visualize\n\nplot(y_obs ~ x)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#here-it-is-all-on-one-slide",
    "href": "slides/02_Linear_model/index.html#here-it-is-all-on-one-slide",
    "title": "Linear models",
    "section": "here it is all on one slide",
    "text": "here it is all on one slide\n\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\nplot(y_obs, x)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#or-we-can-present-the-code-and-results-separately",
    "href": "slides/02_Linear_model/index.html#or-we-can-present-the-code-and-results-separately",
    "title": "Linear models",
    "section": "Or we can present the code and results separately",
    "text": "Or we can present the code and results separately\n\nThe codeThe figure\n\n\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\n\n\n\n\nplot(y_obs ~ x)"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#another-equation",
    "href": "slides/02_Linear_model/index.html#another-equation",
    "title": "Linear models",
    "section": "another equation",
    "text": "another equation\n\\[\n2 + 4 = 6\n\\]"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#the-equation",
    "href": "slides/02_Linear_model/index.html#the-equation",
    "title": "Linear models",
    "section": "The equation",
    "text": "The equation\n\\[\n\\begin{align}\ny  &\\sim \\text{N}(\\mu, \\sigma_{obs}) \\\\\n\\mu &= a + bx \\\\\n\\end{align}\n\\]"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#the-model",
    "href": "slides/02_Linear_model/index.html#the-model",
    "title": "Linear models",
    "section": "The model",
    "text": "The model\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#declare-the-data",
    "href": "slides/02_Linear_model/index.html#declare-the-data",
    "title": "Linear models",
    "section": "Declare the data",
    "text": "Declare the data\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#state-parameters",
    "href": "slides/02_Linear_model/index.html#state-parameters",
    "title": "Linear models",
    "section": "State parameters",
    "text": "State parameters\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/02_Linear_model/index.html#write-the-likelihood-and-priors",
    "href": "slides/02_Linear_model/index.html#write-the-likelihood-and-priors",
    "title": "Linear models",
    "section": "Write the likelihood and priors",
    "text": "Write the likelihood and priors\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#un-beau-titre",
    "href": "slides/template/index.html#un-beau-titre",
    "title": "Template for presentations",
    "section": "Un beau titre",
    "text": "Un beau titre\nthis is the first slide"
  },
  {
    "objectID": "slides/template/index.html#second",
    "href": "slides/template/index.html#second",
    "title": "Template for presentations",
    "section": "second",
    "text": "second\n\nTest your model"
  },
  {
    "objectID": "slides/template/index.html#section",
    "href": "slides/template/index.html#section",
    "title": "Template for presentations",
    "section": "",
    "text": "img:\n\nit is a landscape"
  },
  {
    "objectID": "slides/template/index.html#section-1",
    "href": "slides/template/index.html#section-1",
    "title": "Template for presentations",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/template/index.html#section-2",
    "href": "slides/template/index.html#section-2",
    "title": "Template for presentations",
    "section": "",
    "text": "check with simulations"
  },
  {
    "objectID": "slides/template/index.html#choose-parameters",
    "href": "slides/template/index.html#choose-parameters",
    "title": "Template for presentations",
    "section": "choose parameters",
    "text": "choose parameters\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5"
  },
  {
    "objectID": "slides/template/index.html#make-up-an-x-variable",
    "href": "slides/template/index.html#make-up-an-x-variable",
    "title": "Template for presentations",
    "section": "make up an X variable",
    "text": "make up an X variable\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)"
  },
  {
    "objectID": "slides/template/index.html#calculate-the-average",
    "href": "slides/template/index.html#calculate-the-average",
    "title": "Template for presentations",
    "section": "calculate the average",
    "text": "calculate the average\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x"
  },
  {
    "objectID": "slides/template/index.html#simulate-some-observations",
    "href": "slides/template/index.html#simulate-some-observations",
    "title": "Template for presentations",
    "section": "simulate some observations",
    "text": "simulate some observations\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)"
  },
  {
    "objectID": "slides/template/index.html#finally-visualize",
    "href": "slides/template/index.html#finally-visualize",
    "title": "Template for presentations",
    "section": "finally, visualize",
    "text": "finally, visualize\n\nplot(y_obs ~ x)"
  },
  {
    "objectID": "slides/template/index.html#here-it-is-all-on-one-slide",
    "href": "slides/template/index.html#here-it-is-all-on-one-slide",
    "title": "Template for presentations",
    "section": "here it is all on one slide",
    "text": "here it is all on one slide\n\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\nplot(y_obs, x)"
  },
  {
    "objectID": "slides/template/index.html#or-we-can-present-the-code-and-results-separately",
    "href": "slides/template/index.html#or-we-can-present-the-code-and-results-separately",
    "title": "Template for presentations",
    "section": "Or we can present the code and results separately",
    "text": "Or we can present the code and results separately\n\nThe codeThe figure\n\n\n\nyintercept <- 4\nslope <- 1.3\nobs_error <- .5\nx <- runif(200, min = -1, max = 1)\ny_mean <- yintercept + slope * x\ny_obs <- rnorm(200, mean = y_mean, sd = obs_error)\n\n\n\n\nplot(y_obs ~ x)"
  },
  {
    "objectID": "slides/template/index.html#another-equation",
    "href": "slides/template/index.html#another-equation",
    "title": "Template for presentations",
    "section": "another equation",
    "text": "another equation\n\\[\n2 + 4 = 6\n\\]"
  },
  {
    "objectID": "slides/template/index.html#the-equation",
    "href": "slides/template/index.html#the-equation",
    "title": "Template for presentations",
    "section": "The equation",
    "text": "The equation\n\\[\n\\begin{align}\ny  &\\sim \\text{N}(\\mu, \\sigma_{obs}) \\\\\n\\mu &= a + bx \\\\\n\\end{align}\n\\]"
  },
  {
    "objectID": "slides/template/index.html#the-model",
    "href": "slides/template/index.html#the-model",
    "title": "Template for presentations",
    "section": "The model",
    "text": "The model\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#declare-the-data",
    "href": "slides/template/index.html#declare-the-data",
    "title": "Template for presentations",
    "section": "Declare the data",
    "text": "Declare the data\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#state-parameters",
    "href": "slides/template/index.html#state-parameters",
    "title": "Template for presentations",
    "section": "State parameters",
    "text": "State parameters\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/template/index.html#write-the-likelihood-and-priors",
    "href": "slides/template/index.html#write-the-likelihood-and-priors",
    "title": "Template for presentations",
    "section": "Write the likelihood and priors",
    "text": "Write the likelihood and priors\ndata {\n  int<lower=0> N;\n  vector[N] y;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(mu, sigma);\n  mu ~ normal(0, 1);\n  sigma ~ exponential(1);\n}"
  },
  {
    "objectID": "slides/00_Introduction/index.html#internet",
    "href": "slides/00_Introduction/index.html#internet",
    "title": "Introduction",
    "section": "Internet",
    "text": "Internet\nNetwork : \nPassword :"
  },
  {
    "objectID": "slides/00_Introduction/index.html#dos-and-donts-at-the-station-biologique-des-laurentides",
    "href": "slides/00_Introduction/index.html#dos-and-donts-at-the-station-biologique-des-laurentides",
    "title": "Introduction",
    "section": "Dos and don’ts at the Station biologique des Laurentides",
    "text": "Dos and don’ts at the Station biologique des Laurentides"
  },
  {
    "objectID": "slides/00_Introduction/index.html#course-material",
    "href": "slides/00_Introduction/index.html#course-material",
    "title": "Introduction",
    "section": "Course material",
    "text": "Course material\nWebsite :\nOn it, you will find the slides but also Rmarkdown files with practical examples.\nYou will also find course syllabus\nLet’s take a look…"
  },
  {
    "objectID": "slides/00_Introduction/index.html#general-daily-schedule",
    "href": "slides/00_Introduction/index.html#general-daily-schedule",
    "title": "Introduction",
    "section": "General daily schedule",
    "text": "General daily schedule\n9h00 - Start of the day\n9h00 to 12h00 - Lecture/Practice\n12h00 to 13h00 - Lunch\n13h00 to 17h00 - Lecture/Practice\n17h00 to 18h00 - Project presentations"
  },
  {
    "objectID": "slides/00_Introduction/index.html#what-are-hierarchical-models",
    "href": "slides/00_Introduction/index.html#what-are-hierarchical-models",
    "title": "Introduction",
    "section": "What are hierarchical models ?",
    "text": "What are hierarchical models ?\nFor this course, hierarchical models are regression models in which the parameters (the regression coefficients) are themselves given a probability model (Gelman and Hill 2007)."
  },
  {
    "objectID": "slides/00_Introduction/index.html#particularities-of-hierarchical-models",
    "href": "slides/00_Introduction/index.html#particularities-of-hierarchical-models",
    "title": "Introduction",
    "section": "Particularities of hierarchical models",
    "text": "Particularities of hierarchical models\nHierarchical models are\n\nA challenging bit of technology (probably more than you might think!).\nVery flexible models (in many more ways that are usually expected!)\nConstrained to the same particularities as (generalized) (non) linear models (sometimes to a more severe extent)"
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-vocabulary",
    "href": "slides/00_Introduction/index.html#a-bit-of-vocabulary",
    "title": "Introduction",
    "section": "A bit of vocabulary",
    "text": "A bit of vocabulary\nHierarchical models, as we will see them in this course, are also known under different names\n\nRandom effect models\nMixed models\nMultilevel models\nVariance component models\nError component models"
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-vocabulary-1",
    "href": "slides/00_Introduction/index.html#a-bit-of-vocabulary-1",
    "title": "Introduction",
    "section": "A bit of vocabulary",
    "text": "A bit of vocabulary\nWe decided to use the term hierachical model to prevent confusions that sometimes arises in the litterature about random and fixed effects, which are terms commonly used when referring to mixed effect models.\nActually, random and fixed effects have multiple definitions, which leads to confusion"
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-vocabulary-2",
    "href": "slides/00_Introduction/index.html#a-bit-of-vocabulary-2",
    "title": "Introduction",
    "section": "A bit of vocabulary",
    "text": "A bit of vocabulary\nMultiple Definition of fixed and random effects\n\n(Kreft and De Leeuw 1998) Fixed effects are constant and random effect vary\n(Searl et al. 1992) Effects are fixed if they are interesting in themselves or random if there is interest in the underlying population\n(Green and Tukey 1960) When a sample exhausts the population, the corresponding variable is fixed; when the sample is a small (i.e., negligible) part of the population the corresponding variable is random\n(Roy LaMotte 2014) If an effect is assumed to be a realized value of a random variable, it is called a random effect\n(Robinson 1991) Fixed effects are estimated using least squares (or, more generally, maximum likelihood) and random effects are estimated with shrinkage."
  },
  {
    "objectID": "slides/00_Introduction/index.html#a-bit-of-history",
    "href": "slides/00_Introduction/index.html#a-bit-of-history",
    "title": "Introduction",
    "section": "A bit of history",
    "text": "A bit of history\nBecause of the different name used for hierarchial models, the history of this subfield of statistics is a little murky, but we know that a few important figures in statistics dabbed into this field, most notably\n\n\nFisher R.A. (1919). The Correlation between Relatives on the Supposition of Mendelian Inheritance. Transactions of the Royal Society of Edinburgh, 52 399–433."
  },
  {
    "objectID": "slides/00_Introduction/index.html#implementation",
    "href": "slides/00_Introduction/index.html#implementation",
    "title": "Introduction",
    "section": "Implementation",
    "text": "Implementation\n\nHierarchical models have been implemented in many software packages,\n\nin R\n\nlme4, brms, nlme, glmmTMB, MCMCglmm, …\n\nin SAS\n\nMIXED, HPMIXED, GLMMIX, …\n\nin julia\n\nMixedModels.jl\n\n…"
  },
  {
    "objectID": "slides/00_Introduction/index.html#implementation-1",
    "href": "slides/00_Introduction/index.html#implementation-1",
    "title": "Introduction",
    "section": "Implementation",
    "text": "Implementation\nWhat we will use\nWe will not use any of these software packages… because under specific circumstances, what may seem like the same implementation of a model may lead to different answers… and both can actually be right !\nThis is because the underlying model implemented in the software package may actually be slightly different.\nInstead we will implement our own models from scratch using Stan."
  },
  {
    "objectID": "slides/00_Introduction/index.html#good-reference",
    "href": "slides/00_Introduction/index.html#good-reference",
    "title": "Introduction",
    "section": "Good reference",
    "text": "Good reference\n\nA good portion of this course material is based on this book."
  },
  {
    "objectID": "slides/00_Introduction/index.html#great-technical-references",
    "href": "slides/00_Introduction/index.html#great-technical-references",
    "title": "Introduction",
    "section": "Great technical references",
    "text": "Great technical references\n\nEverything is there but it can gets technical !"
  },
  {
    "objectID": "slides/00_Introduction/index.html#r-and-stan",
    "href": "slides/00_Introduction/index.html#r-and-stan",
    "title": "Introduction",
    "section": "R and Stan",
    "text": "R and Stan\nAll of the practical aspect of the course will be done with R and Stan.\nRStudio\nWe strongly (!) encourage you to use RStudio and to start a project for the course."
  },
  {
    "objectID": "slides/00_Introduction/index.html#r-package-to-install",
    "href": "slides/00_Introduction/index.html#r-package-to-install",
    "title": "Introduction",
    "section": "R package to install",
    "text": "R package to install\n\ninstall.packages(c(\"vegan\"))"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#the-very-basics",
    "href": "slides/03_Matrix_algebra/index.html#the-very-basics",
    "title": "Matrix algebra",
    "section": "The very basics",
    "text": "The very basics\n\\[\n\\mathbf{A} = \\begin{bmatrix}\n                A_{11} & A_{12} & \\dots & A_{1j} & \\dots & A_{1n}\\\\\n                A_{21} & A_{22} & \\dots & A_{2j} & \\dots & A_{2n}\\\\\n                \\vdots & \\vdots & \\ddots & \\vdots & & \\vdots\\\\\n              A_{i1} & A_{i2} & \\dots & A_{ij} & \\dots & A_{in}\\\\\n            \\vdots & \\vdots & & \\vdots & \\ddots & \\vdots\\\\\n            A_{m1} & A_{m2} & \\dots & A_{mj} & \\dots & A_{mn}\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#addition-and-substraction",
    "href": "slides/03_Matrix_algebra/index.html#addition-and-substraction",
    "title": "Matrix algebra",
    "section": "Addition and Substraction",
    "text": "Addition and Substraction\n\\[\\mathbf{C} = \\mathbf{A}\\pm \\mathbf{B}\\] \\[C_{ij} = A_{ij} \\pm B_{ij}\\]\n\n\\[\\begin{bmatrix}\n                3 & 5\\\\\n                1 & -2\\\\\n            \\end{bmatrix} +\n            \\begin{bmatrix}\n                2 & 1\\\\\n                4 & -2\\\\\n            \\end{bmatrix} =\n            \\begin{bmatrix}\n                3+2 & 5+1\\\\\n                1+4 & -2-2\\\\\n            \\end{bmatrix} =\n            \\begin{bmatrix}\n                5 & 6\\\\\n                5 & -4\\\\\n            \\end{bmatrix}\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nB <- matrix(c(2, 4, 1, -2), nrow = 2, ncol = 2)\nA + B\n\n     [,1] [,2]\n[1,]    5    6\n[2,]    5   -4"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#multiplying-a-matrix-by-a-scalar",
    "href": "slides/03_Matrix_algebra/index.html#multiplying-a-matrix-by-a-scalar",
    "title": "Matrix algebra",
    "section": "Multiplying a matrix by a scalar",
    "text": "Multiplying a matrix by a scalar\n\\[\\mathbf{B} = c\\mathbf{A}\\] \\[B_{ij} = cA_{ij}\\]\n\n\\[\n            0.3 \\begin{bmatrix}\n                3 & 5\\\\\n                1 & -2\\\\\n            \\end{bmatrix} =  \n            \\begin{bmatrix}\n                0.9 & 1.5\\\\\n                0.3 & -0.6\\\\\n            \\end{bmatrix}\n\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nc <- 0.3\nc*A \n\n     [,1] [,2]\n[1,]  0.9  1.5\n[2,]  0.3 -0.6"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#matrix-multiplications-not-divisions",
    "href": "slides/03_Matrix_algebra/index.html#matrix-multiplications-not-divisions",
    "title": "Matrix algebra",
    "section": "Matrix multiplications (not divisions!)",
    "text": "Matrix multiplications (not divisions!)\n\\[\\mathbf{C} = \\mathbf{A} \\cdot \\mathbf{B}\\] \\[\\mathbf{C}_{mr} = \\mathbf{A}_{mn}\\mathbf{B}_{nr}\\] \\[C_{ik} = \\sum^{n}_{j=1}A_{ij}B_{jk}\\]\nRules\nAssociative: \\(\\mathbf{A}(\\mathbf{B}\\mathbf{C}) = (\\mathbf{A}\\mathbf{B})\\mathbf{C}\\)\nDistributive: \\(\\mathbf{A}(\\mathbf{B} + \\mathbf{C}) = \\mathbf{A}\\mathbf{B}+\\mathbf{A}\\mathbf{C}\\)\nNot commutative: \\(\\mathbf{A}\\mathbf{B} \\neq \\mathbf{B}\\mathbf{A}\\)"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#inner-product",
    "href": "slides/03_Matrix_algebra/index.html#inner-product",
    "title": "Matrix algebra",
    "section": "Inner product",
    "text": "Inner product\n\\[(\\mathbf{Ax})_i=\\sum_{j=1}^{n}A_{ij}x_j\\]\n\n\\[\n  \\begin{bmatrix}\n    3 & 5\\\\\n    1 & -2\\\\\n  \\end{bmatrix}\n  \\begin{bmatrix}\n    2\\\\ 5\\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    (3, 5) \\cdot (2, 5)\\\\\n    (1, -2) \\cdot (2, 5) \\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    3 \\times 2 + 5 \\times 5\\\\\n    1 \\times 2 -2 \\times 5\\\\\n  \\end{bmatrix} =\n  \\begin{bmatrix}\n    31\\\\\n    -8\\\\\n  \\end{bmatrix}\n\\]\n\nIn R\n\nA <- matrix(c(3, 1, 5, -2), nrow = 2, ncol = 2)\nx <- matrix(c(2,5), nrow = 2, ncol = 1)\nA %*% x\n\n     [,1]\n[1,]   31\n[2,]   -8"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#dot-product",
    "href": "slides/03_Matrix_algebra/index.html#dot-product",
    "title": "Matrix algebra",
    "section": "Dot product",
    "text": "Dot product\n\\[\\mathbf{v} \\cdot \\mathbf{x}= v_1x_1+v_2x_2+\\dots + v_nx_n\\]\n\n\\[\n            \\begin{bmatrix}\n                3 & 1\\\\\n            \\end{bmatrix}\n            \\cdot\n            \\begin{bmatrix}\n                2\\\\ 5\\\\\n            \\end{bmatrix} =\n                3 \\times  2 + 1 \\times 5 = 11\n\\]\n\nIn R\n\nv <- c(3, 1)\nx <- c(2,5)\nsum(v * x)\n\n[1] 11"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#solving-systems-of-linear-equation",
    "href": "slides/03_Matrix_algebra/index.html#solving-systems-of-linear-equation",
    "title": "Matrix algebra",
    "section": "Solving systems of linear equation",
    "text": "Solving systems of linear equation\n\\[\n\\begin{align*}\n        1 &= 3\\beta_1 + 5\\beta_2 - 4\\beta_3 \\\\\n        0 &= \\beta_1 - 2\\beta_2 + 3\\beta_3\\\\\n        1 &= 4\\beta_1 + 6\\beta_2 + 5\\beta_3\\\\\n    \\end{align*}\n\\] \\[\n\\mathbf{y} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\mathbf{X} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\boldsymbol{\\beta}\n\\] \\[\n        \\begin{bmatrix}\n            1\\\\ 0\\\\ 1\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            3 & 5 & -4\\\\\n            1 & -2 & 3\\\\\n            4 & 6 & 5 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            \\beta_1\\\\ \\beta_2\\\\ \\beta_3\\\\\n        \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#solving-systems-of-linear-equation-1",
    "href": "slides/03_Matrix_algebra/index.html#solving-systems-of-linear-equation-1",
    "title": "Matrix algebra",
    "section": "Solving systems of linear equation",
    "text": "Solving systems of linear equation\n\n\\[\n\\mathbf{y} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\mathbf{X} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\boldsymbol{\\beta}\n\\] \\[\n        \\begin{bmatrix}\n            1\\\\ 0\\\\ 1\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            3 & 5 & -4\\\\\n            1 & -2 & 3\\\\\n            4 & 6 & 5 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            \\beta_1\\\\ \\beta_2\\\\ \\beta_3\\\\\n        \\end{bmatrix}\n\\]\nHow do we mathematically solve for \\(\\boldsymbol{\\beta}\\)?\n\\[\n    \\begin{align*}\n        \\mathbf{y} &= \\mathbf{X}\\boldsymbol{\\beta}\\\\\n        \\mathbf{X}^{-1}\\mathbf{y} &= \\mathbf{X}^{-1}\\mathbf{X}\\boldsymbol{\\beta}\\\\\n        \\mathbf{X}^{-1}\\mathbf{y} &= \\mathbf{I}\\boldsymbol{\\beta}\\\\\n        \\mathbf{X}^{-1}\\mathbf{y} &= \\boldsymbol{\\beta}\\\\\n    \\end{align*}\n\\]"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#solving-systems-of-linear-equation-2",
    "href": "slides/03_Matrix_algebra/index.html#solving-systems-of-linear-equation-2",
    "title": "Matrix algebra",
    "section": "Solving systems of linear equation",
    "text": "Solving systems of linear equation\n\n\\[\n\\mathbf{y} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\mathbf{X} \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\qquad \\boldsymbol{\\beta}\n\\] \\[\n        \\begin{bmatrix}\n            1\\\\ 0\\\\ 1\\\\\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n            3 & 5 & -4\\\\\n            1 & -2 & 3\\\\\n            4 & 6 & 5 \\\\\n        \\end{bmatrix}\n        \\begin{bmatrix}\n            \\beta_1\\\\ \\beta_2\\\\ \\beta_3\\\\\n        \\end{bmatrix}\n\\]\nHow do we solve for \\(\\boldsymbol{\\beta}\\) in R?\n\nX <- matrix(c(3, 1, 4, 5, -2, 6, -4, 3, 5), nrow = 3, ncol = 3)\ny <- c(1, 0, 1)\n\n(beta <- solve(X, y))\n\n[1]  0.20000000  0.05714286 -0.02857143"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#determinant-of-a-matrix",
    "href": "slides/03_Matrix_algebra/index.html#determinant-of-a-matrix",
    "title": "Matrix algebra",
    "section": "Determinant of a matrix",
    "text": "Determinant of a matrix\nto add stuff here\nto add stuff here\nto add stuff here"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#eigenvectors-and-eigenvalues",
    "href": "slides/03_Matrix_algebra/index.html#eigenvectors-and-eigenvalues",
    "title": "Matrix algebra",
    "section": "Eigenvectors and eigenvalues",
    "text": "Eigenvectors and eigenvalues\n\nRight eigenvector is :\n\\[\\mathbf{A}\\mathbf{w} = \\lambda\\mathbf{w}\\] Left eigenvector is :\n\\[\\mathbf{v}\\mathbf{A} = \\lambda\\mathbf{v}\\]\nRules\n\n\\(\\mathbf{A}\\) has to be a square matrix\nIf \\(\\mathbf{w}\\) is an eigenvector of \\(\\mathbf{A}\\), so is \\(c\\mathbf{w}\\) for any value of \\(c \\neq0\\)\nThe right eigenvector of \\(\\mathbf{A}^T\\) is the left eigenvector of \\(\\mathbf{A}\\)\nEigenvectors are linearly independent"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#positive-definite-matrix",
    "href": "slides/03_Matrix_algebra/index.html#positive-definite-matrix",
    "title": "Matrix algebra",
    "section": "Positive definite matrix",
    "text": "Positive definite matrix\nIt is reasonably common when you build a hierarchical model to get an error message that state :\n\nError: Matrix X is not positive definite\n\nor similarly\n\nError: Matrix X is not positive semi-definite\n\nWhat does this mean ? Any idea ?"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#positive-semi-definite-matrix",
    "href": "slides/03_Matrix_algebra/index.html#positive-semi-definite-matrix",
    "title": "Matrix algebra",
    "section": "Positive (semi-)definite matrix",
    "text": "Positive (semi-)definite matrix\nNerdy mathematical definition\nPositive definite matrix\n\\(\\mathbf{M}\\) is a positive definite matrix if, for any real vector \\(\\mathbf{z}\\), \\(\\mathbf{z}^t\\mathbf{M}\\mathbf{z} > 0\\)\nPositive semi-definite matrix\n\\(\\mathbf{M}\\) is a positive semi-definite matrix if, for any real vector \\(\\mathbf{z}\\), \\(\\mathbf{z}^t\\mathbf{M}\\mathbf{z} \\ge 0\\)"
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#positive-semi-definite-matrix-1",
    "href": "slides/03_Matrix_algebra/index.html#positive-semi-definite-matrix-1",
    "title": "Matrix algebra",
    "section": "Positive (semi-)definite matrix",
    "text": "Positive (semi-)definite matrix\nChecking if a matrix is positive (semi-)definite\nThe properties of eigenvalues can be used to detect if a matrix is positive (semi-) definite.\nAll we have to do is look at the eigenvalue of a square matrix.\nIf all eigenvalues of a matrix \\(\\mathbf{M}\\) larger than 0, matrix \\(\\mathbf{M}\\) is positive definite.\nIf all eigenvalues of a matrix \\(\\mathbf{M}\\) larger than or equal ro 0, matrix \\(\\mathbf{M}\\) is positive semi-definite."
  },
  {
    "objectID": "slides/03_Matrix_algebra/index.html#cholesky-decomposition",
    "href": "slides/03_Matrix_algebra/index.html#cholesky-decomposition",
    "title": "Matrix algebra",
    "section": "Cholesky decomposition",
    "text": "Cholesky decomposition\nto add stuff here\nto add stuff here\nto add stuff here"
  },
  {
    "objectID": "about.html#cibles-de-formation",
    "href": "about.html#cibles-de-formation",
    "title": "Advanced Statistics and hierarchical models",
    "section": "Cibles de formation",
    "text": "Cibles de formation\nApprendre la théorie statistique pour mieux construire, appliquer et interpréter différents modèles statistiques appliqués à des systèmes biologiques. Devenir familier avec la recherche primaire en en modélisation statistique de systèmes biologiques. Développer des connaissances et gagner de l’expérience à travailler de façon collaborative sur des problématiques lié au développement et à l’application de méthodes statisiques.\nThis course will feature hierarchical models and spatial statistics."
  },
  {
    "objectID": "about.html#course-instructors",
    "href": "about.html#course-instructors",
    "title": "Advanced Statistics and hierarchical models",
    "section": "Course Instructors",
    "text": "Course Instructors\n\n\n\n\n\n\nDr Guillaume Blanchet\n\n\n\n\n\n\n\nDr Andrew MacDonald\n\n\n\n\n\n\n\nDr Vincent Tolon"
  },
  {
    "objectID": "day_1.html#content",
    "href": "day_1.html#content",
    "title": "Day 1",
    "section": "Content",
    "text": "Content\nThe Secret Weapon\nregression with discrete predictors\n\nAfternoon practical exercises"
  },
  {
    "objectID": "day_1.html#course-setup-information",
    "href": "day_1.html#course-setup-information",
    "title": "Day 1",
    "section": "Course setup information",
    "text": "Course setup information\n\nsite information\nplagiarism"
  },
  {
    "objectID": "day_1.html#simulation",
    "href": "day_1.html#simulation",
    "title": "Day 1",
    "section": "Simulation",
    "text": "Simulation"
  },
  {
    "objectID": "day_1.html#quantifying-uncertainty",
    "href": "day_1.html#quantifying-uncertainty",
    "title": "Day 1",
    "section": "Quantifying uncertainty",
    "text": "Quantifying uncertainty"
  },
  {
    "objectID": "day_1.html#resampling",
    "href": "day_1.html#resampling",
    "title": "Day 1",
    "section": "Resampling",
    "text": "Resampling\nIn frequentist models, we can use the variance covariance matrix of parameters to resample new parameters values. This lets us propagate uncertainty from the estimated parameters to the predicted relationship.\nLet’s demonstrate this with one specific mite:\n\nlrug_water <- mite_water |> \n  filter(sp == \"LRUG\")\n\nlrug_glm <- glm(pa ~ water, data = lrug_water, family = \"binomial\")\n\nNow, with our model object, we can create the resampling distribution of the model predicitons:\n\n# Set seed\nset.seed(42) # The answer !\n\n# a sequence along the range of water values in the data\npredVal <- seq(from = min(lrug_water$water),\n               to = max(lrug_water$water),\n               length.out = 30)\n\nn_resamp <- 500\n\n# Result object\nresampModel <- array(NA_real_,\n                   dim = c(length(predVal), n_resamp))\n\n# Resample model parameters and calculate model predictions\nparamMean <- summary(lrug_glm)$coefficients[,1]\nparamCov <- summary(lrug_glm)$cov.unscaled\n\n# Resample model parameters\nparamSmpl <- MASS::mvrnorm(n_resamp, paramMean, paramCov)\n\n# Calculate model predictions using the resampled model parameters\nfor(j in 1:n_resamp){\n  resampModel[,j] <- binomial(link = \"logit\")$linkinv(\n    paramSmpl[j,1] + paramSmpl[j,2] * predVal)\n}\n\n# make a plot of these predictions\nmatplot(predVal, resampModel, type = \"l\", col = \"grey\", lty = 1)\n\n\n\n\nIf we want to find some kind of confidence interval for this line, we can take the quantiles of this resampling:\n\nlow <- apply(resampModel, 1, quantile, probs = .015)\nhigh <- apply(resampModel, 1, quantile, probs = .985)\n\n# plot\nwith(lrug_water, plot(pa ~ water, pch = 21, bg = \"lightblue\"))\npolygon(c(predVal,rev(predVal)),\n        c(low,rev(high)), col=\"thistle\", border=NA)\nlines(predVal, \n      predict(lrug_glm, newdata = list(water = predVal), type = \"response\")\n      )\n\n\n\n\nWe can also do this in a tidyverse style, if you are more comfortable with that:\n\ntibble(predVal) |> \n  rowwise() |> \n  mutate(intercept = list(paramSmpl[,1]),\n         slope = list(paramSmpl[,2]),\n         prediction = list(intercept + slope*predVal),\n         prediction_probability = list(plogis(prediction)),\n         low  = quantile(prediction_probability, .015),\n         high = quantile(prediction_probability, .985)) |> \n  ggplot(aes(x = predVal, ymin = low, ymax = high)) + \n  geom_ribbon(fill = \"thistle\") + \n  theme_bw() + \n  ylim(c(0,1))"
  },
  {
    "objectID": "day_1.html#bayesian-approach",
    "href": "day_1.html#bayesian-approach",
    "title": "Day 1",
    "section": "Bayesian approach",
    "text": "Bayesian approach\nhere is a simple bayesian model to generate the same inference:\n\\[\n\\begin{align}\ny &\\sim \\text{Bernoulli}(p)\\\\\n\\text{logit}(p) &= \\alpha + X\\beta\\\\\n\\alpha &\\sim \\text{Normal}(-2.5, .5)\\\\\n\\beta &\\sim \\text{Normal}(0, .5)\\\\\n\\end{align}\n\\]\nnormally we would go through a careful process of checking our priors here. At this time we won’t because the point here is to show how the bayesian posterior includes uncertainty, not to demonstrate a full Bayes workflow.\nFirst we compile the model, then we’ll look at the Stan code:\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\nlogistic_glm_stan <- cmdstan_model(stan_file = \"stan/logistic_bern_logit.stan\", \n                               pedantic = TRUE)\n\nlogistic_glm_stan\n\ndata {\n  int<lower=0> n;\n  vector[n] x;\n  array[n] int<lower=0,upper=1> y;\n}\nparameters {\n  real intercept;\n  real slope;\n}\nmodel {\n  y ~ bernoulli_logit(intercept + slope * x);\n  intercept ~ normal(-2.5, .5);\n  slope ~ normal(0, .5);\n}\n\n\nHere we see the same three parts of a Stan model that we have reviewed already:\n\ndata\nparameters\nprobability statements\n\nAs you can see, we are using a handy Stan function called bernoulli_logit. This function expects our prediction for the average to be on the logit scale, then applies the logit link function for us.\n\n\nAs a quick review, the logit equation, or inverse-log-odds, is written as \\[\n\\frac{e^\\mu}{1 + e^\\mu}\n\\] Which is also written as\n\\[\n\\frac{1}{1 + e^{-\\mu}}\n\\]\nStan expects our data as a list.\n\nlogistic_glm_stan_samples <- logistic_glm_stan$sample(\n  data = list(n = nrow(lrug_water),\n              y = lrug_water$pa,\n              x = lrug_water$water),\n  refresh = 0)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.2 seconds.\nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.3 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 1.8 seconds.\n\ncoef(lrug_glm)\n\n(Intercept)       water \n-2.48153943  0.00874349 \n\nlibrary(tidybayes)\n\nspread_rvars(logistic_glm_stan_samples, intercept, slope[]) |> \n  bind_cols(predVal = predVal) |> \n  mutate(pred = posterior::rfun(plogis)(predVal * slope + intercept)) |> \n  ggplot(aes(x = predVal, ydist = pred)) + \n  stat_dist_lineribbon() + \n  guides(fill = \"none\") + \n  ylim(c(0,1))\n\nWarning: Using the `size` aesthetic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\n\n\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\n\nAlternative parameterization\nStan contains many functions intended to facilitate writing statistical models. Above, we used the function bernoulli_logit so that we could provide the expression for the average on the logit scale.  Stan also provides an even more efficient function that we can use; it is especially good when we have more than one predictor variable and a vector of slopes:This idea is the core concept of a GLM, or generalized linear model. Statistical distributions have parameters, but for most distributions these have constraints – only some values are “allowed”. For example, the only parameter of a Bernoulli distribution is \\(p\\), the probability of success. We respect this constraint by using a link function: we write an expression for the average of a distribution that can be any real number, and put it through a link function to get the value for \\(p\\).\n\n\n\n\n\n\nWarning\n\n\n\nPLEASE NOTE below you will see the relative path to the stan file (stan/logistic.stan). Immediately below you will see the Stan file content. You can copy and paste this to your own computer!\n\n\n\nsuppressPackageStartupMessages(library(cmdstanr))\n\nlogistic_bern_glm <- cmdstan_model(stan_file = \"stan/logistic.stan\", \n                               pedantic = TRUE)\n\nlogistic_bern_glm\n\ndata {\n  int<lower=0> N;\n  matrix[N, 1] x;\n  array[N] int<lower=0,upper=1> y;\n}\nparameters {\n  real intercept;\n  vector[1] slope;\n}\nmodel {\n  intercept ~ normal(-2.5, .5);\n  slope ~ normal(0, .5);\n  y ~ bernoulli_logit_glm(x, intercept, slope);\n}"
  },
  {
    "objectID": "topics/intercept_only/index.html",
    "href": "topics/intercept_only/index.html",
    "title": "Modèles hiérarchiques pour les sciences de la vie",
    "section": "",
    "text": "Understanding a hierarchical model as a model for parameters\nIntroduce\nOne Weird Trick (you Supervisor will be Amazed)— mean centering and group mean centering\n\na model for parameters\nstart withglobal aerages of seach tgroup., our question,is, what create this variation in averages?\nshow distribution of sample averages Do this for the average of the distributions, showing their interactions with each other, their distribution oacross all values.\nStarting with just the distribution of abundances across the species and plots.\nThen move to an intercept-only poisson model : distribution across plots\nreally take time: build up a model of multiple averages per species and multiple per plot\nor would the penguins be better for this? Consider the different islands and the different species\nhonestly could do it with both.\nThen try the following\nmodelling an average modelling group means modelling more than one group mean\na process: * Look at your data * think about “0” – where should it be? what does it mean? * think about units – how much of a difference in your “X” matters to your “y”?\n\nmodel the average and standard deviation of bill size (or of species abudance)\n\n\\[\n\\begin{align}\nY_s &\\sim \\text{Poisson}(\\lambda_s) \\\\\n\\log{\\lambda_s} &\\sim \\text{Normal}(300, 100)  \\\\\n\\end{align}\n\\]\n\na quick note – centering the response, i.e. taking the average out of the prior on the averages\nlook at the averages\nhow could we describe these averages? a simple model: mean and standard deviation\n\n\ndata(\"mite\", package = \"vegan\")\n\nspp_names <- colnames(mite)\nspp_names <- setNames(1:ncol(mite), colnames(mite))\n\n\nmite_long <- mite |> \n  tidyr::pivot_longer(dplyr::everything(), names_to = \"spp\", values_to = \"abd\") |> \n  dplyr::mutate(group_id = spp_names[spp])\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\ngroup_avg_nopool <- cmdstan_model(\"topics/intercept_only/group_avg_nopool.stan\", \n                                  pedantic = TRUE)\n\nWarning in readLines(stan_file): incomplete final line found on\n'topics/intercept_only/group_avg_nopool.stan'\n\nsamp_group_avg_nopool <- group_avg_nopool$sample(data = list(\n  N = nrow(mite_long),\n  N_groups = ncol(mite),\n  group_id = mite_long$group_id,\n  abd = mite_long$abd\n))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 1.1 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.8 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.9 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.9 seconds.\nTotal execution time: 4.1 seconds.\n\n\n\nlibrary(tidyverse)\nlibrary(tidybayes)\nrvars_group_means_unpooled <- samp_group_avg_nopool |> \n  tidybayes::gather_rvars(group_mean[group_id]) |> \n  dplyr::mutate(spp = names(spp_names)[group_id],\n                spp = fct_reorder(spp, .value, .fun = median))\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = spp, dist = .value)) + \n  tidybayes::stat_halfeye()\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = spp, dist = exp(.value))) + \n  tidybayes::stat_halfeye()\n\n\n\ncolMeans(mite)\n\n    Brachy       PHTH       HPAV       RARD       SSTR    Protopl       MEGR \n 8.7285714  1.2714286  8.5142857  1.2142857  0.3142857  0.3714286  2.1857143 \n      MPRO       TVIE       HMIN      HMIN2       NPRA       TVEL       ONOV \n 0.1571429  0.8285714  4.9142857  1.9571429  1.8857143  9.0571429 17.2714286 \n      SUCT       LCIL   Oribatl1   Ceratoz1       PWIL   Galumna1   Stgncrs2 \n16.9571429 35.2571429  1.8857143  1.2857143  1.0857143  0.9571429  0.7285714 \n      HRUF   Trhypch1       PPEL       NCOR       SLAT       FSET   Lepidzts \n 0.2285714  2.6142857  0.1714286  1.1285714  0.4000000  1.8571429  0.1714286 \n  Eupelops   Miniglmn       LRUG      PLAG2   Ceratoz3   Oppiminu   Trimalc2 \n 0.6428571  0.2428571 10.4285714  0.8000000  1.3000000  1.1142857  2.0714286 \n\n\nI could easily add these colmeans to the second plot above\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = spp, dist = exp(.value))) + \n  tidybayes::stat_halfeye() +\n  geom_point(aes(y = spp, x = value), \n             inherit.aes = FALSE,\n             data = enframe(colMeans(mite), name = \"spp\"),\n             col = \"red\")\n\n\n\n\nBefore we jump to considering this as a hierarchical model, let’s look at another way of writing this Stan code\nFirst of all, I could have written this as a for-loop. I chose to vectorize it, and you can read more about it in the Stan user manual here.\n\n# for-loop version\n\nYou migth prefer seeing it this way because this lets you keep the data in the format you found it. you might also find it more readable. For models of this size, there will be no difference in speed between the two. But in bigger models, the first way I showed will be faster. this is because of the way that th Stan algorithm works when evaluatint the likelihood section. You can read more about it here [TK]\nWhether you choose a vectorized or for-loop approach to writing the likelihood, there is another, much more important alternative to writing a likelihood."
  },
  {
    "objectID": "topics/intercept_only/index.html#rewriting-the-normal-distribution",
    "href": "topics/intercept_only/index.html#rewriting-the-normal-distribution",
    "title": "Modèles hiérarchiques pour les sciences de la vie",
    "section": "rewriting the Normal distribution",
    "text": "rewriting the Normal distribution\n\\[\n\\text{Normal}(\\mu, \\sigma) = \\mu + z \\times \\sigma\n\\]\nif\n\\[\nz \\sim \\text{Normal}(0, 1)\n\\]\nyou can choose to write a normal distribution two ways. In the first, you consider the mean and standard devation as parameters “inside” the distribution, in the other, you start with a standard normal distribution and first scale it (multiply by the standard deviation) and then shift it (add in the average)\nThe result is a distribution that slides around the number line, like this:\n\n## tk animation\n\nWe can rewrite the first model in exactly this syntax\n\ngroup_avg_nopool_nc <- cmdstan_model(\"topics/intercept_only/group_avg_nopool_nc.stan\", \n                                  pedantic = TRUE)\n\nsamp_group_avg_nopool_nc <- group_avg_nopool_nc$sample(data = list(\n  N = nrow(mite_long),\n  N_groups = ncol(mite),\n  group_id = mite_long$group_id,\n  abd = mite_long$abd)\n)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 2.2 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 1.9 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 2.2 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 2.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 2.1 seconds.\nTotal execution time: 8.7 seconds.\n\n\nThis is an interesting fact that we will use later, but which I wanted to show now, separately from studying hierarchical modesls\n\nA model for parameters\nlet’s go back to the original differences between groups.. this time using species data\nCan also run the above model with row numbers\n\nmite_long_group <- mite |> \n  tibble::rowid_to_column() |> \n  pivot_longer(-rowid, names_to = \"spp\", values_to = \"abd\") |> \n  rename(group_id = rowid)\n\nsamp_group_avg_nopool_nc <- group_avg_nopool_nc$sample(data = list(\n  N = nrow(mite_long_group),\n  N_groups = max(mite_long_group$group_id),\n  group_id = mite_long_group$group_id,\n  abd = mite_long_group$abd))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 2.5 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 3.0 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 2.3 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 1.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 2.4 seconds.\nTotal execution time: 10.1 seconds.\n\nrvars_group_means_unpooled <- samp_group_avg_nopool_nc |> \n  tidybayes::gather_rvars(group_mean[group_id]) |> \n  dplyr::mutate(spp = names(spp_names)[group_id],\n                spp = fct_reorder(spp, .value, .fun = median))\n\nrvars_group_means_unpooled |> \n  ggplot2::ggplot(aes(y = group_id, dist = .value)) + \n  tidybayes::stat_halfeye()\n\n\n\n\nnow, let’s stop for a second and look at the point estimates for each plot in the dataset:\n\nrvars_group_means_unpooled |> \n  mutate(site_average = median(.value)) |> \n  ggplot(aes(x = site_average)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nAre you using the median to calculate something you’re calling an average ? what is going on?! A: I did this on purpose to show this distinction. the PARAMETER we’re talking about is the average abundance in each site. We don’t have a single value for this average, instead we have 2000 possible values, according to our model. We could choose to summarize those numbers any way we want – often, the median is a good choice.\n\nWhere do these differences in group mean come from? The simplest possible model might be that there is some average mite abundance, and some plots have more or less than this average. In other words, a normal distribution.\nLet’s add this model into our code\n\ngroup_avg_partpool <- cmdstan_model(\"topics/intercept_only/group_avg_partpool.stan\",\n                                    pedantic = TRUE)\n\nsamp_group_avg_partpool <- group_avg_partpool$sample(data = list(\n  N = nrow(mite_long_group),\n  N_groups = max(mite_long_group$group_id),\n  group_id = mite_long_group$group_id,\n  abd = mite_long_group$abd))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.9 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.8 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.8 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.8 seconds.\nTotal execution time: 3.6 seconds.\n\nsamp_group_avg_partpool |> \n  gather_rvars(group_mean[spp]) |> \n  arrange(median(.value))\n\n# A tibble: 70 × 3\n     spp .variable         .value\n   <int> <chr>         <rvar[1d]>\n 1    57 group_mean  -0.87 ± 0.25\n 2    62 group_mean  -0.62 ± 0.22\n 3    61 group_mean   0.25 ± 0.14\n 4    54 group_mean   0.39 ± 0.14\n 5    55 group_mean   0.54 ± 0.13\n 6    44 group_mean   0.57 ± 0.13\n 7    24 group_mean   0.84 ± 0.11\n 8    41 group_mean   0.85 ± 0.11\n 9    23 group_mean   0.85 ± 0.11\n10    63 group_mean   0.91 ± 0.10\n# ℹ 60 more rows\n\n\n\nsamp_group_avg_partpool |> \n  gather_rvars(mu, sigma)\n\n# A tibble: 2 × 2\n  .variable        .value\n  <chr>        <rvar[1d]>\n1 mu         1.33 ± 0.071\n2 sigma      0.57 ± 0.056"
  },
  {
    "objectID": "topics/intercept_only/index.html#regularization-a-simple-simulation",
    "href": "topics/intercept_only/index.html#regularization-a-simple-simulation",
    "title": "Modèles hiérarchiques pour les sciences de la vie",
    "section": "Regularization: a simple simulation",
    "text": "Regularization: a simple simulation\none of the best and most useful aspects of hierarchical models is one which is not easy to see in our chosen datasets! Instead, I’m going to simulate some data to demonstrate it.\n\nset.seed(1234)\nfake_clutch_size_data <- tibble::tibble(\n  site_id = 1:42,\n  n_nests_per_site = sample(size = max(site_id),\n                            x = c(33, 13, 3),\n                            prob = c(.1, .2, .7),\n                            replace = TRUE),\n  site_mean = rnorm(n = max(site_id),\n                    mean = log(10), \n                    sd = .7)) |> \n  rowwise() |> \n  mutate(clutch_size = list(rpois(n = n_nests_per_site, \n                                  lambda = exp(site_mean))))\n\n\nfake_clutch_size_data |> \n  # unnest(clutch_size) |> \n  mutate(mean_cs = mean(clutch_size)) |> \n  ggplot(aes(x = exp(site_mean), y = mean_cs,\n             fill = as.factor(n_nests_per_site))) + \n  geom_point(pch = 21, size = 5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  geom_abline(slope = 1, intercept = 0)\n\n\n\n\ncan also look at it going through 0\n\nnopool_fig <- fake_clutch_size_data |> \n  # unnest(clutch_size) |> \n  mutate(mean_cs = mean(clutch_size)) |> \n  ggplot(aes(x = exp(site_mean), y = mean_cs - exp(site_mean),\n             fill = as.factor(n_nests_per_site))) + \n  geom_point(pch = 21, size = 5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  geom_abline(slope = 0, intercept = 0)\n\nin both cases you can see that the green values are off of the true value – just by chance they ended up above or below the real value\nlet’s fit our model from above to this!\n\nunnest_fake_cs <- unnest(fake_clutch_size_data, cols = \"clutch_size\")\n\ngroup_avg_partpool_nests_samp <- group_avg_partpool$sample(\n  data = with(unnest_fake_cs, \n              list(N = length(clutch_size),\n                   N_groups = max(site_id),\n                   group_id = site_id,\n                   abd = clutch_size\n              ))\n)\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.2 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmp79d3Tk/model-1c547b302ea7.stan', line 14, column 2 to column 33)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.2 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.2 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 1.1 seconds.\n\n\n\ntruth_posterior_combined <- group_avg_partpool_nests_samp |> \n  gather_rvars(group_mean[site_id]) |> \n  mutate(mean_cs = median(.value)) |> \n  select(-.value) |> \n  left_join(fake_clutch_size_data |> select(site_id, n_nests_per_site, site_mean))\n\nJoining with `by = join_by(site_id)`\n\ntruth_posterior_combined |> \n  ggplot(\n    aes(\n      x = site_mean,\n      y = mean_cs - site_mean,\n      fill = as.factor(n_nests_per_site))) + \n  geom_point(pch = 21, size = 5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  geom_abline(slope = 0, intercept = 0)\n\n\n\nnopool_fig + \n  geom_point(\n    aes(\n      x = site_mean,\n      y = mean_cs - site_mean),\n    data = truth_posterior_combined) + \n  facet_wrap(~n_nests_per_site)\n\n\n\ntruth_posterior_combined |> \n  filter(exp(site_mean)>50)\n\n# A tibble: 1 × 5\n  site_id .variable  mean_cs n_nests_per_site site_mean\n    <int> <chr>        <dbl>            <dbl>     <dbl>\n1      41 group_mean    3.98                3      4.09\n\nfake_clutch_size_data |> \n  filter(site_id == 41) |> \n  pull(clutch_size)\n\n[[1]]\n[1] 64 54 46\n\n\nSmall exercise for you: demonstrate that all 3 models described here produce answers that are exactly the same.\n\n\n\nIn the ohter, you have standard normal variation\nAnimation showing overa ll mean and error, then group means and error\nprogrssion later to negative binomial perhaps??\nanimation showing averages – group averages – species averages\nreally want to show my own style here! I think I can see how this would build together.\nI wonder, if there is a way to simulate predator-prey dynamics in space, in a model where the predator needs to have both prey and environment conditions, but they prey need only the environment. what would happen if we use causal models (or the wrong causal model) on those data, measuring predators affecting prey when there is nothing\ngroup-mean-centering as a main topic Not as a new topic but as an interesting way to describe multilevel, slope models.\nanimation of points moving together, after group-mean-centering"
  },
  {
    "objectID": "topics/discrete_predictor/index.html",
    "href": "topics/discrete_predictor/index.html",
    "title": "Palmer penguins and discrete predictors",
    "section": "",
    "text": "Let’s start by taking a look at the Palmer Penguin dataset. Let’s look at the distribution of observations of bill size.\nThere’s quite a lot of variation in these measurements, with a suggestion of perhaps more than one peak in this distribution."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#a-simple-model",
    "href": "topics/discrete_predictor/index.html#a-simple-model",
    "title": "Palmer penguins and discrete predictors",
    "section": "A simple model",
    "text": "A simple model\n\\[\n\\begin{align}\n\\text{Bill depth} &\\sim \\text{Normal}(\\mu, \\sigma)\\\\\n\\mu &\\sim \\text{Normal}(17.5, 2) \\\\\n\\sigma &\\sim \\text{Exponential}(1) \\\\\n\\end{align}\n\\]\nlet’s express the same model in Stan:\n\nlibrary(cmdstanr)\n\nThis is cmdstanr version 0.5.3\n\n\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n\n\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n\n\n- CmdStan version: 2.31.0\n\nnormal_dist <- cmdstan_model(\"topics/discrete_predictor/normal_dist.stan\")\nnormal_dist\n\ndata {\n  int N;\n  vector[N] measurements;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu, sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\n\n\nThe model section looks very much like the approach shown above. I want you to notice especially how the bottom chunk has three lines, each describing a probability distribution. These are for all the probability distribution of all the quantities in the model, both observed and unobserved. Above, we state which is which. Models are devices for putting together the probability of all the quantities we are looking for. Again, a Bayesian defines the world as umeasured or measured quantities – and above we state which are observed (the data block) and which are unobserved (the parameters block).\nWe can fit this model to data and see the result:\n\n# first we drop all NA values\npenguins_nobillNA <- penguins |> \n  #drop NA values\n  filter(!is.na(bill_depth_mm))\n\n## then we assemble the data as a list.\n## I'm using the base function with()\n##  it lets me use the variable name directly \n## without writing penguins_nobillNA$bill_depth_mm\n\nlist_bill_dep <- with(penguins_nobillNA,\n     list(N = length(bill_depth_mm),\n          measurements = bill_depth_mm))\n     \n## sample 4 chains, suppress counting iterations\nsamp_bill_dep <- normal_dist$sample(data = list_bill_dep, \n                                    parallel_chains = 4,\n                                    refresh = 0)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpwFe8PQ/model-88a45d9e2133.stan', line 10, column 2 to column 35)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 1 finished in 0.0 seconds.\nChain 2 finished in 0.0 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.3 seconds.\n\n## summarize the samples for each parameter into a nice table\nsamp_bill_dep |> \n  posterior::summarise_draws() |> \n  flextable::flextable()\n\n\nvariablemeanmediansdmadq5q95rhatess_bulkess_taillp__-405.466506-405.1610000.956536020.6819960-407.429600-404.5640001.00012621,747.9051,825.007mu17.15045917.1520000.105012620.106895516.97928517.3195201.00073373,364.0882,183.045sigma1.9764151.9766150.073140090.07247691.8589992.1024130.99986943,747.5252,965.686"
  },
  {
    "objectID": "topics/discrete_predictor/index.html#plotting-parameters.",
    "href": "topics/discrete_predictor/index.html#plotting-parameters.",
    "title": "Palmer penguins and discrete predictors",
    "section": "Plotting parameters.",
    "text": "Plotting parameters.\nWe don’t have one distribution for each of our unknown numbers: we have thousands. We need to get a sense of what these possible values mean scientifically. An excellent way to do this is by making as many pictures as possible. We will start with making plots of specific parameters.\nWe can look at the distributions easily using the bayesplot package.\n\ndraws <- samp_bill_dep$draws(variables = c(\"mu\", \"sigma\"))\n\nbayesplot::mcmc_hist(draws, pars = \"mu\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\nbayesplot::mcmc_hist(draws, pars = \"sigma\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that the distributions do not have the same shape as the prior– this is particularly true for \\(\\sigma\\). This shows an important point: the prior distribution does not determine what the posterior looks like. should I sample from the prior and show them that?\n\nlibrary(ggplot2)\nlibrary(ggdist)\n\ndraws |>  \n  posterior::as_draws_df() |> \n  ggplot(aes(x = sigma)) + \n  stat_dotsinterval()\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\nFigure 1: the package ggdist has many fun & useful ways to draw pictures of posterior distributions. Here is one called stats_dotsinterval()"
  },
  {
    "objectID": "topics/discrete_predictor/index.html#posterior-predictions-the-easy-way-to-check-your-model",
    "href": "topics/discrete_predictor/index.html#posterior-predictions-the-easy-way-to-check-your-model",
    "title": "Palmer penguins and discrete predictors",
    "section": "Posterior predictions: the easy way to check your model",
    "text": "Posterior predictions: the easy way to check your model\nPeople care so much about model diagnostics. And with good reason: you need to know how much to trust a model before using it to make a scientific claim. One way to find out who’s model is best would be to use them to make a prediction, and see how right you are. Nobody has the time for that. so instead the best choice is to see how well the data fit your sample.\n\n# just get some draws\ndraws <- samp_bill_dep$draws(variables = c(\"mu\", \"sigma\"))\ndraws_matrix <- posterior::as_draws_matrix(draws)\n\n## set up a matrix. for every posterior sample, (that is, for a value of mu and a value of sigma) draw a whole fake dataset from a normal distribution with that mean and sd. \nnsamples <- 50\nyrep <- matrix(0, ncol = list_bill_dep$N, nrow = nsamples)\n\n# pick some random rows\nset.seed(1234)\nchosen_samples <- sample(1:nrow(draws_matrix), replace = FALSE, size = nsamples)\nsubset_draws <- draws_matrix[chosen_samples,]\n\nfor (r in 1:nsamples){\n yrep[r,] <- rnorm(n = list_bill_dep$N, \n                   mean = subset_draws[r, \"mu\"], \n                   sd = subset_draws[r, \"sigma\"])\n}\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = yrep)\n\n\n\n\n\nPosterior predictions in Stan\nWe can simulate our own data in R if we are comfortable translating between R and Stan. However, if you want, you can do the same process in Stan. Just combine the section we just looked at with the previous work on data simulation we started with:\n\nnormal_dist_rng <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng.stan\")\n\nnormal_dist_rng\n\ndata {\n  int N;\n  vector[N] measurements;\n}\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu, sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu, sigma);\n  }\n}\n\n\nHere we have a handy random number generator inside Stan.\n\nsamp_bill_dep_rng <- normal_dist_rng$sample(\n  data = list_bill_dep,\n  refresh = 0,\n  parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n\n\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpwFe8PQ/model-88a42f724ad0.stan', line 10, column 2 to column 35)\n\n\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n\n\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n\n\nChain 2 \n\n\nChain 1 finished in 0.4 seconds.\nChain 2 finished in 0.5 seconds.\nChain 3 finished in 0.5 seconds.\nChain 4 finished in 0.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.5 seconds.\nTotal execution time: 0.6 seconds.\n\ndraws <- samp_bill_dep_rng$draws(variables = c(\"yrep\"))\ndraws_matrix <- posterior::as_draws_matrix(draws)\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = head(draws_matrix, 50))\n\n\n\n\nThe code is much shorter, because there is less to do in R. Both of these gives the same outcome: the posterior predictive distribution. This gives us a straightfoward way to test our model’s performance:\n\nwe use the model to generate fake observations.\nplot these on top of the real data\nif the data is a really poor match, we know our model has a distorted view of the world."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#different-groups-are-different",
    "href": "topics/discrete_predictor/index.html#different-groups-are-different",
    "title": "Palmer penguins and discrete predictors",
    "section": "Different groups are different",
    "text": "Different groups are different\nlet’s add in differences among species\n\npenguins |> \n  ggplot(aes(x = bill_depth_mm, fill = species))+ \n  geom_histogram(binwidth = .5) + \n  scale_fill_brewer(palette = \"Dark2\")\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nNow we can see that the distribution is in fact three different shapes, all placed together.\n\n\n\n\n\n\nWarning\n\n\n\nSometimes scientists will plot histograms of data at the beginning of a research project, and use the histogram to decide if their data are “normally distributed” or not. This is not helpful! Instead, decide on a model first, and ask yourself what kind of data you expect."
  },
  {
    "objectID": "topics/discrete_predictor/index.html#stan-code-for-species-differences",
    "href": "topics/discrete_predictor/index.html#stan-code-for-species-differences",
    "title": "Palmer penguins and discrete predictors",
    "section": "Stan code for species differences",
    "text": "Stan code for species differences\n\nnormal_dist_rng_spp_forloop <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng_spp_forloop.stan\")\n\nnormal_dist_rng_spp_forloop\n\ndata {\n  int N;\n  vector[N] measurements;\n  array[N] int<lower=1,upper=3> spp_id;\n}\nparameters {\n  vector[3] mu;\n  real<lower=0> sigma;\n}\nmodel {\n  for (i in 1:N){\n    measurements[i] ~ normal(mu[spp_id[i]], sigma);\n  }\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu[spp_id[i]], sigma);\n  }\n}\n\n\nThere’s a few differences to notice here:\n\nin the data block: We have a new input! A declaration of the array of integers at the top, saying if this is “species 1”, “species 2”, or “species 3”\nmu is a vector now. why?\nnotice the for-loop.\n\nDo we maybe add an illustration here of how vector indexing works?\nWe can write this model a different way as well:\n\nnormal_dist_rng_spp <- cmdstan_model(stan_file = \"topics/discrete_predictor/normal_dist_rng_spp.stan\")\n\nnormal_dist_rng_spp\n\ndata {\n  int N;\n  vector[N] measurements;\n  array[N] int<lower=1,upper=3> spp_id;\n}\nparameters {\n  vector[3] mu;\n  real<lower=0> sigma;\n}\nmodel {\n  measurements ~ normal(mu[spp_id], sigma);\n  mu ~ normal(17,2);\n  sigma ~ exponential(1);\n}\ngenerated quantities{\n  vector[N] yrep;\n  for (i in 1:N){\n    yrep[i] = normal_rng(mu[spp_id[i]], sigma);\n  }\n}\n\n\nThe only difference to the previous model is in the line with the for-loop, which is now replaced with a vectorized expression. This is faster to write and will run faster in Stan. However its not possible in every case. add a link to the Stan forum\n\nSampling the species model\nWe have to make a new data list, since we’ve added a new input: a vector of numbers 1, 2, or 3 that tells us if we are working with the first, second, or third species.\nwhich model to sample? here i’m doing the vectorized one just because\n\nlist_bill_dep_spp <- with(penguins_nobillNA,\n     list(\n       N = length(bill_depth_mm),\n       measurements = bill_depth_mm,\n       spp_id = as.numeric(as.factor(species))\n     )\n)\n     \nsamp_normal_dist_rng_spp <- normal_dist_rng_spp$sample(\n  data = list_bill_dep_spp, \n  parallel_chains = 4,\n  refresh = 0)\n\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.8 seconds.\nChain 2 finished in 0.8 seconds.\nChain 3 finished in 0.8 seconds.\nChain 4 finished in 0.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.8 seconds.\nTotal execution time: 1.0 seconds.\n\nsamp_normal_dist_rng_spp$draws(variables = c(\"mu\", \"sigma\")) |> \n  posterior::summarise_draws() |> \n  flextable::flextable()\n\n\nvariablemeanmediansdmadq5q95rhatess_bulkess_tailmu[1]18.34376318.343850.091489780.0945157518.19167018.4940000.99974815,234.2703,519.726mu[2]18.41388418.412400.136261920.1361026818.19059018.6411001.00017724,179.2503,084.304mu[3]14.98588014.986400.103612610.1052646014.81409515.1549051.00017144,091.1652,887.654sigma1.1228741.121340.044096080.044196311.0532761.1949621.00093014,778.9653,315.725\n\n\nand we can repeat the posterior checking from before:\n\nspp_yrep_draws <- samp_normal_dist_rng_spp$draws(variables = c(\"yrep\"))\nspp_draws_matrix <- posterior::as_draws_matrix(spp_yrep_draws)\n\nbayesplot::ppc_dens_overlay(y = list_bill_dep$measurements,\n                            yrep = head(spp_draws_matrix, 50))\n\n\n\n\nThe predicted distribution is now much more like the real data\nWe can also make figures for each individual species. Here we will move away from using bayesplot and try to visualize our posterior using the handy functions in the tidybayes package add a link\n\nlibrary(tidybayes)\nspp_draws_df <- posterior::as_draws_df(spp_yrep_draws)\n\nnormal_dist_post_samp <- tidybayes::gather_draws(samp_normal_dist_rng_spp,\n                        yrep[row_id], \n                        ndraws = 50)\n\nnormal_dist_post_samp |> \n  mutate(species = penguins_nobillNA$species[row_id]) |> \n  ggplot(aes(x = .value, colour = species)) + \n  geom_density(aes(group = .iteration), alpha = .1) + \n  facet_wrap(~species) + \n  geom_density(aes(x = bill_depth_mm),\n               data = penguins_nobillNA,\n               colour = \"black\") + \n  scale_colour_brewer(palette = \"Dark2\")\n\n\n\n\n\n\nExercises\n\nLevel 1\n\nrepeat this experience for another variable in the dataset. Does the same code work on bill length? What about body size? What would you change about the model (if anything)\nuse bayesplot to examine the fit of body size to these data.\n\n\n\nLevel 2\n\ngenerate some random groups of your own, with known means. How well does the model fit these data\nThe present model is fixed for exactly 3 groups.\n\n\n\nLevel 3\n\nthe function tidybayes::compose_data is a convenient way to set up your data for passing it into R. Try out this function. What does it produce for our dataset? How do you need to modify our Stan program so that it works for the output of tidybayes::compose_data?\nAs you can see, the model"
  },
  {
    "objectID": "topics/01_data_simulation/data_simulation.html",
    "href": "topics/01_data_simulation/data_simulation.html",
    "title": "Data simulation",
    "section": "",
    "text": "simulating data in bayesian statitics\nWhy would you want to? there are a few good reasons:\nfirst, you want to understand your priors. this is the most critical one, and this will really help you to demystify what the furck you priors actually mean.\nsecond, you can validate your model, demonstrating to yourself that you understand it TK citation, this is something that almost nobody did, but that is always useful to do\nand finally, perhaps most importantly, is to test your own intuition. If you can write it in Stan, or if you can simulate data from your model, then you really understand it! if you can’t, then you don’t know quite how it works yet.\nOK so where do we begin. Let’s start with just simulating a simple dataset with one distribution. a normal distribution perhpas of height.. no that is incredibly boring. let’s simulate the nubmer of birds each of us is going to see on a hike today.\nHow do we do it? let’s think about hte process.\nWhat kind of numbers do we expect to get? what is a reasonable limit to how many we would see?\na simple idea we’re talking bird individuals, here, so a simple idea might be: let’s start with like 20 birds on average per person .\nlet’s simulate from a poisson distribution. as you probably know, the poisson in R is just rpois. every statistical distribution that is in R (which is a lot! almost all! ) has a distirbution has four functions. of the distribution is called dist, then they are:\nrdist = the distribution functions qdist = the quantile functions pdist = the probability density function ddist the density function\nand what IS probabiity anyways?\nprobability – does it exist at all? In these simulations we can see that we are expressing ourselves with a sort of great, big shrug: we have no idea what these numbers might be, and so we are working to just make up fake ones. we start with very little – with literally no information – about what our data might be when we see it. for a bayeisan, there is no practical difference between data and parameters in a model\nwhat makes a person and approach Bayesian is not the use of Bayes rule. Bayes rule is just a fact about conditional probability, which everyone uses regardless of their framework for scientific inference. no, to be bayesian is to use probability to measure uncertainty.\nOk so back to our simulation. First we must make up some random numbers. let’s begin by doing this in R\nr script to do that.\nand then lets do that in Stan.\nhere is a stan script that does the same thing! you can see the few things in our r script that we need: we need the number of observations we want to sijulate. we have the name of the distribution, and also we have the poisson rate, the average of our distribuion.\nso we will now translate this into Stan. Then we can look at Stan syntax right\nOk so now we can see our first simple stan model! we are using this powerful tool to draw forty random numbers.\nNow we can move on to the second step outlined above: we can just fit the same data to our model, vice versa, and see if we can recover that parameter.\nIn R, there are several ways to do it: first, we can use R do it in two ways: fitdistr, and glm.\nThen we do the same thing in Stan.\nThen we look to see if we have recovered our parameter.\nThe next steop in visualization, which we also do with this simple model.\n\nvisualizing a Bayesian model\ndata visualization\nwe can visualize our model from our priors we can visualize our bayesian posterior as well.\nthere are several good reasons why we should get used to working with bayeisan data bayesian posteriors after the model has been fit.\nso we’ll start with two different ways of working with our data\nfirst we’ll look atworking with raw posterior samaples, and take a base R approach\nsecond, we will look at package bayesplot, which lets you have a few posterior plots quite simply with an automatic process. we can look at our plots that way\nthen, we’ll focus on using a handy tool to make this a bit easier, called tidybayes this final funcitonwill help you to work with your Stan program outputs to have lots of different outputs.\nand why? well f course you could be placing lots of this work into your Stan program. We’re not going to be working with this a ton (unless we want to) but consider the tradeoffs involved. by generating your quantities, your calculated statistics, in ht estan program, you can make this more efficint, useing Stan’s greater speed. howe’ver you’ll also make your posterior much larger.\nI should also be going back to the material I taugh with Dan Simpson and Vianey to talk about this, add some of their models.\nwe’re going to talk about how to make sure our bayesina models are behaving as they should.\nrather than take a deep dive into the entire process, we’re going to look at shinystan, which is a helpful package that will generate for you a really good web app that will let you explore your bayesian model. Let’s take a look at it an what it says for our simple model.\nrhat\n\nthe next thing we will look at is a simple linear regression, for our model.. yeah?\nwe’ll start looking at a univariate distribution on simulated data.\nthen we’ll try to have some other data, say we’ll consider different.. sites? or a simple linear regression?\nlook at a linear regression first? or an intercept-only random effect model first?\ncould go to something like an intercept-only random effect first.. I wonder.\nwould we see something like a difficuly with NC vs centered parameterizaiton with the mite data? I would like to see.\nwould it be confusing to start with univariate regression, then go back to intercept-only, then do both at the same time.\nthe intercept-only animal would be interesting to show how it recovers the plot differences, and how to a certain extent the random intercepts correlate with th edifferences between sites. could fit to all the different species and see which has the easiest and best time. p"
  },
  {
    "objectID": "topics/secret_weapon.html",
    "href": "topics/secret_weapon.html",
    "title": "Summarizing many univariate models",
    "section": "",
    "text": "We’ve already looked at univariate models. When we fit the same model to multiple different groups, we don’t expect the same values for all the coefficients. Each thing we are studying will respond to the same variable in different ways.\nHierarchial models represent a way to model this variation, in ways that range from simple to complex.\nBefore we dive in with hierarchical structure, let’s build a bridge between these two approaches.\nThis is useful to help us understand what a hierarchical model does.\nHowever it is also useful from a strict model-building perspective – so useful that Andrew Gelman calls it a “Secret Weapon” tk link\nTo keep things simple and univariate, let’s consider only water:\nFirst, a quick word about centering and scaling a predictor variable:\nsome things to notice about this figure:\nAs you can see, some of these estimates are high, others low. We could also plot these as histograms to see this distribution.\nOnce again, the two parameters of this model represent:"
  },
  {
    "objectID": "topics/secret_weapon.html#say-it-in-stan",
    "href": "topics/secret_weapon.html#say-it-in-stan",
    "title": "Summarizing many univariate models",
    "section": "Say it in Stan",
    "text": "Say it in Stan\nThe above tidyverse approach is very appealing and intuitive, but we can also do the same procedure in Stan."
  },
  {
    "objectID": "topics/secret_weapon.html#modelling-variation-in-slopes",
    "href": "topics/secret_weapon.html#modelling-variation-in-slopes",
    "title": "Summarizing many univariate models",
    "section": "Modelling variation in slopes",
    "text": "Modelling variation in slopes\nClearly there is variation among species in the values of these parameters. Like all variation, we can develop a scientific model to describe it. The simplest model we’ll consider is a simple univariate distribution.\n\nsuppressPackageStartupMessages(library(cmdstanr))\n\nlogistic_bern_glm <- cmdstan_model(\n  stan_file = here::here(\"topics/secret_weapon_univariate.stan\"), \n  pedantic = TRUE)\n\nmite_bin <- mite\nmite_bin[mite_bin>0] <- 1\n\nlogistic_bern_glm$sample(data = list(\n  Nsites = nrow(mite_bin),\n  K = 2,\n  S = ncol(mite_bin),\n  x = cbind(1, with(mite.env, (WatrCont - mean(WatrCont))/100)),\n  y = as.matrix(mite_bin)\n))\n\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 9.2 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 9.3 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 10.0 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 12.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 10.3 seconds.\nTotal execution time: 42.0 seconds.\n\n\n variable     mean   median   sd  mad       q5      q95 rhat ess_bulk ess_tail\n   lp__   -1171.18 -1170.78 8.32 8.07 -1185.34 -1157.97 1.00      643     1511\n   z[1,1]     1.67     1.65 0.36 0.36     1.11     2.29 1.00     1214     2032\n   z[2,1]     0.04     0.04 0.39 0.37    -0.62     0.67 1.00     2184     2490\n   z[1,2]    -0.41    -0.40 0.26 0.25    -0.86     0.00 1.00      839     1684\n   z[2,2]    -0.92    -0.90 0.43 0.41    -1.68    -0.26 1.00     2123     2361\n   z[1,3]     2.06     2.04 0.42 0.41     1.41     2.80 1.00     1256     2335\n   z[2,3]    -0.10    -0.09 0.42 0.40    -0.81     0.58 1.00     2376     2473\n   z[1,4]    -0.62    -0.61 0.28 0.28    -1.09    -0.17 1.00      706     1606\n   z[2,4]    -1.04    -1.02 0.45 0.44    -1.80    -0.36 1.00     1918     2508\n   z[1,5]    -1.07    -1.06 0.32 0.32    -1.61    -0.57 1.01      770     1442\n\n # showing 10 of 145 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n\n\nlet’s take a look at these values:\n\ndata(\"mite.xy\", package = \"vegan\")\nmite.xy\n\n      x   y\n1  0.20 0.1\n2  1.00 0.1\n3  1.20 0.3\n4  1.40 0.5\n5  2.40 0.7\n6  1.80 0.9\n7  0.05 1.1\n8  2.00 1.3\n9  2.00 1.5\n10 1.20 1.7\n11 2.40 1.9\n12 0.20 2.1\n13 0.40 2.1\n14 2.00 2.3\n15 2.20 2.3\n16 0.05 2.7\n17 0.20 2.7\n18 2.20 2.7\n19 2.40 2.7\n20 1.20 2.9\n21 0.05 3.1\n22 1.40 3.1\n23 2.40 3.1\n24 0.20 3.5\n25 1.20 3.7\n26 0.80 3.9\n27 1.60 3.9\n28 0.20 4.1\n29 0.80 4.1\n30 1.80 4.5\n31 0.20 4.7\n32 1.40 4.7\n33 0.60 5.3\n34 1.00 5.3\n35 2.40 5.3\n36 1.40 5.5\n37 1.80 5.5\n38 0.40 5.9\n39 1.00 5.9\n40 1.80 5.9\n41 2.00 5.9\n42 0.05 6.1\n43 0.20 6.1\n44 0.40 6.1\n45 1.20 6.1\n46 1.60 6.1\n47 1.60 6.3\n48 0.40 6.5\n49 1.80 6.7\n50 0.60 6.9\n51 2.00 7.1\n52 0.05 7.3\n53 0.40 7.3\n54 1.40 7.5\n55 2.20 7.5\n56 0.20 7.9\n57 1.60 7.9\n58 2.40 7.9\n59 0.05 8.1\n60 1.20 8.1\n61 1.40 8.1\n62 2.00 8.1\n63 1.60 8.5\n64 1.60 8.7\n65 1.00 8.9\n66 1.60 8.9\n67 2.40 9.1\n68 2.20 9.3\n69 1.80 9.5\n70 0.40 9.7\n\nnrow(mite)\n\n[1] 70"
  },
  {
    "objectID": "day_2.html#convergence-diagnostics",
    "href": "day_2.html#convergence-diagnostics",
    "title": "Day 2",
    "section": "Convergence Diagnostics",
    "text": "Convergence Diagnostics"
  },
  {
    "objectID": "day_2.html#model-validation-with-simulation",
    "href": "day_2.html#model-validation-with-simulation",
    "title": "Day 2",
    "section": "Model validation with simulation",
    "text": "Model validation with simulation"
  },
  {
    "objectID": "day_2.html#dags",
    "href": "day_2.html#dags",
    "title": "Day 2",
    "section": "DAGs",
    "text": "DAGs\n\nforks, pipes and colliders\nsimulation from a DAG\ndemonstration of errors from disregarding DAGs"
  }
]